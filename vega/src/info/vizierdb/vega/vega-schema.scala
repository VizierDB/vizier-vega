package info.vizierdb.vega
/********************************************/
/********************************************/
/*** THIS FILE IS AUTOMATICALLY GENERATED ***/
/***   (by scripts/load_json_schema.sc)   ***/
/********************************************/
/********************************************/
/********************************************/
/********************************************/
/********************************************/
/***                                      ***/
/***        DO NOT MODIFY THIS FILE       ***/
/***                                      ***/
/********************************************/
/********************************************/
/********************************************/
/********************************************/
/********************************************/

import play.api.libs.json._
import info.vizierdb.vega.ExternalSupport._

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingFillOpacityBin 
   case class SharedEncodingFillOpacityBinAsBool(value: Boolean) extends SharedEncodingFillOpacityBin
   // BinParams is defined elsewhere
   case object SharedEncodingFillOpacityBinAsNull extends SharedEncodingFillOpacityBin

////////////////////////////////////////////////////////////////////////

// ScaleType (EnumType)
/**
 * The type of scale. Vega-Lite supports the following categories of scale types:
 * 
 * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`"linear"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`"pow"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`"sqrt"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`"symlog"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`"log"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`"time"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`"utc"`](https://vega.github.io/vega-lite/docs/scale.html#utc).
 * 
 * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`"ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`"band"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`"point"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.
 * 
 * 3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`"bin-ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`"quantile"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`"quantize"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`"threshold"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).
 * 
 * __Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).
 **/
sealed trait ScaleType  { val payload: JsValue }
   case object ScaleTypeLinear extends ScaleType { val payload = JsString("linear") }
   case object ScaleTypeLog extends ScaleType { val payload = JsString("log") }
   case object ScaleTypePow extends ScaleType { val payload = JsString("pow") }
   case object ScaleTypeSqrt extends ScaleType { val payload = JsString("sqrt") }
   case object ScaleTypeSymlog extends ScaleType { val payload = JsString("symlog") }
   case object ScaleTypeIdentity extends ScaleType { val payload = JsString("identity") }
   case object ScaleTypeSequential extends ScaleType { val payload = JsString("sequential") }
   case object ScaleTypeTime extends ScaleType { val payload = JsString("time") }
   case object ScaleTypeUtc extends ScaleType { val payload = JsString("utc") }
   case object ScaleTypeQuantile extends ScaleType { val payload = JsString("quantile") }
   case object ScaleTypeQuantize extends ScaleType { val payload = JsString("quantize") }
   case object ScaleTypeThreshold extends ScaleType { val payload = JsString("threshold") }
   case object ScaleTypeBinOrdinal extends ScaleType { val payload = JsString("bin-ordinal") }
   case object ScaleTypeOrdinal extends ScaleType { val payload = JsString("ordinal") }
   case object ScaleTypePoint extends ScaleType { val payload = JsString("point") }
   case object ScaleTypeBand extends ScaleType { val payload = JsString("band") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingStrokeWidthValue 
   case class SharedEncodingStrokeWidthValueAsNumber(value: JsNumber) extends SharedEncodingStrokeWidthValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigStyle (UnionType)
/**
 * A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
 * 
 * __Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style `"foo"` has higher precedence).
 **/
sealed trait AxisConfigStyle 
   case class AxisConfigStyleAsString(value: String) extends AxisConfigStyle
   case class AxisConfigStyleAsArrayOfString(value: Seq[String]) extends AxisConfigStyle

////////////////////////////////////////////////////////////////////////

// StackTransform (StructType)

case class StackTransform(
  /**
   * Output field names. This can be either a string or an array of strings with two elements denoting the name for the fields for stack start and stack end respectively. If a single string(e.g., `"val"`) is provided, the end field will be `"val_end"`.
   **/
  var `as` : StackTransformAs,
  /**
   * Mode for stacking marks. One of `"zero"` (default), `"center"`, or `"normalize"`. The `"zero"` offset will stack starting at `0`. The `"center"` offset will center the stacks. The `"normalize"` offset will compute percentage values for each stack point, with output values in the range `[0,1]`.
   * 
   * __Default value:__ `"zero"`
   **/
  var `offset` : Option[StackTransformOffset] = None,
  /**
   * The field which is stacked.
   **/
  var `stack` : String,
  /**
   * Field that determines the order of leaves in the stacked charts.
   **/
  var `sort` : Option[Seq[SortField]] = None,
  /**
   * The data fields to group by.
   **/
  var `groupby` : Seq[String]
) extends Transform 
{  }
object StackTransform {
  val definedFields = Set("stack", "groupby", "as", "sort", "offset") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsLimit (UnionType)

sealed trait TitleParamsLimit 
   // TitleParamsLimitAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisStyle (UnionType)
/**
 * A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
 * 
 * __Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style `"foo"` has higher precedence).
 **/
sealed trait AxisStyle 
   case class AxisStyleAsString(value: String) extends AxisStyle
   case class AxisStyleAsArrayOfString(value: Seq[String]) extends AxisStyle

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait TopLevelUnitSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefNumberBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefNumberBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// EncodingDescription (UnionType)
/**
 * A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `"aria-label"` attribute will be set to this description.
 **/
sealed trait EncodingDescription 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidth (StructType)

case class SharedEncodingStrokeWidth(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingStrokeWidthDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingStrokeWidthBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingStrokeWidthCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingStrokeWidthBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingStrokeWidthValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingStrokeWidthTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingStrokeWidthType] = None
)  
{  }
object SharedEncodingStrokeWidth {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1ParamsElement (UnionType)

sealed trait TopLevelRepeatSpecAsObject1ParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefHeight (UnionType)

sealed trait OverlayMarkDefHeight 
   case class OverlayMarkDefHeightAsNumber(value: JsNumber) extends OverlayMarkDefHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleAlign (UnionType)
/**
 * The alignment of the steps within the scale range.
 * 
 * This value must lie in the range `[0,1]`. A value of `0.5` indicates that the steps should be centered within the range. A value of `0` or `1` may be used to shift the bands to one side, say to position them adjacent to an axis.
 * 
 * __Default value:__ `0.5`
 **/
sealed trait ScaleAlign 
   case class ScaleAlignAsNumber(value: JsNumber) extends ScaleAlign
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait BarConfigX2 
   case class BarConfigX2AsNumber(value: JsNumber) extends BarConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingOrder (UnionType)
/**
 * Order of the marks.
 * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
 * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
 * - Otherwise, this `order` channel encodes layer order of the marks.
 * 
 * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
 **/
sealed trait FacetedEncodingOrder 
   // OrderFieldDef is defined elsewhere
   case class FacetedEncodingOrderAsArrayOfOrderFieldDef(value: Seq[OrderFieldDef]) extends FacetedEncodingOrder
   // OrderValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonArgAggregateOp (EnumType)

sealed trait NonArgAggregateOp extends Aggregate { val payload: JsValue }
   case object NonArgAggregateOpAverage extends NonArgAggregateOp { val payload = JsString("average") }
   case object NonArgAggregateOpCount extends NonArgAggregateOp { val payload = JsString("count") }
   case object NonArgAggregateOpDistinct extends NonArgAggregateOp { val payload = JsString("distinct") }
   case object NonArgAggregateOpMax extends NonArgAggregateOp { val payload = JsString("max") }
   case object NonArgAggregateOpMean extends NonArgAggregateOp { val payload = JsString("mean") }
   case object NonArgAggregateOpMedian extends NonArgAggregateOp { val payload = JsString("median") }
   case object NonArgAggregateOpMin extends NonArgAggregateOp { val payload = JsString("min") }
   case object NonArgAggregateOpMissing extends NonArgAggregateOp { val payload = JsString("missing") }
   case object NonArgAggregateOpProduct extends NonArgAggregateOp { val payload = JsString("product") }
   case object NonArgAggregateOpQ1 extends NonArgAggregateOp { val payload = JsString("q1") }
   case object NonArgAggregateOpQ3 extends NonArgAggregateOp { val payload = JsString("q3") }
   case object NonArgAggregateOpCi0 extends NonArgAggregateOp { val payload = JsString("ci0") }
   case object NonArgAggregateOpCi1 extends NonArgAggregateOp { val payload = JsString("ci1") }
   case object NonArgAggregateOpStderr extends NonArgAggregateOp { val payload = JsString("stderr") }
   case object NonArgAggregateOpStdev extends NonArgAggregateOp { val payload = JsString("stdev") }
   case object NonArgAggregateOpStdevp extends NonArgAggregateOp { val payload = JsString("stdevp") }
   case object NonArgAggregateOpSum extends NonArgAggregateOp { val payload = JsString("sum") }
   case object NonArgAggregateOpValid extends NonArgAggregateOp { val payload = JsString("valid") }
   case object NonArgAggregateOpValues extends NonArgAggregateOp { val payload = JsString("values") }
   case object NonArgAggregateOpVariance extends NonArgAggregateOp { val payload = JsString("variance") }
   case object NonArgAggregateOpVariancep extends NonArgAggregateOp { val payload = JsString("variancep") }

////////////////////////////////////////////////////////////////////////

// LineConfigEllipsis (UnionType)

sealed trait LineConfigEllipsis 
   case class LineConfigEllipsisAsString(value: String) extends LineConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Orientation (EnumType)
/**
 * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
 * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
 * - For area, this property determines the orient property of the Vega output.
 * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
 **/
sealed trait Orientation extends LegendConfigSymbolDirection with LegendConfigGradientDirection { val payload: JsValue }
   case object OrientationHorizontal extends Orientation { val payload = JsString("horizontal") }
   case object OrientationVertical extends Orientation { val payload = JsString("vertical") }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelColor (UnionType)
/**
 * The color of the tick label, can be in hex color code or regular color name.
 **/
sealed trait AxisConfigLabelColor 
   case object AxisConfigLabelColorAsNull extends AxisConfigLabelColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigWithoutType (StructType)
/**
 * The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations for an interval selection definition (except `type`) may be specified here.
 * 
 * For instance, setting `interval` to `{"translate": false}` disables the ability to move interval selections by default.
 **/
case class IntervalSelectionConfigWithoutType(
  /**
   * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
   * 
   * __Default value:__ `dblclick`.
   * 
   * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
   **/
  var `clear` : Option[IntervalSelectionConfigWithoutTypeClear] = None,
  /**
   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
   * 
   * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
   **/
  var `on` : Option[IntervalSelectionConfigWithoutTypeOn] = None,
  /**
   * With layered and multi-view displays, a strategy that determines how selections' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.
   * 
   * One of:
   * - `"global"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.
   * - `"union"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.
   * - `"intersect"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.
   * 
   * __Default value:__ `global`.
   * 
   * __See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation.
   **/
  var `resolve` : Option[SelectionResolution] = None,
  /**
   * When truthy, allows a user to interactively move an interval selection back-and-forth. Can be `true`, `false` (to disable panning), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/) which must include a start and end event to trigger continuous panning. Discrete panning (e.g., pressing the left/right arrow keys) will be supported in future versions.
   * 
   * __Default value:__ `true`, which corresponds to `[mousedown, window:mouseup] > window:mousemove!`. This default allows users to clicks and drags within an interval selection to reposition it.
   * 
   * __See also:__ [`translate` examples](https://vega.github.io/vega-lite/docs/selection.html#translate) in the documentation.
   **/
  var `translate` : Option[IntervalSelectionConfigWithoutTypeTranslate] = None,
  /**
   * An interval selection also adds a rectangle mark to depict the extents of the interval. The `mark` property can be used to customize the appearance of the mark.
   * 
   * __See also:__ [`mark` examples](https://vega.github.io/vega-lite/docs/selection.html#mark) in the documentation.
   **/
  var `mark` : Option[BrushConfig] = None,
  /**
   * An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `encodings` : Option[Seq[SingleDefUnitChannel]] = None,
  /**
   * When truthy, allows a user to interactively resize an interval selection. Can be `true`, `false` (to disable zooming), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/). Currently, only `wheel` events are supported, but custom event streams can still be used to specify filters, debouncing, and throttling. Future versions will expand the set of events that can trigger this transformation.
   * 
   * __Default value:__ `true`, which corresponds to `wheel!`. This default allows users to use the mouse wheel to resize an interval selection.
   * 
   * __See also:__ [`zoom` examples](https://vega.github.io/vega-lite/docs/selection.html#zoom) in the documentation.
   **/
  var `zoom` : Option[IntervalSelectionConfigWithoutTypeZoom] = None
)  
{  }
object IntervalSelectionConfigWithoutType {
  val definedFields = Set("clear", "zoom", "encodings", "mark", "resolve", "translate", "on") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpec (StructType)

case class TopLevelConcatSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelConcatSpecParamsElement]] = None,
  /**
   * A list of views to be concatenated.
   **/
  var `concat` : Seq[NonNormalizedSpec],
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelConcatSpecBounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelConcatSpecPadding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelConcatSpecTitle] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelConcatSpecBackground] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[TopLevelConcatSpecCenter] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[TopLevelConcatSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[TopLevelConcatSpecSpacing] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelConcatSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelSpec 
{  }
object TopLevelConcatSpec {
  val definedFields = Set("spacing", "data", "padding", "config", "usermeta", "autosize", "datasets", "transform", "align", "params", "description", "title", "resolve", "bounds", "background", "name", "columns", "center", "$schema", "concat") 
}

////////////////////////////////////////////////////////////////////////

// PrimitiveValue (UnionType)

sealed trait PrimitiveValue extends SharedEncodingStrokeWidthDatum with SharedEncodingStrokeDatum with SharedEncodingY2Datum with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with SharedEncodingRadius2Datum with ScaleDatumDefDatum with DatumDefDatum with SharedEncodingAngleDatum with SharedEncodingStrokeOpacityDatum with ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum with SharedEncodingSizeDatum with SelectionInit with SharedEncodingOpacityDatum with PositionDatumDefDatum with FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with SharedEncodingLongitude2Datum with SharedEncodingLatitudeDatum with SharedEncodingStrokeDashDatum with SharedEncodingYOffsetDatum with ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum with SharedEncodingRadiusDatum with SharedEncodingLatitude2Datum with FieldOrDatumDefWithConditionStringDatumDefTextDatum with SharedEncodingXDatum with SharedEncodingThetaDatum with SharedEncodingFillOpacityDatum with SharedEncodingX2Datum with PositionDatumDefBaseDatum with FieldOrDatumDefWithConditionDatumDefNumberDatum with SharedEncodingYDatum with SharedEncodingFillDatum with SharedEncodingXOffsetDatum with SharedEncodingTheta2Datum with SharedEncodingTextDatum with SharedEncodingColorDatum with SharedEncodingLongitudeDatum with SharedEncodingShapeDatum with FieldOrDatumDefWithConditionDatumDefStringNullDatum
   case class PrimitiveValueAsNumber(value: JsNumber) extends PrimitiveValue
   case class PrimitiveValueAsString(value: String) extends PrimitiveValue
   case class PrimitiveValueAsBool(value: Boolean) extends PrimitiveValue
   case object PrimitiveValueAsNull extends PrimitiveValue

////////////////////////////////////////////////////////////////////////

// LegendConfigFillColor (UnionType)
/**
 * Background fill color for the full legend.
 **/
sealed trait LegendConfigFillColor 
   case object LegendConfigFillColorAsNull extends LegendConfigFillColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleFontStyle (UnionType)
/**
 * The font style of the header title.
 **/
sealed trait HeaderTitleFontStyle 
   case class HeaderTitleFontStyleAsString(value: String) extends HeaderTitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingSizeBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigGridCap (UnionType)

sealed trait AxisConfigGridCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefUrl (UnionType)

sealed trait MarkDefUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleLimitAsNumber (ConstrainedType)
/**
 * Maximum allowed pixel width of axis titles.
 **/
case class AxisConfigTitleLimitAsNumber(value: JsNumber) extends AxisConfigTitleLimit
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolDashOffset (UnionType)

sealed trait LegendConfigSymbolDashOffset 
   case class LegendConfigSymbolDashOffsetAsNumber(value: JsNumber) extends LegendConfigSymbolDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigAriaRole (UnionType)

sealed trait LineConfigAriaRole 
   case class LineConfigAriaRoleAsString(value: String) extends LineConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefDir (UnionType)

sealed trait OverlayMarkDefDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BindRadioSelectInput (EnumType)

sealed trait BindRadioSelectInput  { val payload: JsValue }
   case object BindRadioSelectInputRadio extends BindRadioSelectInput { val payload = JsString("radio") }
   case object BindRadioSelectInputSelect extends BindRadioSelectInput { val payload = JsString("select") }

////////////////////////////////////////////////////////////////////////

// LegendConfigColumns (UnionType)

sealed trait LegendConfigColumns 
   case class LegendConfigColumnsAsNumber(value: JsNumber) extends LegendConfigColumns
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFontSize (UnionType)

sealed trait RectConfigFontSize 
   // RectConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait BarConfigY2 
   case class BarConfigY2AsNumber(value: JsNumber) extends BarConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Alphabetic (ConstantType)

case class Alphabetic() extends TextBaseline

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelHConcatSpecBounds  { val payload: JsValue }
   case object TopLevelHConcatSpecBoundsFull extends TopLevelHConcatSpecBounds { val payload = JsString("full") }
   case object TopLevelHConcatSpecBoundsFlush extends TopLevelHConcatSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeDash (UnionType)

sealed trait OverlayMarkDefStrokeDash 
   case class OverlayMarkDefStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends OverlayMarkDefStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait BarConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCornerRadiusBottomLeft (UnionType)

sealed trait OverlayMarkDefCornerRadiusBottomLeft 
   case class OverlayMarkDefCornerRadiusBottomLeftAsNumber(value: JsNumber) extends OverlayMarkDefCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait TickConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait OverlayMarkDefBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingStrokeOpacityValue 
   case class SharedEncodingStrokeOpacityValueAsNumber(value: JsNumber) extends SharedEncodingStrokeOpacityValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait FacetedUnitSpecCenter 
   case class FacetedUnitSpecCenterAsBool(value: Boolean) extends FacetedUnitSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class MarkConfigFillOpacityAsNumber(value: JsNumber) extends MarkConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateStringFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalPredicateStringFieldDefBin 
   case class ConditionalPredicateStringFieldDefBinAsBool(value: Boolean) extends ConditionalPredicateStringFieldDefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object ConditionalPredicateStringFieldDefBinAsNull extends ConditionalPredicateStringFieldDefBin

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingAngleType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigStrokeDash (UnionType)

sealed trait LegendConfigStrokeDash 
   case class LegendConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends LegendConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelBaselineAsObject2Condition (UnionType)

sealed trait ConditionalAxisLabelBaselineAsObject2Condition 
   // ConditionalPredicateValueDefTextBaselineNullExprRef is defined elsewhere
   case class ConditionalAxisLabelBaselineAsObject2ConditionAsArrayOfConditionalPredicateValueDefTextBaselineNullExprRef(value: Seq[ConditionalPredicateValueDefTextBaselineNullExprRef]) extends ConditionalAxisLabelBaselineAsObject2Condition

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class OverlayMarkDefFontSizeAsNumber(value: JsNumber) extends OverlayMarkDefFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingStrokeWidthCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingStrokeWidthConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingStrokeWidthCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitudeType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingLatitudeType 
   // Quantitative is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigOrder (UnionType)

sealed trait TickConfigOrder 
   case object TickConfigOrderAsNull extends TickConfigOrder
   case class TickConfigOrderAsBool(value: Boolean) extends TickConfigOrder

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefTextBaselineNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefTextBaselineNullExprRef extends ConditionalAxisLabelBaselineAsObject2Condition with ConditionalAxisLabelBaselineAsObject1Condition
   // ConditionalPredicateValueDefTextBaselineNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefTextBaselineNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StrokeCap (EnumType)
/**
 * The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.
 * 
 * __Default value:__ `"butt"`
 **/
sealed trait StrokeCap extends AxisDomainCap with AxisTickCap with ViewBackgroundStrokeCap with MarkConfigStrokeCap with BarConfigStrokeCap with AreaConfigStrokeCap with AxisConfigTickCap with MarkDefStrokeCap with LineConfigStrokeCap with OverlayMarkDefStrokeCap with ViewConfigStrokeCap with AxisConfigGridCap with RectConfigStrokeCap with AxisGridCap with TickConfigStrokeCap with AxisConfigDomainCap { val payload: JsValue }
   case object StrokeCapButt extends StrokeCap { val payload = JsString("butt") }
   case object StrokeCapRound extends StrokeCap { val payload = JsString("round") }
   case object StrokeCapSquare extends StrokeCap { val payload = JsString("square") }

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelPadding (UnionType)

sealed trait LegendConfigLabelPadding 
   case class LegendConfigLabelPaddingAsNumber(value: JsNumber) extends LegendConfigLabelPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait BarConfigTooltip 
   case class BarConfigTooltipAsString(value: String) extends BarConfigTooltip
   case object BarConfigTooltipAsNull extends BarConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class BarConfigTooltipAsBool(value: Boolean) extends BarConfigTooltip
   case class BarConfigTooltipAsNumber(value: JsNumber) extends BarConfigTooltip

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelBaseline (UnionType)

sealed trait LegendConfigLabelBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StepFor (EnumType)
/**
 * Whether to apply the step to position scale or offset scale when there are both `x` and `xOffset` or both `y` and `yOffset` encodings.
 **/
sealed trait StepFor  { val payload: JsValue }
   case object StepForPosition extends StepFor { val payload = JsString("position") }
   case object StepForOffset extends StepFor { val payload = JsString("offset") }

////////////////////////////////////////////////////////////////////////

// BarConfigStartAngle (UnionType)

sealed trait BarConfigStartAngle 
   case class BarConfigStartAngleAsNumber(value: JsNumber) extends BarConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelOverlap (UnionType)
/**
 * The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
 * 
 * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
 **/
sealed trait AxisConfigLabelOverlap 
   // LabelOverlap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetFieldDef (StructType)

case class FacetFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FacetFieldDefBandPosition] = None,
  /**
   * An object defining properties of a facet's header.
   **/
  var `header` : Option[Header] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FacetFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FacetFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` is not supported for `row` and `column`.
   **/
  var `sort` : Option[FacetFieldDefSort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends FacetSpecFacet with TopLevelFacetSpecFacet 
{  }
object FacetFieldDef {
  val definedFields = Set("bin", "header", "type", "timeUnit", "bandPosition", "aggregate", "title", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigLineBreak (UnionType)

sealed trait BarConfigLineBreak 
   case class BarConfigLineBreakAsString(value: String) extends BarConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBaseStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait PositionFieldDefBaseStack 
   // StackOffset is defined elsewhere
   case object PositionFieldDefBaseStackAsNull extends PositionFieldDefBaseStack
   case class PositionFieldDefBaseStackAsBool(value: Boolean) extends PositionFieldDefBaseStack

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeOpacity (UnionType)

sealed trait AreaConfigStrokeOpacity 
   // AreaConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FilterTransform (StructType)

case class FilterTransform(
  /**
   * The `filter` property must be a predication definition, which can take one of the following forms:
   * 
   * 1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string, where `datum` can be used to refer to the current data object. For example, `{filter: "datum.b2 > 60"}` would make the output data includes only items that have values in the field `b2` over 60.
   * 
   * 2) one of the [field predicates](https://vega.github.io/vega-lite/docs/predicate.html#field-predicate): [`equal`](https://vega.github.io/vega-lite/docs/predicate.html#field-equal-predicate), [`lt`](https://vega.github.io/vega-lite/docs/predicate.html#lt-predicate), [`lte`](https://vega.github.io/vega-lite/docs/predicate.html#lte-predicate), [`gt`](https://vega.github.io/vega-lite/docs/predicate.html#gt-predicate), [`gte`](https://vega.github.io/vega-lite/docs/predicate.html#gte-predicate), [`range`](https://vega.github.io/vega-lite/docs/predicate.html#range-predicate), [`oneOf`](https://vega.github.io/vega-lite/docs/predicate.html#one-of-predicate), or [`valid`](https://vega.github.io/vega-lite/docs/predicate.html#valid-predicate),
   * 
   * 3) a [selection predicate](https://vega.github.io/vega-lite/docs/predicate.html#selection-predicate), which define the names of a selection that the data point should belong to (or a logical composition of selections).
   * 
   * 4) a [logical composition](https://vega.github.io/vega-lite/docs/predicate.html#composition) of (1), (2), or (3).
   **/
  var `filter` : PredicateComposition
) extends Transform 
{  }
object FilterTransform {
  val definedFields = Set("filter") 
}

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithConditionBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait StringFieldDefWithConditionBin 
   case class StringFieldDefWithConditionBinAsBool(value: Boolean) extends StringFieldDefWithConditionBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object StringFieldDefWithConditionBinAsNull extends StringFieldDefWithConditionBin

////////////////////////////////////////////////////////////////////////

// AxisLabelOverlap (UnionType)
/**
 * The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
 * 
 * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
 **/
sealed trait AxisLabelOverlap 
   // LabelOverlap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigDy (UnionType)

sealed trait TitleConfigDy 
   case class TitleConfigDyAsNumber(value: JsNumber) extends TitleConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigDx (UnionType)

sealed trait TitleConfigDx 
   case class TitleConfigDxAsNumber(value: JsNumber) extends TitleConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Bounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelRepeatSpecAsObject2Bounds  { val payload: JsValue }
   case object TopLevelRepeatSpecAsObject2BoundsFull extends TopLevelRepeatSpecAsObject2Bounds { val payload = JsString("full") }
   case object TopLevelRepeatSpecAsObject2BoundsFlush extends TopLevelRepeatSpecAsObject2Bounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefNumberCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefNumberCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionMarkPropFieldDefNumberConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends FieldOrDatumDefWithConditionMarkPropFieldDefNumberCondition

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringExprRef (StructType)

case class ConditionalPredicateValueDefStringExprRef(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalPredicateValueDefStringExprRefValue
) extends ConditionalValueDefStringExprRef 
{  }
object ConditionalPredicateValueDefStringExprRef {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// LayerSpecLayerElement (UnionType)

sealed trait LayerSpecLayerElement 
   // LayerSpec is defined elsewhere
   // UnitSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelBaseline (UnionType)

sealed trait ConditionalAxisLabelBaseline extends AxisConfigLabelBaseline with AxisLabelBaseline
   // ConditionalAxisLabelBaselineAsObject1 is defined elsewhere
   // ConditionalAxisLabelBaselineAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait BarConfigOpacity 
   case class BarConfigOpacityAsNumber(value: JsNumber) extends BarConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Align (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait TopLevelRepeatSpecAsObject1Align 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// VConcatSpecGenericSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait VConcatSpecGenericSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MinMax (ConstantType)

case class MinMax() extends BoxPlotDefExtent with BoxPlotConfigExtent

////////////////////////////////////////////////////////////////////////

// ErrorBandConfig (StructType)
/**
 * ErrorBand Config
 **/
case class ErrorBandConfig(
  /**
   * The extent of the band. Available options include:
   * - `"ci"`: Extend the band to the confidence interval of the mean.
   * - `"stderr"`: The size of band are set to the value of standard error, extending from the mean.
   * - `"stdev"`: The size of band are set to the value of standard deviation, extending from the mean.
   * - `"iqr"`: Extend the band to the q1 and q3.
   * 
   * __Default value:__ `"stderr"`.
   **/
  var `extent` : Option[ErrorBarExtent] = None,
  var `borders` : Option[ErrorBandConfigBorders] = None,
  /**
   * The line interpolation method for the error band. One of the following:
   * - `"linear"`: piecewise linear segments, as in a polyline.
   * - `"linear-closed"`: close the linear segments to form a polygon.
   * - `"step"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.
   * - `"step-before"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.
   * - `"step-after"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.
   * - `"basis"`: a B-spline, with control point duplication on the ends.
   * - `"basis-open"`: an open B-spline; may not intersect the start or end.
   * - `"basis-closed"`: a closed B-spline, as in a loop.
   * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
   * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
   * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
   * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
   * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
   **/
  var `interpolate` : Option[Interpolate] = None,
  /**
   * The tension parameter for the interpolation type of the error band.
   **/
  var `tension` : Option[ErrorBandConfigTension] = None,
  var `band` : Option[ErrorBandConfigBand] = None
)  
{  }
object ErrorBandConfig {
  val definedFields = Set("borders", "extent", "band", "tension", "interpolate") 
}

////////////////////////////////////////////////////////////////////////

// ErrorBarDefRule (UnionType)

sealed trait ErrorBarDefRule 
   case class ErrorBarDefRuleAsBool(value: Boolean) extends ErrorBarDefRule
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadiusEnd (UnionType)
/**
 * - For vertical bars, top-left and top-right corner radius.
 * 
 * - For horizontal bars, top-right and bottom-right corner radius.
 **/
sealed trait MarkDefCornerRadiusEnd 
   case class MarkDefCornerRadiusEndAsNumber(value: JsNumber) extends MarkDefCornerRadiusEnd
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class BarConfigStrokeOpacityAsNumber(value: JsNumber) extends BarConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingUrlCondition 
   // ConditionalValueDefStringExprRef is defined elsewhere
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class SharedEncodingUrlConditionAsArrayOfConditionalValueDefStringExprRef(value: Seq[ConditionalValueDefStringExprRef]) extends SharedEncodingUrlCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   case class SharedEncodingUrlConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends SharedEncodingUrlCondition

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeWidth (UnionType)

sealed trait TickConfigStrokeWidth 
   // TickConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionCenter (UnionType)

sealed trait ProjectionCenter 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait LineConfigRadius 
   case class LineConfigRadiusAsNumber(value: JsNumber) extends LineConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait MarkConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingRadius2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingFillOpacityTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingColorType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelConcatSpecBounds  { val payload: JsValue }
   case object TopLevelConcatSpecBoundsFull extends TopLevelConcatSpecBounds { val payload = JsString("full") }
   case object TopLevelConcatSpecBoundsFlush extends TopLevelConcatSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// LineConfigPoint (UnionType)
/**
 * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
 * 
 * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
 * 
 * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
 * 
 * - If this property is `false`, no points would be automatically added to line or area marks.
 * 
 * __Default value:__ `false`.
 **/
sealed trait LineConfigPoint 
   case class LineConfigPointAsBool(value: Boolean) extends LineConfigPoint
   // OverlayMarkDef is defined elsewhere
   // Transparent is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadiusBottomLeft (UnionType)

sealed trait MarkDefCornerRadiusBottomLeft 
   case class MarkDefCornerRadiusBottomLeftAsNumber(value: JsNumber) extends MarkDefCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigDescription (UnionType)

sealed trait RectConfigDescription 
   case class RectConfigDescriptionAsString(value: String) extends RectConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AutoSizeParamsContains (EnumType)
/**
 * Determines how size calculation should be performed, one of `"content"` or `"padding"`. The default setting (`"content"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `"padding"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.
 * 
 * __Default value__: `"content"`
 **/
sealed trait AutoSizeParamsContains  { val payload: JsValue }
   case object AutoSizeParamsContainsContent extends AutoSizeParamsContains { val payload = JsString("content") }
   case object AutoSizeParamsContainsPadding extends AutoSizeParamsContains { val payload = JsString("padding") }

////////////////////////////////////////////////////////////////////////

// BarConfigOrder (UnionType)

sealed trait BarConfigOrder 
   case object BarConfigOrderAsNull extends BarConfigOrder
   case class BarConfigOrderAsBool(value: Boolean) extends BarConfigOrder

////////////////////////////////////////////////////////////////////////

// AreaConfigDescription (UnionType)

sealed trait AreaConfigDescription 
   case class AreaConfigDescriptionAsString(value: String) extends AreaConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisGridCap (UnionType)

sealed trait AxisGridCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleFieldDef (StructType)

case class ScaleFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ScaleFieldDefBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ScaleFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ScaleFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends OffsetDef 
{  }
object ScaleFieldDef {
  val definedFields = Set("bin", "type", "bandPosition", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigSmooth (UnionType)

sealed trait MarkConfigSmooth 
   case class MarkConfigSmoothAsBool(value: Boolean) extends MarkConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigFontSize (UnionType)

sealed trait TitleConfigFontSize 
   // TitleConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeJoin (UnionType)

sealed trait BarConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DatumDefDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait DatumDefDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigGridWidth (UnionType)

sealed trait AxisConfigGridWidth 
   // AxisConfigGridWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigCursor (UnionType)

sealed trait LineConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigBandWithNestedOffsetPaddingOuter (ConstrainedType)
/**
 * Default outer padding for `x` and `y` band scales with nested `xOffset` and `yOffset` encoding.
 * 
 * __Default value:__ `0.2`
 **/
sealed trait ScaleConfigBandWithNestedOffsetPaddingOuter 
   case class ScaleConfigBandWithNestedOffsetPaddingOuterAsNumber(value: JsNumber) extends ScaleConfigBandWithNestedOffsetPaddingOuter
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Padding (ConstrainedType)

sealed trait Padding extends TopLevelHConcatSpecPadding with ConfigPadding with TopLevelLayerSpecPadding with TopLevelUnitSpecPadding with TopLevelFacetSpecPadding with TopLevelRepeatSpecAsObject2Padding with TopLevelVConcatSpecPadding with TopLevelRepeatSpecAsObject1Padding with TopLevelConcatSpecPadding
   case class PaddingAsNumber(value: JsNumber) extends Padding
   // PaddingAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefWidth (UnionType)
/**
 * Width of the marks.  One of:
 * 
 * - A number representing a fixed pixel width.
 * 
 * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band.
 **/
sealed trait MarkDefWidth 
   case class MarkDefWidthAsNumber(value: JsNumber) extends MarkDefWidth
   // ExprRef is defined elsewhere
   // RelativeBandSize is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelHConcatSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFontWeight (UnionType)

sealed trait LineConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAria (UnionType)

sealed trait RectConfigAria 
   case class RectConfigAriaAsBool(value: Boolean) extends RectConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AutoSizeParams (StructType)

case class AutoSizeParams(
  /**
   * Determines how size calculation should be performed, one of `"content"` or `"padding"`. The default setting (`"content"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `"padding"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.
   * 
   * __Default value__: `"content"`
   **/
  var `contains` : Option[AutoSizeParamsContains] = None,
  /**
   * A boolean flag indicating if autosize layout should be re-calculated on every view update.
   * 
   * __Default value__: `false`
   **/
  var `resize` : Option[Boolean] = None,
  /**
   * The sizing format type. One of `"pad"`, `"fit"`, `"fit-x"`, `"fit-y"`,  or `"none"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.
   * 
   * __Default value__: `"pad"`
   **/
  var `type` : Option[AutosizeType] = None
) extends TopLevelVConcatSpecAutosize with TopLevelConcatSpecAutosize with ConfigAutosize with TopLevelRepeatSpecAsObject2Autosize with TopLevelFacetSpecAutosize with TopLevelLayerSpecAutosize with TopLevelUnitSpecAutosize with TopLevelHConcatSpecAutosize with TopLevelRepeatSpecAsObject1Autosize 
{  }
object AutoSizeParams {
  val definedFields = Set("contains", "resize", "type") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolStrokeWidthAsNumber (ConstrainedType)
/**
 * The width of the symbol's stroke.
 * 
 * __Default value:__ `1.5`.
 **/
case class LegendConfigSymbolStrokeWidthAsNumber(value: JsNumber) extends LegendConfigSymbolStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldDefWithoutScale (StructType)
/**
 * Field Def without scale (and without bin: "binned" support).
 **/
case class FieldDefWithoutScale(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldDefWithoutScaleBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FieldDefWithoutScaleBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FieldDefWithoutScaleTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends EncodingDetail with SharedEncodingDetail with FacetedEncodingDetail 
{  }
object FieldDefWithoutScale {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefDescription (UnionType)

sealed trait MarkDefDescription 
   case class MarkDefDescriptionAsString(value: String) extends MarkDefDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeOpacity (UnionType)

sealed trait RectConfigStrokeOpacity 
   // RectConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigOffsetBandPaddingOuter (UnionType)
/**
 * Default padding outer for xOffset/yOffset's band scales.
 * 
 * __Default Value:__ `0`
 **/
sealed trait ScaleConfigOffsetBandPaddingOuter 
   case class ScaleConfigOffsetBandPaddingOuterAsNumber(value: JsNumber) extends ScaleConfigOffsetBandPaddingOuter
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait ConcatSpecGenericSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class ViewBackgroundStrokeOpacityAsNumber(value: JsNumber) extends ViewBackgroundStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FacetMapping (StructType)

case class FacetMapping(
  /**
   * A field definition for the horizontal facet of trellis plots.
   **/
  var `column` : Option[FacetFieldDef] = None,
  /**
   * A field definition for the vertical facet of trellis plots.
   **/
  var `row` : Option[FacetFieldDef] = None
) extends FacetSpecFacet with TopLevelFacetSpecFacet 
{  }
object FacetMapping {
  val definedFields = Set("column", "row") 
}

////////////////////////////////////////////////////////////////////////

// AxisTitleLimitAsNumber (ConstrainedType)
/**
 * Maximum allowed pixel width of axis titles.
 **/
case class AxisTitleLimitAsNumber(value: JsNumber) extends AxisTitleLimit
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigHref (UnionType)

sealed trait TickConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTranslate (UnionType)

sealed trait AxisTranslate 
   case class AxisTranslateAsNumber(value: JsNumber) extends AxisTranslate
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeDashOffset (UnionType)

sealed trait ViewBackgroundStrokeDashOffset 
   case class ViewBackgroundStrokeDashOffsetAsNumber(value: JsNumber) extends ViewBackgroundStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAspect (UnionType)

sealed trait RectConfigAspect 
   case class RectConfigAspectAsBool(value: Boolean) extends RectConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelConcatSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleFontStyle (UnionType)

sealed trait AxisConfigTitleFontStyle 
   case class AxisConfigTitleFontStyleAsString(value: String) extends AxisConfigTitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAspect (UnionType)

sealed trait BarConfigAspect 
   case class BarConfigAspectAsBool(value: Boolean) extends BarConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisColorAsObject1Condition (UnionType)

sealed trait ConditionalAxisColorAsObject1Condition 
   // ConditionalPredicateValueDefColorNullExprRef is defined elsewhere
   case class ConditionalAxisColorAsObject1ConditionAsArrayOfConditionalPredicateValueDefColorNullExprRef(value: Seq[ConditionalPredicateValueDefColorNullExprRef]) extends ConditionalAxisColorAsObject1Condition

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait FacetEncodingFieldDefCenter 
   case class FacetEncodingFieldDefCenterAsBool(value: Boolean) extends FacetEncodingFieldDefCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleLimit (UnionType)
/**
 * The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
 * 
 * __Default value:__ `0`, indicating no limit
 **/
sealed trait HeaderTitleLimit 
   case class HeaderTitleLimitAsNumber(value: JsNumber) extends HeaderTitleLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BinTransform (StructType)

case class BinTransform(
  /**
   * The output fields at which to write the start and end bin values. This can be either a string or an array of strings with two elements denoting the name for the fields for bin start and bin end respectively. If a single string (e.g., `"val"`) is provided, the end field will be `"val_end"`.
   **/
  var `as` : BinTransformAs,
  /**
   * An object indicating bin properties, or simply `true` for using default bin parameters.
   **/
  var `bin` : BinTransformBin,
  /**
   * The data field to bin.
   **/
  var `field` : String
) extends Transform 
{  }
object BinTransform {
  val definedFields = Set("as", "bin", "field") 
}

////////////////////////////////////////////////////////////////////////

// ViewBackgroundCornerRadius (UnionType)

sealed trait ViewBackgroundCornerRadius 
   case class ViewBackgroundCornerRadiusAsNumber(value: JsNumber) extends ViewBackgroundCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeTransformKeyvals (UnionType)
/**
 * Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
 * 
 * If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.
 * 
 * If there is no impute grouping, this property _must_ be specified.
 **/
sealed trait ImputeTransformKeyvals 
   case class ImputeTransformKeyvalsAsArrayOfAny(value: Seq[JsValue]) extends ImputeTransformKeyvals
   // ImputeSequence is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeSchemeAsObject3 (StructType)

case class RangeSchemeAsObject3(
  var `count` : Option[JsNumber] = None,
  var `extent` : Option[Seq[JsNumber]] = None,
  var `scheme` : RangeSchemeAsObject3Scheme
) extends RangeScheme 
{  }
object RangeSchemeAsObject3 {
  val definedFields = Set("count", "extent", "scheme") 
}

////////////////////////////////////////////////////////////////////////

// RangeEnum (EnumType)

sealed trait RangeEnum extends RangeScheme with ScaleRange { val payload: JsValue }
   case object RangeEnumWidth extends RangeEnum { val payload = JsString("width") }
   case object RangeEnumHeight extends RangeEnum { val payload = JsString("height") }
   case object RangeEnumSymbol extends RangeEnum { val payload = JsString("symbol") }
   case object RangeEnumCategory extends RangeEnum { val payload = JsString("category") }
   case object RangeEnumOrdinal extends RangeEnum { val payload = JsString("ordinal") }
   case object RangeEnumRamp extends RangeEnum { val payload = JsString("ramp") }
   case object RangeEnumDiverging extends RangeEnum { val payload = JsString("diverging") }
   case object RangeEnumHeatmap extends RangeEnum { val payload = JsString("heatmap") }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeWidth (UnionType)

sealed trait OverlayMarkDefStrokeWidth 
   // OverlayMarkDefStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SequenceParams (StructType)
/**
 * Generate a sequence of numbers.
 **/
case class SequenceParams(
  /**
   * The name of the generated sequence field.
   * 
   * __Default value:__ `"data"`
   **/
  var `as` : Option[String] = None,
  /**
   * The starting value of the sequence (inclusive).
   **/
  var `start` : JsNumber,
  /**
   * The step value between sequence entries.
   * 
   * __Default value:__ `1`
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * The ending value of the sequence (exclusive).
   **/
  var `stop` : JsNumber
)  
{  }
object SequenceParams {
  val definedFields = Set("as", "start", "step", "stop") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingLatitude2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainWidth (UnionType)

sealed trait AxisConfigDomainWidth 
   case class AxisConfigDomainWidthAsNumber(value: JsNumber) extends AxisConfigDomainWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait TickConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigXReverse (UnionType)
/**
 * Reverse x-scale by default (useful for right-to-left charts).
 **/
sealed trait ScaleConfigXReverse 
   case class ScaleConfigXReverseAsBool(value: Boolean) extends ScaleConfigXReverse
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class LineConfigStrokeWidthAsNumber(value: JsNumber) extends LineConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait MarkConfigShape 
   case class MarkConfigShapeAsString(value: String) extends MarkConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait LineConfigInvalid  { val payload: JsValue }
   case object LineConfigInvalidFilter extends LineConfigInvalid { val payload = JsString("filter") }
   case object LineConfigInvalidUndefined extends LineConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAngle (UnionType)

sealed trait OverlayMarkDefAngle 
   // OverlayMarkDefAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfig (StructType)
/**
 * Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config).
 **/
case class TitleConfig(
  var `anchor` : Option[TitleConfigAnchor] = None,
  var `subtitleFontSize` : Option[TitleConfigSubtitleFontSize] = None,
  var `dy` : Option[TitleConfigDy] = None,
  var `angle` : Option[TitleConfigAngle] = None,
  /**
   * Horizontal text alignment for title text. One of `"left"`, `"center"`, or `"right"`.
   **/
  var `align` : Option[Align] = None,
  var `fontStyle` : Option[TitleConfigFontStyle] = None,
  var `frame` : Option[TitleConfigFrame] = None,
  var `font` : Option[TitleConfigFont] = None,
  var `offset` : Option[TitleConfigOffset] = None,
  var `subtitleColor` : Option[TitleConfigSubtitleColor] = None,
  var `aria` : Option[TitleConfigAria] = None,
  var `dx` : Option[TitleConfigDx] = None,
  var `subtitleFont` : Option[TitleConfigSubtitleFont] = None,
  var `subtitleLineHeight` : Option[TitleConfigSubtitleLineHeight] = None,
  /**
   * Vertical text baseline for title and subtitle text. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.
   **/
  var `baseline` : Option[TextBaseline] = None,
  var `subtitleFontStyle` : Option[TitleConfigSubtitleFontStyle] = None,
  var `subtitleFontWeight` : Option[TitleConfigSubtitleFontWeight] = None,
  var `color` : Option[TitleConfigColor] = None,
  var `subtitlePadding` : Option[TitleConfigSubtitlePadding] = None,
  var `zindex` : Option[TitleConfigZindex] = None,
  var `lineHeight` : Option[TitleConfigLineHeight] = None,
  var `orient` : Option[TitleConfigOrient] = None,
  var `fontSize` : Option[TitleConfigFontSize] = None,
  var `limit` : Option[TitleConfigLimit] = None,
  var `fontWeight` : Option[TitleConfigFontWeight] = None
)  
{  }
object TitleConfig {
  val definedFields = Set("fontSize", "font", "subtitleLineHeight", "color", "anchor", "subtitlePadding", "frame", "dy", "dx", "lineHeight", "subtitleFontSize", "offset", "subtitleFontStyle", "fontStyle", "limit", "aria", "fontWeight", "zindex", "orient", "subtitleFontWeight", "baseline", "subtitleColor", "align", "subtitleFont", "angle") 
}

////////////////////////////////////////////////////////////////////////

// RangeRawElement (UnionType)

sealed trait RangeRawElement 
   case class RangeRawElementAsString(value: String) extends RangeRawElement
   case object RangeRawElementAsNull extends RangeRawElement
   case class RangeRawElementAsArrayOfNumber(value: Seq[JsNumber]) extends RangeRawElement
   case class RangeRawElementAsBool(value: Boolean) extends RangeRawElement
   case class RangeRawElementAsNumber(value: JsNumber) extends RangeRawElement

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecParamsElement (UnionType)

sealed trait TopLevelLayerSpecParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigWithoutTypeOn (UnionType)
/**
 * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
 * 
 * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
 **/
sealed trait PointSelectionConfigWithoutTypeOn 
   // Stream is defined elsewhere
   case class PointSelectionConfigWithoutTypeOnAsString(value: String) extends PointSelectionConfigWithoutTypeOn

////////////////////////////////////////////////////////////////////////

// MarkConfigPadAngle (UnionType)

sealed trait MarkConfigPadAngle 
   case class MarkConfigPadAngleAsNumber(value: JsNumber) extends MarkConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ParseValue (UnionType)

sealed trait ParseValue 
   case class ParseValueAsString(value: String) extends ParseValue
   case object ParseValueAsNull extends ParseValue
   // StringConst is defined elsewhere
   // Date is defined elsewhere
   // BooleanConst is defined elsewhere
   // Number is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigTension (UnionType)

sealed trait LineConfigTension 
   case class LineConfigTensionAsNumber(value: JsNumber) extends LineConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait BarConfigTheta 
   case class BarConfigThetaAsNumber(value: JsNumber) extends BarConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFont (UnionType)

sealed trait BarConfigFont 
   case class BarConfigFontAsString(value: String) extends BarConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Background (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelRepeatSpecAsObject2Background 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelFontStyle (UnionType)
/**
 * The font style of the header label.
 **/
sealed trait HeaderConfigLabelFontStyle 
   case class HeaderConfigLabelFontStyleAsString(value: String) extends HeaderConfigLabelFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelAlign (UnionType)

sealed trait LegendConfigLabelAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeWidth (UnionType)

sealed trait ViewBackgroundStrokeWidth 
   // ViewBackgroundStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefNumberTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefNumberTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RowColumnEncodingFieldDef (StructType)
/**
 * A field definition for the horizontal facet of trellis plots.
 **/
case class RowColumnEncodingFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Boolean flag indicating if facet's subviews should be centered relative to their respective rows or columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[Boolean] = None,
  /**
   * The alignment to apply to row/column facet's subplot. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[LayoutAlign] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[RowColumnEncodingFieldDefBandPosition] = None,
  /**
   * An object defining properties of a facet's header.
   **/
  var `header` : Option[Header] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[RowColumnEncodingFieldDefBin] = None,
  /**
   * The spacing in pixels between facet's sub-views.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[RowColumnEncodingFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` is not supported for `row` and `column`.
   **/
  var `sort` : Option[RowColumnEncodingFieldDefSort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object RowColumnEncodingFieldDef {
  val definedFields = Set("bin", "header", "timeUnit", "bandPosition", "aggregate", "title", "align", "type", "spacing", "field", "center", "sort") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait AreaConfigOpacity 
   case class AreaConfigOpacityAsNumber(value: JsNumber) extends AreaConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingDescriptionCondition 
   // ConditionalValueDefStringExprRef is defined elsewhere
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class SharedEncodingDescriptionConditionAsArrayOfConditionalValueDefStringExprRef(value: Seq[ConditionalValueDefStringExprRef]) extends SharedEncodingDescriptionCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   case class SharedEncodingDescriptionConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends SharedEncodingDescriptionCondition

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateStringFieldDef (StructType)

case class ConditionalPredicateStringFieldDef(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[ConditionalPredicateStringFieldDefFormat] = None,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalPredicateStringFieldDefBandPosition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalPredicateStringFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalPredicateStringFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends ConditionalStringFieldDef 
{  }
object ConditionalPredicateStringFieldDef {
  val definedFields = Set("bin", "type", "test", "timeUnit", "bandPosition", "format", "aggregate", "title", "formatType", "field") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait SharedEncodingRadiusStack 
   // StackOffset is defined elsewhere
   case object SharedEncodingRadiusStackAsNull extends SharedEncodingRadiusStack
   case class SharedEncodingRadiusStackAsBool(value: Boolean) extends SharedEncodingRadiusStack

////////////////////////////////////////////////////////////////////////

// LineTop (ConstantType)

case class LineTop() extends TextBaseline

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingDescriptionTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingHrefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude2 (StructType)

case class SharedEncodingLongitude2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingLongitude2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingLongitude2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingLongitude2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingLongitude2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingLongitude2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingX2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingX2Value 
   case class SharedEncodingX2ValueAsNumber(value: JsNumber) extends SharedEncodingX2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingRadiusType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontStyleAsObject1Condition (UnionType)

sealed trait ConditionalAxisLabelFontStyleAsObject1Condition 
   // ConditionalPredicateValueDefFontStyleNullExprRef is defined elsewhere
   case class ConditionalAxisLabelFontStyleAsObject1ConditionAsArrayOfConditionalPredicateValueDefFontStyleNullExprRef(value: Seq[ConditionalPredicateValueDefFontStyleNullExprRef]) extends ConditionalAxisLabelFontStyleAsObject1Condition

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefSmooth (UnionType)

sealed trait OverlayMarkDefSmooth 
   case class OverlayMarkDefSmoothAsBool(value: Boolean) extends OverlayMarkDefSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class BarConfigFillOpacityAsNumber(value: JsNumber) extends BarConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SecondaryFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SecondaryFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigClear (UnionType)
/**
 * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
 * 
 * __Default value:__ `dblclick`.
 * 
 * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
 **/
sealed trait PointSelectionConfigClear 
   // Stream is defined elsewhere
   case class PointSelectionConfigClearAsString(value: String) extends PointSelectionConfigClear
   case class PointSelectionConfigClearAsBool(value: Boolean) extends PointSelectionConfigClear

////////////////////////////////////////////////////////////////////////

// RectConfigLineHeight (UnionType)

sealed trait RectConfigLineHeight 
   case class RectConfigLineHeightAsNumber(value: JsNumber) extends RectConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleZero (UnionType)
/**
 * If `true`, ensures that a zero baseline value is included in the scale domain.
 * 
 * __Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.
 * 
 * __Note:__ Log, time, and utc scales do not support `zero`.
 **/
sealed trait ScaleZero 
   case class ScaleZeroAsBool(value: Boolean) extends ScaleZero
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait NonLayerRepeatSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeOffset (UnionType)

sealed trait LineConfigStrokeOffset 
   case class LineConfigStrokeOffsetAsNumber(value: JsNumber) extends LineConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigBlend (UnionType)

sealed trait MarkConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FoldTransform (StructType)

case class FoldTransform(
  /**
   * The output field names for the key and value properties produced by the fold transform. __Default value:__ `["key", "value"]`
   **/
  var `as` : Option[FoldTransformAs] = None,
  /**
   * An array of data fields indicating the properties to fold.
   **/
  var `fold` : Seq[String]
) extends Transform 
{  }
object FoldTransform {
  val definedFields = Set("as", "fold") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadiusBottomLeft (UnionType)

sealed trait BarConfigCornerRadiusBottomLeft 
   case class BarConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends BarConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigAriaRoleDescription (UnionType)

sealed trait AreaConfigAriaRoleDescription 
   case class AreaConfigAriaRoleDescriptionAsString(value: String) extends AreaConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait LayerSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAspect (UnionType)

sealed trait OverlayMarkDefAspect 
   case class OverlayMarkDefAspectAsBool(value: Boolean) extends OverlayMarkDefAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigCornerRadiusTopLeft (UnionType)

sealed trait AreaConfigCornerRadiusTopLeft 
   case class AreaConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends AreaConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EventType (EnumType)

sealed trait EventType extends WindowEventType { val payload: JsValue }
   case object EventTypeClick extends EventType { val payload = JsString("click") }
   case object EventTypeDblclick extends EventType { val payload = JsString("dblclick") }
   case object EventTypeDragenter extends EventType { val payload = JsString("dragenter") }
   case object EventTypeDragleave extends EventType { val payload = JsString("dragleave") }
   case object EventTypeDragover extends EventType { val payload = JsString("dragover") }
   case object EventTypeKeydown extends EventType { val payload = JsString("keydown") }
   case object EventTypeKeypress extends EventType { val payload = JsString("keypress") }
   case object EventTypeKeyup extends EventType { val payload = JsString("keyup") }
   case object EventTypeMousedown extends EventType { val payload = JsString("mousedown") }
   case object EventTypeMousemove extends EventType { val payload = JsString("mousemove") }
   case object EventTypeMouseout extends EventType { val payload = JsString("mouseout") }
   case object EventTypeMouseover extends EventType { val payload = JsString("mouseover") }
   case object EventTypeMouseup extends EventType { val payload = JsString("mouseup") }
   case object EventTypeMousewheel extends EventType { val payload = JsString("mousewheel") }
   case object EventTypeTimer extends EventType { val payload = JsString("timer") }
   case object EventTypeTouchend extends EventType { val payload = JsString("touchend") }
   case object EventTypeTouchmove extends EventType { val payload = JsString("touchmove") }
   case object EventTypeTouchstart extends EventType { val payload = JsString("touchstart") }
   case object EventTypeWheel extends EventType { val payload = JsString("wheel") }

////////////////////////////////////////////////////////////////////////

// ScaleDatumDefDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait ScaleDatumDefDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigTranslate (UnionType)
/**
 * The projection’s translation offset as a two-element array `[tx, ty]`.
 **/
sealed trait ProjectionConfigTranslate 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeMiterLimit (UnionType)

sealed trait MarkDefStrokeMiterLimit 
   case class MarkDefStrokeMiterLimitAsNumber(value: JsNumber) extends MarkDefStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingSizeType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait LineConfigTheta 
   case class LineConfigThetaAsNumber(value: JsNumber) extends LineConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefGradientStringNull (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionDatumDefGradientStringNull(
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionDatumDefGradientStringNullBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionDatumDefGradientStringNullCondition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ColorDef 
{  }
object FieldOrDatumDefWithConditionDatumDefGradientStringNull {
  val definedFields = Set("type", "datum", "bandPosition", "condition", "title") 
}

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigType (ConstantType)
/**
 * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
 * 
 * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
 * - `"interval"` -- to select a continuous range of data values on `drag`.
 **/
case class IntervalSelectionConfigType() 

////////////////////////////////////////////////////////////////////////

// BarConfigDir (UnionType)

sealed trait BarConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingStrokeBin 
   case class SharedEncodingStrokeBinAsBool(value: Boolean) extends SharedEncodingStrokeBin
   // BinParams is defined elsewhere
   case object SharedEncodingStrokeBinAsNull extends SharedEncodingStrokeBin

////////////////////////////////////////////////////////////////////////

// RectConfigLimit (UnionType)

sealed trait RectConfigLimit 
   case class RectConfigLimitAsNumber(value: JsNumber) extends RectConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeDash (UnionType)

sealed trait RectConfigStrokeDash 
   case class RectConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends RectConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleFrame (EnumType)

sealed trait TitleFrame extends TitleConfigFrame with TitleParamsFrame { val payload: JsValue }
   case object TitleFrameBounds extends TitleFrame { val payload = JsString("bounds") }
   case object TitleFrameGroup extends TitleFrame { val payload = JsString("group") }

////////////////////////////////////////////////////////////////////////

// RectConfigEndAngle (UnionType)

sealed trait RectConfigEndAngle 
   case class RectConfigEndAngleAsNumber(value: JsNumber) extends RectConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleFont (UnionType)

sealed trait TitleParamsSubtitleFont 
   case class TitleParamsSubtitleFontAsString(value: String) extends TitleParamsSubtitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleFontSize (ConstrainedType)
/**
 * Font size of the header title.
 **/
sealed trait HeaderConfigTitleFontSize 
   case class HeaderConfigTitleFontSizeAsNumber(value: JsNumber) extends HeaderConfigTitleFontSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigContinuousBandSize (ConstrainedType)
/**
 * The default size of the bars on continuous scales.
 * 
 * __Default value:__ `5`
 **/
case class RectConfigContinuousBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RectConfigHeight (UnionType)

sealed trait RectConfigHeight 
   case class RectConfigHeightAsNumber(value: JsNumber) extends RectConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait ConcatSpecGenericSpecSpacing 
   case class ConcatSpecGenericSpecSpacingAsNumber(value: JsNumber) extends ConcatSpecGenericSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeOffset (UnionType)

sealed trait RectConfigStrokeOffset 
   case class RectConfigStrokeOffsetAsNumber(value: JsNumber) extends RectConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCursor (UnionType)

sealed trait MarkDefCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigTilt (UnionType)

sealed trait ProjectionConfigTilt 
   case class ProjectionConfigTiltAsNumber(value: JsNumber) extends ProjectionConfigTilt
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleInterpolateEnum (EnumType)

sealed trait ScaleInterpolateEnum extends ScaleInterpolate { val payload: JsValue }
   case object ScaleInterpolateEnumRgb extends ScaleInterpolateEnum { val payload = JsString("rgb") }
   case object ScaleInterpolateEnumLab extends ScaleInterpolateEnum { val payload = JsString("lab") }
   case object ScaleInterpolateEnumHcl extends ScaleInterpolateEnum { val payload = JsString("hcl") }
   case object ScaleInterpolateEnumHsl extends ScaleInterpolateEnum { val payload = JsString("hsl") }
   case object ScaleInterpolateEnumHslLong extends ScaleInterpolateEnum { val payload = JsString("hsl-long") }
   case object ScaleInterpolateEnumHclLong extends ScaleInterpolateEnum { val payload = JsString("hcl-long") }
   case object ScaleInterpolateEnumCubehelix extends ScaleInterpolateEnum { val payload = JsString("cubehelix") }
   case object ScaleInterpolateEnumCubehelixLong extends ScaleInterpolateEnum { val payload = JsString("cubehelix-long") }

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class MarkDefStrokeWidthAsNumber(value: JsNumber) extends MarkDefStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefLimit (UnionType)

sealed trait MarkDefLimit 
   case class MarkDefLimitAsNumber(value: JsNumber) extends MarkDefLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LinearGradientGradient (ConstantType)
/**
 * The type of gradient. Use `"linear"` for a linear gradient.
 **/
case class LinearGradientGradient() 

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleX (UnionType)

sealed trait AxisConfigTitleX 
   case class AxisConfigTitleXAsNumber(value: JsNumber) extends AxisConfigTitleX
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefXOffset (UnionType)
/**
 * Offset for x-position.
 **/
sealed trait OverlayMarkDefXOffset 
   case class OverlayMarkDefXOffsetAsNumber(value: JsNumber) extends OverlayMarkDefXOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelSelectionParameterViewsElement (UnionType)

sealed trait TopLevelSelectionParameterViewsElement 
   case class TopLevelSelectionParameterViewsElementAsString(value: String) extends TopLevelSelectionParameterViewsElement
   case class TopLevelSelectionParameterViewsElementAsArrayOfString(value: Seq[String]) extends TopLevelSelectionParameterViewsElement

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleY (UnionType)

sealed trait AxisConfigTitleY 
   case class AxisConfigTitleYAsNumber(value: JsNumber) extends AxisConfigTitleY
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape (UnionType)

sealed trait ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape extends ConditionalMarkPropFieldOrDatumDefTypeForShape
   // ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1 is defined elsewhere
   // ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelLayerSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait TickConfigTheta 
   case class TickConfigThetaAsNumber(value: JsNumber) extends TickConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FacetEncodingFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ErrorBandConfigTension (ConstrainedType)
/**
 * The tension parameter for the interpolation type of the error band.
 **/
case class ErrorBandConfigTension(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionExtent (UnionType)

sealed trait ProjectionExtent 
   // Vector2Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait AreaConfigTooltip 
   case class AreaConfigTooltipAsString(value: String) extends AreaConfigTooltip
   case object AreaConfigTooltipAsNull extends AreaConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class AreaConfigTooltipAsBool(value: Boolean) extends AreaConfigTooltip
   case class AreaConfigTooltipAsNumber(value: JsNumber) extends AreaConfigTooltip

////////////////////////////////////////////////////////////////////////

// RadialGradientGradient (ConstantType)
/**
 * The type of gradient. Use `"radial"` for a radial gradient.
 **/
case class RadialGradientGradient() 

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigOutliers (UnionType)

sealed trait BoxPlotConfigOutliers 
   case class BoxPlotConfigOutliersAsBool(value: Boolean) extends BoxPlotConfigOutliers
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParams (StructType)

case class TitleParams(
  /**
   * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
   * 
   * __Default value:__ `"middle"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. `"start"` for other composite views.
   * 
   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, `anchor` is always `"start"`.
   **/
  var `anchor` : Option[TitleAnchor] = None,
  /**
   * The subtitle Text.
   **/
  var `subtitle` : Option[Text] = None,
  var `subtitleFontSize` : Option[TitleParamsSubtitleFontSize] = None,
  var `dy` : Option[TitleParamsDy] = None,
  /**
   * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.
   * 
   * __Default value:__ `"group-title"`.
   **/
  var `style` : Option[TitleParamsStyle] = None,
  var `angle` : Option[TitleParamsAngle] = None,
  /**
   * Horizontal text alignment for title text. One of `"left"`, `"center"`, or `"right"`.
   **/
  var `align` : Option[Align] = None,
  var `fontStyle` : Option[TitleParamsFontStyle] = None,
  /**
   * The title text.
   **/
  var `text` : TitleParamsText,
  var `frame` : Option[TitleParamsFrame] = None,
  var `font` : Option[TitleParamsFont] = None,
  var `offset` : Option[TitleParamsOffset] = None,
  var `subtitleColor` : Option[TitleParamsSubtitleColor] = None,
  var `aria` : Option[TitleParamsAria] = None,
  var `dx` : Option[TitleParamsDx] = None,
  var `subtitleFont` : Option[TitleParamsSubtitleFont] = None,
  var `subtitleLineHeight` : Option[TitleParamsSubtitleLineHeight] = None,
  /**
   * Vertical text baseline for title and subtitle text. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the *lineHeight* rather than *fontSize* alone.
   **/
  var `baseline` : Option[TextBaseline] = None,
  var `subtitleFontStyle` : Option[TitleParamsSubtitleFontStyle] = None,
  var `subtitleFontWeight` : Option[TitleParamsSubtitleFontWeight] = None,
  var `color` : Option[TitleParamsColor] = None,
  var `subtitlePadding` : Option[TitleParamsSubtitlePadding] = None,
  /**
   * The integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.
   * 
   * __Default value:__ `0`.
   **/
  var `zindex` : Option[TitleParamsZindex] = None,
  var `lineHeight` : Option[TitleParamsLineHeight] = None,
  var `orient` : Option[TitleParamsOrient] = None,
  var `fontSize` : Option[TitleParamsFontSize] = None,
  var `limit` : Option[TitleParamsLimit] = None,
  var `fontWeight` : Option[TitleParamsFontWeight] = None
) extends UnitSpecWithFrameTitle with TopLevelLayerSpecTitle with LayerSpecTitle with TopLevelFacetSpecTitle with LayerRepeatSpecTitle with TopLevelUnitSpecTitle with TopLevelRepeatSpecAsObject1Title with VConcatSpecGenericSpecTitle with UnitSpecTitle with HConcatSpecGenericSpecTitle with FacetSpecTitle with TopLevelHConcatSpecTitle with TopLevelRepeatSpecAsObject2Title with ConcatSpecGenericSpecTitle with TopLevelConcatSpecTitle with NonLayerRepeatSpecTitle with TopLevelVConcatSpecTitle with FacetedUnitSpecTitle 
{  }
object TitleParams {
  val definedFields = Set("fontSize", "font", "subtitleLineHeight", "color", "anchor", "subtitlePadding", "frame", "dy", "dx", "style", "lineHeight", "subtitleFontSize", "offset", "subtitle", "subtitleFontStyle", "text", "fontStyle", "limit", "aria", "fontWeight", "zindex", "orient", "subtitleFontWeight", "baseline", "subtitleColor", "align", "subtitleFont", "angle") 
}

////////////////////////////////////////////////////////////////////////

// RowColNumber (StructType)

case class RowColNumber(
  var `column` : Option[JsNumber] = None,
  var `row` : Option[JsNumber] = None
) extends ConcatSpecGenericSpecSpacing with NonLayerRepeatSpecSpacing with FacetSpecSpacing with TopLevelUnitSpecSpacing with TopLevelRepeatSpecAsObject1Spacing with FacetEncodingFieldDefSpacing with LayerRepeatSpecSpacing with FacetedUnitSpecSpacing with TopLevelFacetSpecSpacing with TopLevelRepeatSpecAsObject2Spacing with TopLevelConcatSpecSpacing 
{  }
object RowColNumber {
  val definedFields = Set("column", "row") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacity (StructType)

case class SharedEncodingOpacity(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingOpacityDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingOpacityBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingOpacityCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingOpacityBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingOpacityValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingOpacityTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingOpacityType] = None
)  
{  }
object SharedEncodingOpacity {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigWithoutTypeOn (UnionType)
/**
 * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
 * 
 * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
 **/
sealed trait IntervalSelectionConfigWithoutTypeOn 
   // Stream is defined elsewhere
   case class IntervalSelectionConfigWithoutTypeOnAsString(value: String) extends IntervalSelectionConfigWithoutTypeOn

////////////////////////////////////////////////////////////////////////

// Binned (ConstantType)

case class Binned() extends FieldDefWithoutScaleBin with PositionFieldDefBaseBin with ConditionalParameterStringFieldDefBin with SharedEncodingThetaBin with FieldOrDatumDefWithConditionStringFieldDefTextBin with SharedEncodingRadiusBin with SharedEncodingUrlBin with OrderFieldDefBin with SharedEncodingTextBin with StringFieldDefWithConditionBin with ConditionalPredicateStringFieldDefBin with SharedEncodingDescriptionBin with SharedEncodingKeyBin with StringFieldDefBin with SharedEncodingXBin with SharedEncodingYBin with PositionFieldDefBin with SharedEncodingHrefBin

////////////////////////////////////////////////////////////////////////

// TypeForShape (EnumType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait TypeForShape extends SharedEncodingShapeType { val payload: JsValue }
   case object TypeForShapeNominal extends TypeForShape { val payload = JsString("nominal") }
   case object TypeForShapeOrdinal extends TypeForShape { val payload = JsString("ordinal") }
   case object TypeForShapeGeojson extends TypeForShape { val payload = JsString("geojson") }

////////////////////////////////////////////////////////////////////////

// SortOrder (EnumType)

sealed trait SortOrder extends AllSortString with FacetFieldDefSort with FacetEncodingFieldDefSort with RowColumnEncodingFieldDefSort { val payload: JsValue }
   case object SortOrderAscending extends SortOrder { val payload = JsString("ascending") }
   case object SortOrderDescending extends SortOrder { val payload = JsString("descending") }

////////////////////////////////////////////////////////////////////////

// ProjectionParallels (UnionType)

sealed trait ProjectionParallels 
   case class ProjectionParallelsAsArrayOfNumber(value: Seq[JsNumber]) extends ProjectionParallels
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderLabelColor (UnionType)
/**
 * The color of the header label, can be in hex color code or regular color name.
 **/
sealed trait HeaderLabelColor 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfig (StructType)
/**
 * Arc-specific Config
 **/
case class RectConfig(
  /**
   * The default size of the bars on continuous scales.
   * 
   * __Default value:__ `5`
   **/
  var `continuousBandSize` : Option[RectConfigContinuousBandSize] = None,
  var `cornerRadiusBottomRight` : Option[RectConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[RectConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[RectConfigStrokeMiterLimit] = None,
  var `dir` : Option[RectConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[RectConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[RectConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[RectConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[RectConfigX] = None,
  var `dy` : Option[RectConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[RectConfigSize] = None,
  var `smooth` : Option[RectConfigSmooth] = None,
  var `url` : Option[RectConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[RectConfigY] = None,
  var `strokeOpacity` : Option[RectConfigStrokeOpacity] = None,
  var `ellipsis` : Option[RectConfigEllipsis] = None,
  var `description` : Option[RectConfigDescription] = None,
  var `angle` : Option[RectConfigAngle] = None,
  var `lineBreak` : Option[RectConfigLineBreak] = None,
  var `tension` : Option[RectConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[RectConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[RectConfigStroke] = None,
  var `strokeDashOffset` : Option[RectConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[RectConfigAlign] = None,
  var `ariaRole` : Option[RectConfigAriaRole] = None,
  var `strokeCap` : Option[RectConfigStrokeCap] = None,
  var `endAngle` : Option[RectConfigEndAngle] = None,
  var `strokeJoin` : Option[RectConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[RectConfigBaseline] = None,
  var `ariaRoleDescription` : Option[RectConfigAriaRoleDescription] = None,
  var `aspect` : Option[RectConfigAspect] = None,
  var `height` : Option[RectConfigHeight] = None,
  var `fontStyle` : Option[RectConfigFontStyle] = None,
  var `text` : Option[RectConfigText] = None,
  /**
   * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
   * 
   * __Default value:__ `1`
   **/
  var `binSpacing` : Option[RectConfigBinSpacing] = None,
  var `cornerRadius` : Option[RectConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[RectConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[RectConfigX2] = None,
  var `padAngle` : Option[RectConfigPadAngle] = None,
  var `cursor` : Option[RectConfigCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[RectConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[RectConfigStartAngle] = None,
  var `font` : Option[RectConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[RectConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[RectConfigInvalid] = None,
  var `lineHeight` : Option[RectConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[RectConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[RectConfigFill] = None,
  var `interpolate` : Option[RectConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[RectConfigTheta] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[RectConfigInnerRadius] = None,
  var `fontSize` : Option[RectConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[RectConfigY2] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
   **/
  var `discreteBandSize` : Option[RectConfigDiscreteBandSize] = None,
  var `shape` : Option[RectConfigShape] = None,
  var `aria` : Option[RectConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[RectConfigOpacity] = None,
  var `dx` : Option[RectConfigDx] = None,
  var `cornerRadiusBottomLeft` : Option[RectConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[RectConfigHref] = None,
  var `strokeDash` : Option[RectConfigStrokeDash] = None,
  var `strokeOffset` : Option[RectConfigStrokeOffset] = None,
  var `limit` : Option[RectConfigLimit] = None,
  var `width` : Option[RectConfigWidth] = None,
  var `fontWeight` : Option[RectConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[RectConfigBlend] = None,
  var `strokeWidth` : Option[RectConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[RectConfigTheta2] = None
) extends AnyMarkConfig 
{  }
object RectConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "ariaRole", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "dx", "cornerRadiusBottomRight", "width", "cursor", "blend", "height", "theta2", "continuousBandSize", "orient", "baseline", "align", "stroke", "discreteBandSize", "shape", "lineHeight", "interpolate", "binSpacing", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ImputeParams (StructType)

case class ImputeParams(
  /**
   * A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.
   * 
   * __Default value:__:  `[null, null]` indicating that the window includes all objects.
   **/
  var `frame` : Option[ImputeParamsFrame] = None,
  /**
   * Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
   * 
   * If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.
   * 
   * If there is no impute grouping, this property _must_ be specified.
   **/
  var `keyvals` : Option[ImputeParamsKeyvals] = None,
  /**
   * The imputation method to use for the field value of imputed data objects. One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
   * 
   * __Default value:__  `"value"`
   **/
  var `method` : Option[ImputeMethod] = None,
  /**
   * The field value to use when the imputation `method` is `"value"`.
   **/
  var `value` : Option[JsValue] = None
)  
{  }
object ImputeParams {
  val definedFields = Set("frame", "keyvals", "method", "value") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelLayerSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigDx (UnionType)

sealed trait BarConfigDx 
   case class BarConfigDxAsNumber(value: JsNumber) extends BarConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigDy (UnionType)

sealed trait BarConfigDy 
   case class BarConfigDyAsNumber(value: JsNumber) extends BarConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpec (StructType)
/**
 * Base interface for a repeat specification.
 **/
case class NonLayerRepeatSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[NonLayerRepeatSpecCenter] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[NonLayerRepeatSpecBounds] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets repeated.
   **/
  var `spec` : NonNormalizedSpec,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[NonLayerRepeatSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
   **/
  var `repeat` : NonLayerRepeatSpecRepeat,
  /**
   * Title for the plot.
   **/
  var `title` : Option[NonLayerRepeatSpecTitle] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[NonLayerRepeatSpecSpacing] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends RepeatSpec 
{  }
object NonLayerRepeatSpec {
  val definedFields = Set("spacing", "spec", "transform", "name", "align", "data", "repeat", "description", "title", "resolve", "bounds", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// TickConfigThickness (ConstrainedType)
/**
 * Thickness of the tick mark.
 * 
 * __Default value:__  `1`
 **/
case class TickConfigThickness(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait FacetEncodingFieldDefAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingRadiusBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RectConfigSmooth (UnionType)

sealed trait RectConfigSmooth 
   case class RectConfigSmoothAsBool(value: Boolean) extends RectConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionSpacing (UnionType)

sealed trait ProjectionSpacing 
   case class ProjectionSpacingAsNumber(value: JsNumber) extends ProjectionSpacing
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait MarkDefTheta2 
   case class MarkDefTheta2AsNumber(value: JsNumber) extends MarkDefTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait MarkDefFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object MarkDefFillAsNull extends MarkDefFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait LineConfigRadius2 
   case class LineConfigRadius2AsNumber(value: JsNumber) extends LineConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStartAngle (UnionType)

sealed trait LineConfigStartAngle 
   case class LineConfigStartAngleAsNumber(value: JsNumber) extends LineConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TextDirection (EnumType)
/**
 * The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.
 * 
 * __Default value:__ `"ltr"`
 **/
sealed trait TextDirection extends RectConfigDir with AreaConfigDir with TickConfigDir with LineConfigDir with MarkDefDir with OverlayMarkDefDir with MarkConfigDir with BarConfigDir { val payload: JsValue }
   case object TextDirectionLtr extends TextDirection { val payload = JsString("ltr") }
   case object TextDirectionRtl extends TextDirection { val payload = JsString("rtl") }

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelLayerSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeConfigHeatmap (UnionType)
/**
 * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative heatmaps.
 **/
sealed trait RangeConfigHeatmap 
   // RangeScheme is defined elsewhere
   case class RangeConfigHeatmapAsArrayOfColor(value: Seq[Color]) extends RangeConfigHeatmap

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDef (UnionType)

sealed trait ConditionalPredicateMarkPropFieldOrDatumDef extends ConditionalMarkPropFieldOrDatumDef
   // ConditionalPredicateMarkPropFieldOrDatumDefAsObject1 is defined elsewhere
   // ConditionalPredicateMarkPropFieldOrDatumDefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterStringFieldDefFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait ConditionalParameterStringFieldDefFormat 
   case class ConditionalParameterStringFieldDefFormatAsString(value: String) extends ConditionalParameterStringFieldDefFormat
   case class ConditionalParameterStringFieldDefFormatAsDictOfAny(value: Map[String,JsValue]) extends ConditionalParameterStringFieldDefFormat

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelOpacity (UnionType)

sealed trait AxisConfigLabelOpacity 
   case class AxisConfigLabelOpacityAsNumber(value: JsNumber) extends AxisConfigLabelOpacity
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefDy (UnionType)

sealed trait OverlayMarkDefDy 
   case class OverlayMarkDefDyAsNumber(value: JsNumber) extends OverlayMarkDefDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingLongitude2Value 
   case class SharedEncodingLongitude2ValueAsNumber(value: JsNumber) extends SharedEncodingLongitude2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefDx (UnionType)

sealed trait OverlayMarkDefDx 
   case class OverlayMarkDefDxAsNumber(value: JsNumber) extends OverlayMarkDefDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TimeUnitParams (StructType)

case class TimeUnitParams(
  /**
   * If no `unit` is specified, maxbins is used to infer time units.
   **/
  var `maxbins` : Option[JsNumber] = None,
  /**
   * The number of steps between bins, in terms of the least significant unit provided.
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * Defines how date-time values should be binned.
   **/
  var `unit` : Option[TimeUnit] = None,
  /**
   * True to use UTC timezone. Equivalent to using a `utc` prefixed `TimeUnit`.
   **/
  var `utc` : Option[Boolean] = None
) extends ConditionalParameterMarkPropFieldOrDatumDefAsObject1TimeUnit with SharedEncodingYError2TimeUnit with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit with SharedEncodingThetaTimeUnit with SharedEncodingLongitude2TimeUnit with TimeUnitTransformTimeUnit with OrderFieldDefTimeUnit with ConditionalPredicateStringFieldDefTimeUnit with SharedEncodingXError2TimeUnit with SharedEncodingRadius2TimeUnit with SharedEncodingFillOpacityTimeUnit with FieldOrDatumDefWithConditionStringFieldDefTextTimeUnit with SharedEncodingRadiusTimeUnit with SharedEncodingYErrorTimeUnit with SharedEncodingLatitude2TimeUnit with SharedEncodingTheta2TimeUnit with StringFieldDefTimeUnit with FieldValidPredicateTimeUnit with SharedEncodingOpacityTimeUnit with SharedEncodingYTimeUnit with SharedEncodingSizeTimeUnit with SharedEncodingLatitudeTimeUnit with FieldDefWithoutScaleTimeUnit with SharedEncodingLongitudeTimeUnit with SharedEncodingFillTimeUnit with FieldEqualPredicateTimeUnit with StringFieldDefWithConditionTimeUnit with SharedEncodingStrokeOpacityTimeUnit with LatLongFieldDefTimeUnit with FieldGTPredicateTimeUnit with SharedEncodingStrokeTimeUnit with SharedEncodingYOffsetTimeUnit with SharedEncodingAngleTimeUnit with FacetFieldDefTimeUnit with ConditionalPredicateMarkPropFieldOrDatumDefAsObject1TimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullTimeUnit with SharedEncodingStrokeDashTimeUnit with SharedEncodingKeyTimeUnit with SharedEncodingUrlTimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullTimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefNumberTimeUnit with SharedEncodingStrokeWidthTimeUnit with SharedEncodingY2TimeUnit with SharedEncodingXErrorTimeUnit with ScaleFieldDefTimeUnit with FieldGTEPredicateTimeUnit with PositionFieldDefBaseTimeUnit with FieldLTEPredicateTimeUnit with FieldLTPredicateTimeUnit with FacetEncodingFieldDefTimeUnit with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit with SharedEncodingDescriptionTimeUnit with SharedEncodingHrefTimeUnit with SharedEncodingShapeTimeUnit with SharedEncodingXOffsetTimeUnit with SharedEncodingTextTimeUnit with SharedEncodingX2TimeUnit with RowColumnEncodingFieldDefTimeUnit with PositionFieldDefTimeUnit with FieldOneOfPredicateTimeUnit with SecondaryFieldDefTimeUnit with ConditionalParameterStringFieldDefTimeUnit with SharedEncodingXTimeUnit with SharedEncodingColorTimeUnit with FieldRangePredicateTimeUnit 
{  }
object TimeUnitParams {
  val definedFields = Set("maxbins", "step", "unit", "utc") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait RectConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigRowPadding (UnionType)

sealed trait LegendConfigRowPadding 
   case class LegendConfigRowPaddingAsNumber(value: JsNumber) extends LegendConfigRowPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFontSize (UnionType)

sealed trait OverlayMarkDefFontSize 
   // OverlayMarkDefFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYErrorTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingYErrorTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDefBaseBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class PositionDatumDefBaseBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConfigBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait ConfigBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelAlignAsObject1Condition (UnionType)

sealed trait ConditionalAxisLabelAlignAsObject1Condition 
   // ConditionalPredicateValueDefAlignNullExprRef is defined elsewhere
   case class ConditionalAxisLabelAlignAsObject1ConditionAsArrayOfConditionalPredicateValueDefAlignNullExprRef(value: Seq[ConditionalPredicateValueDefAlignNullExprRef]) extends ConditionalAxisLabelAlignAsObject1Condition

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadius (UnionType)

sealed trait BarConfigCornerRadius 
   case class BarConfigCornerRadiusAsNumber(value: JsNumber) extends BarConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelOpacity (UnionType)

sealed trait AxisLabelOpacity 
   case class AxisLabelOpacityAsNumber(value: JsNumber) extends AxisLabelOpacity
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionRatio (UnionType)

sealed trait ProjectionRatio 
   case class ProjectionRatioAsNumber(value: JsNumber) extends ProjectionRatio
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientLength (UnionType)

sealed trait LegendConfigGradientLength 
   // LegendConfigGradientLengthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleFont (UnionType)

sealed trait TitleConfigSubtitleFont 
   case class TitleConfigSubtitleFontAsString(value: String) extends TitleConfigSubtitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisBandPosition (UnionType)

sealed trait AxisBandPosition 
   case class AxisBandPositionAsNumber(value: JsNumber) extends AxisBandPosition
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingShapeDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Generator (UnionType)

sealed trait Generator extends Data
   // SequenceGenerator is defined elsewhere
   // SphereGenerator is defined elsewhere
   // GraticuleGenerator is defined elsewhere

////////////////////////////////////////////////////////////////////////

// VConcatSpecGenericSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait VConcatSpecGenericSpecBounds  { val payload: JsValue }
   case object VConcatSpecGenericSpecBoundsFull extends VConcatSpecGenericSpecBounds { val payload = JsString("full") }
   case object VConcatSpecGenericSpecBoundsFlush extends VConcatSpecGenericSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBaseBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait PositionFieldDefBaseBin 
   case class PositionFieldDefBaseBinAsBool(value: Boolean) extends PositionFieldDefBaseBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object PositionFieldDefBaseBinAsNull extends PositionFieldDefBaseBin

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffsetBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingXOffsetBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionConfigPointRadius (UnionType)

sealed trait ProjectionConfigPointRadius 
   case class ProjectionConfigPointRadiusAsNumber(value: JsNumber) extends ProjectionConfigPointRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleColor (UnionType)
/**
 * Text color for subtitle text.
 **/
sealed trait TitleConfigSubtitleColor 
   case object TitleConfigSubtitleColorAsNull extends TitleConfigSubtitleColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldGTPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldGTPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYError2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingYError2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleParamsAngle (UnionType)

sealed trait TitleParamsAngle 
   case class TitleParamsAngleAsNumber(value: JsNumber) extends TitleParamsAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingYError2 (StructType)

case class SharedEncodingYError2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingYError2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingYError2TimeUnit] = None
)  
{  }
object SharedEncodingYError2 {
  val definedFields = Set("bin", "timeUnit", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingTooltip (UnionType)
/**
 * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
 **/
sealed trait SharedEncodingTooltip 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere
   case class SharedEncodingTooltipAsArrayOfStringFieldDef(value: Seq[StringFieldDef]) extends SharedEncodingTooltip
   case object SharedEncodingTooltipAsNull extends SharedEncodingTooltip

////////////////////////////////////////////////////////////////////////

// ProjectionCoefficient (UnionType)

sealed trait ProjectionCoefficient 
   case class ProjectionCoefficientAsNumber(value: JsNumber) extends ProjectionCoefficient
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionPointRadius (UnionType)

sealed trait ProjectionPointRadius 
   case class ProjectionPointRadiusAsNumber(value: JsNumber) extends ProjectionPointRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAriaRoleDescription (UnionType)

sealed trait OverlayMarkDefAriaRoleDescription 
   case class OverlayMarkDefAriaRoleDescriptionAsString(value: String) extends OverlayMarkDefAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefText (UnionType)

sealed trait MarkDefText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainColor (UnionType)
/**
 * Color of axis domain line.
 * 
 * __Default value:__ `"gray"`.
 **/
sealed trait AxisConfigDomainColor 
   case object AxisConfigDomainColorAsNull extends AxisConfigDomainColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ArgmaxDef (StructType)

case class ArgmaxDef(
  var `argmax` : String
) extends Aggregate 
{  }
object ArgmaxDef {
  val definedFields = Set("argmax") 
}

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefNumber (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionDatumDefNumber(
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[FieldOrDatumDefWithConditionDatumDefNumberDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionDatumDefNumberBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionDatumDefNumberCondition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends NumericArrayMarkPropDef with NumericMarkPropDef 
{  }
object FieldOrDatumDefWithConditionDatumDefNumber {
  val definedFields = Set("type", "datum", "bandPosition", "condition", "title") 
}

////////////////////////////////////////////////////////////////////////

// BooleanConst (ConstantType)

case class BooleanConst() extends ParseValue

////////////////////////////////////////////////////////////////////////

// Gradient (UnionType)

sealed trait Gradient extends ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue with RectConfigColor with BarConfigStroke with OverlayMarkDefColor with MarkDefStroke with TickConfigColor with MarkDefFill with MarkDefColor with ConditionalParameterValueDefGradientStringNullExprRefValue with LineConfigFill with ErrorBarDefColor with BarConfigColor with MarkConfigFill with MarkConfigStroke with MarkConfigColor with RectConfigStroke with TickConfigStroke with RectConfigFill with TickConfigFill with OverlayMarkDefStroke with LineConfigColor with AreaConfigFill with SharedEncodingColorValue with AreaConfigStroke with ConditionalPredicateValueDefGradientStringNullExprRefValue with LineConfigStroke with BarConfigFill with BoxPlotDefColor with SharedEncodingFillValue with ErrorBandDefColor with AreaConfigColor with SharedEncodingStrokeValue with OverlayMarkDefFill
   // LinearGradient is defined elsewhere
   // RadialGradient is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCornerRadiusBottomLeft (UnionType)

sealed trait MarkConfigCornerRadiusBottomLeft 
   case class MarkConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends MarkConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFont (UnionType)

sealed trait TickConfigFont 
   case class TickConfigFontAsString(value: String) extends TickConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigRotate (UnionType)
/**
 * The projection's three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)
 * 
 * __Default value:__ `[0, 0, 0]`
 **/
sealed trait ProjectionConfigRotate 
   // Vector2Number is defined elsewhere
   // Vector3Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleInterpolate (UnionType)
/**
 * The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).
 * 
 * * __Default value:__ `hcl`
 **/
sealed trait ScaleInterpolate 
   // ScaleInterpolateEnum is defined elsewhere
   // ExprRef is defined elsewhere
   // ScaleInterpolateParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleColor (UnionType)
/**
 * Color of the title, can be in hex color code or regular color name.
 **/
sealed trait AxisTitleColor 
   case object AxisTitleColorAsNull extends AxisTitleColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringValueDefWithConditionValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait StringValueDefWithConditionValue 
   case class StringValueDefWithConditionValueAsString(value: String) extends StringValueDefWithConditionValue
   case object StringValueDefWithConditionValueAsNull extends StringValueDefWithConditionValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait RectConfigInvalid  { val payload: JsValue }
   case object RectConfigInvalidFilter extends RectConfigInvalid { val payload = JsString("filter") }
   case object RectConfigInvalidUndefined extends RectConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBaseBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class PositionFieldDefBaseBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefLineBreak (UnionType)

sealed trait MarkDefLineBreak 
   case class MarkDefLineBreakAsString(value: String) extends MarkDefLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait TickConfigX 
   case class TickConfigXAsNumber(value: JsNumber) extends TickConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Title (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelRepeatSpecAsObject2Title 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait TickConfigY 
   case class TickConfigYAsNumber(value: JsNumber) extends TickConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigCornerRadiusTopRight (UnionType)

sealed trait AreaConfigCornerRadiusTopRight 
   case class AreaConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends AreaConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RowColumnEncodingFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class RowColumnEncodingFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelVConcatSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefSort (UnionType)
/**
 * Sort order for the encoded field.
 * 
 * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
 * 
 * For discrete fields, `sort` can be one of the following:
 * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
 * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
 * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
 * - `null` indicating no sort.
 * 
 * __Default value:__ `"ascending"`
 * 
 * __Note:__ `null` is not supported for `row` and `column`.
 **/
sealed trait FacetEncodingFieldDefSort 
   // SortArray is defined elsewhere
   // SortOrder is defined elsewhere
   // EncodingSortField is defined elsewhere
   case object FacetEncodingFieldDefSortAsNull extends FacetEncodingFieldDefSort

////////////////////////////////////////////////////////////////////////

// TimeLocale (StructType)
/**
 * Locale definition for formatting dates and times.
 **/
case class TimeLocale(
  /**
   * The abbreviated names of the months (starting with January).
   **/
  var `shortMonths` : Vector12String,
  /**
   * The A.M. and P.M. equivalents (e.g., ["AM", "PM"]).
   **/
  var `periods` : Vector2String,
  /**
   * The date and time (%c) format specifier (e.g., "%a %b %e %X %Y").
   **/
  var `dateTime` : String,
  /**
   * The date (%x) format specifier (e.g., "%m/%d/%Y").
   **/
  var `date` : String,
  /**
   * The time (%X) format specifier (e.g., "%H:%M:%S").
   **/
  var `time` : String,
  /**
   * The abbreviated names of the weekdays, starting with Sunday.
   **/
  var `shortDays` : Vector7String,
  /**
   * The full names of the months (starting with January).
   **/
  var `months` : Vector12String,
  /**
   * The full names of the weekdays, starting with Sunday.
   **/
  var `days` : Vector7String
)  
{  }
object TimeLocale {
  val definedFields = Set("periods", "months", "shortDays", "days", "dateTime", "shortMonths", "date", "time") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigContinuousBandSize (ConstrainedType)
/**
 * The default size of the bars on continuous scales.
 * 
 * __Default value:__ `5`
 **/
case class BarConfigContinuousBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the axis labels.
 * 
 * __Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.
 **/
case class AxisConfigLabelAngleAsNumber(value: JsNumber) extends AxisConfigLabelAngle
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefEndAngle (UnionType)

sealed trait OverlayMarkDefEndAngle 
   case class OverlayMarkDefEndAngleAsNumber(value: JsNumber) extends OverlayMarkDefEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeTransformFrame (ConstrainedType)
/**
 * A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.
 * 
 * __Default value:__:  `[null, null]` indicating that the window includes all objects.
 **/
case class ImputeTransformFrame(value: Seq[ImputeTransformFrameElement]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNull (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNull(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[TypeForShape] = None
) extends ShapeDef 
{  }
object FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNull {
  val definedFields = Set("bin", "type", "bandPosition", "legend", "condition", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolStrokeColor (UnionType)
/**
 * Stroke color for legend symbols.
 **/
sealed trait LegendConfigSymbolStrokeColor 
   case object LegendConfigSymbolStrokeColorAsNull extends LegendConfigSymbolStrokeColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientStrokeWidth (UnionType)

sealed trait LegendConfigGradientStrokeWidth 
   // LegendConfigGradientStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickOpacity (UnionType)

sealed trait AxisTickOpacity 
   case class AxisTickOpacityAsNumber(value: JsNumber) extends AxisTickOpacity
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Container (ConstantType)

case class Container() extends TopLevelUnitSpecWidth with UnitSpecWithFrameHeight with TopLevelLayerSpecHeight with FacetedUnitSpecHeight with UnitSpecWithFrameWidth with LayerSpecHeight with FacetedUnitSpecWidth with TopLevelLayerSpecWidth with LayerSpecWidth with TopLevelUnitSpecHeight

////////////////////////////////////////////////////////////////////////

// BarConfigHeight (UnionType)

sealed trait BarConfigHeight 
   case class BarConfigHeightAsNumber(value: JsNumber) extends BarConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefWidth (UnionType)

sealed trait OverlayMarkDefWidth 
   case class OverlayMarkDefWidthAsNumber(value: JsNumber) extends OverlayMarkDefWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DatumDef (StructType)

case class DatumDef(
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[DatumDefBandPosition] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[DatumDefDatum] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends Position2Def with LatLongDef 
{  }
object DatumDef {
  val definedFields = Set("bandPosition", "datum", "title", "type") 
}

////////////////////////////////////////////////////////////////////////

// ParameterExtent (UnionType)

sealed trait ParameterExtent extends ScaleDomain with BinExtent
   // ParameterExtentAsObject1 is defined elsewhere
   // ParameterExtentAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfig (StructType)
/**
 * Area-Specific Config
 **/
case class AreaConfig(
  /**
   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
   * 
   * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
   * 
   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
   * 
   * - If this property is `false`, no points would be automatically added to line or area marks.
   * 
   * __Default value:__ `false`.
   **/
  var `point` : Option[AreaConfigPoint] = None,
  var `cornerRadiusBottomRight` : Option[AreaConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[AreaConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[AreaConfigStrokeMiterLimit] = None,
  var `dir` : Option[AreaConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[AreaConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[AreaConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[AreaConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[AreaConfigX] = None,
  var `dy` : Option[AreaConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[AreaConfigSize] = None,
  var `smooth` : Option[AreaConfigSmooth] = None,
  var `url` : Option[AreaConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[AreaConfigY] = None,
  /**
   * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.
   * 
   * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.
   * 
   * - If this value is `false`, no lines would be automatically added to area marks.
   * 
   * __Default value:__ `false`.
   **/
  var `line` : Option[AreaConfigLine] = None,
  var `strokeOpacity` : Option[AreaConfigStrokeOpacity] = None,
  var `ellipsis` : Option[AreaConfigEllipsis] = None,
  var `description` : Option[AreaConfigDescription] = None,
  var `angle` : Option[AreaConfigAngle] = None,
  var `lineBreak` : Option[AreaConfigLineBreak] = None,
  var `tension` : Option[AreaConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[AreaConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[AreaConfigStroke] = None,
  var `strokeDashOffset` : Option[AreaConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[AreaConfigAlign] = None,
  var `ariaRole` : Option[AreaConfigAriaRole] = None,
  var `strokeCap` : Option[AreaConfigStrokeCap] = None,
  var `endAngle` : Option[AreaConfigEndAngle] = None,
  var `strokeJoin` : Option[AreaConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[AreaConfigBaseline] = None,
  var `ariaRoleDescription` : Option[AreaConfigAriaRoleDescription] = None,
  var `aspect` : Option[AreaConfigAspect] = None,
  var `height` : Option[AreaConfigHeight] = None,
  var `fontStyle` : Option[AreaConfigFontStyle] = None,
  var `text` : Option[AreaConfigText] = None,
  var `cornerRadius` : Option[AreaConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[AreaConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[AreaConfigX2] = None,
  var `padAngle` : Option[AreaConfigPadAngle] = None,
  var `cursor` : Option[AreaConfigCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[AreaConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[AreaConfigStartAngle] = None,
  var `font` : Option[AreaConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[AreaConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[AreaConfigInvalid] = None,
  var `lineHeight` : Option[AreaConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[AreaConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[AreaConfigFill] = None,
  var `interpolate` : Option[AreaConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[AreaConfigTheta] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[AreaConfigInnerRadius] = None,
  var `fontSize` : Option[AreaConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[AreaConfigY2] = None,
  var `shape` : Option[AreaConfigShape] = None,
  var `aria` : Option[AreaConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[AreaConfigOpacity] = None,
  var `dx` : Option[AreaConfigDx] = None,
  var `cornerRadiusBottomLeft` : Option[AreaConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[AreaConfigHref] = None,
  var `strokeDash` : Option[AreaConfigStrokeDash] = None,
  var `strokeOffset` : Option[AreaConfigStrokeOffset] = None,
  var `limit` : Option[AreaConfigLimit] = None,
  var `width` : Option[AreaConfigWidth] = None,
  var `fontWeight` : Option[AreaConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[AreaConfigBlend] = None,
  var `strokeWidth` : Option[AreaConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[AreaConfigTheta2] = None
) extends AnyMarkConfig 
{  }
object AreaConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "point", "ariaRole", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "dx", "width", "cornerRadiusBottomRight", "line", "cursor", "blend", "height", "theta2", "orient", "baseline", "stroke", "align", "shape", "lineHeight", "interpolate", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// OrderValueDefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait OrderValueDefValue 
   case class OrderValueDefValueAsNumber(value: JsNumber) extends OrderValueDefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelVConcatSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigEndAngle (UnionType)

sealed trait TickConfigEndAngle 
   case class TickConfigEndAngleAsNumber(value: JsNumber) extends TickConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisZindex (ConstrainedType)
/**
 * A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.
 * 
 * __Default value:__ `0` (behind the marks).
 **/
case class AxisZindex(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleParamsStyle (UnionType)
/**
 * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.
 * 
 * __Default value:__ `"group-title"`.
 **/
sealed trait TitleParamsStyle 
   case class TitleParamsStyleAsString(value: String) extends TitleParamsStyle
   case class TitleParamsStyleAsArrayOfString(value: Seq[String]) extends TitleParamsStyle

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait LayerRepeatSpecSpacing 
   case class LayerRepeatSpecSpacingAsNumber(value: JsNumber) extends LayerRepeatSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeWidth (UnionType)

sealed trait RectConfigStrokeWidth 
   // RectConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class MarkConfigFontSizeAsNumber(value: JsNumber) extends MarkConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingDetail (UnionType)
/**
 * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
 **/
sealed trait SharedEncodingDetail 
   // FieldDefWithoutScale is defined elsewhere
   case class SharedEncodingDetailAsArrayOfFieldDefWithoutScale(value: Seq[FieldDefWithoutScale]) extends SharedEncodingDetail

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelUnitSpecBounds  { val payload: JsValue }
   case object TopLevelUnitSpecBoundsFull extends TopLevelUnitSpecBounds { val payload = JsString("full") }
   case object TopLevelUnitSpecBoundsFlush extends TopLevelUnitSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelFontWeight (UnionType)

sealed trait LegendConfigLabelFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigCornerRadiusBottomLeft (UnionType)

sealed trait TickConfigCornerRadiusBottomLeft 
   case class TickConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends TickConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldGTEPredicate (StructType)

case class FieldGTEPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * The value that the field should be greater than or equals to.
   **/
  var `gte` : FieldGTEPredicateGte,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldGTEPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldGTEPredicate {
  val definedFields = Set("field", "gte", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// NumericArrayMarkPropDef (UnionType)
/**
 * Stroke dash of the marks.
 * 
 * __Default value:__ `[1,0]` (No dash).
 **/
sealed trait NumericArrayMarkPropDef 
   // FieldOrDatumDefWithConditionMarkPropFieldDefNumber is defined elsewhere
   // FieldOrDatumDefWithConditionDatumDefNumber is defined elsewhere
   // ValueDefWithConditionMarkPropFieldOrDatumDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LookupTransformFrom (UnionType)
/**
 * Data source or selection for secondary data reference.
 **/
sealed trait LookupTransformFrom 
   // LookupData is defined elsewhere
   // LookupSelection is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeJoin (UnionType)

sealed trait OverlayMarkDefStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class TickConfigStrokeWidthAsNumber(value: JsNumber) extends TickConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// Vector2DateTime (ConstrainedType)

case class Vector2DateTime(value: Seq[DateTime]) extends SelectionInitInterval
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// DerivedStream (StructType)

case class DerivedStream(
  var `marktype` : Option[MarkType] = None,
  var `filter` : Option[DerivedStreamFilter] = None,
  var `stream` : Stream,
  var `markname` : Option[String] = None,
  var `consume` : Option[Boolean] = None,
  var `debounce` : Option[JsNumber] = None,
  var `between` : Option[Seq[Stream]] = None,
  var `throttle` : Option[JsNumber] = None
) extends Stream 
{  }
object DerivedStream {
  val definedFields = Set("marktype", "throttle", "debounce", "markname", "between", "stream", "filter", "consume") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingHrefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderTitleLineHeight (UnionType)
/**
 * Line height in pixels for multi-line header title text or title text with `"line-top"` or `"line-bottom"` baseline.
 **/
sealed trait HeaderTitleLineHeight 
   case class HeaderTitleLineHeightAsNumber(value: JsNumber) extends HeaderTitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait OverlayMarkDefInvalid  { val payload: JsValue }
   case object OverlayMarkDefInvalidFilter extends OverlayMarkDefInvalid { val payload = JsString("filter") }
   case object OverlayMarkDefInvalidUndefined extends OverlayMarkDefInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleFont (UnionType)

sealed trait LegendConfigTitleFont 
   case class LegendConfigTitleFontAsString(value: String) extends LegendConfigTitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// GraticuleGeneratorGraticule (UnionType)
/**
 * Generate graticule GeoJSON data for geographic reference lines.
 **/
sealed trait GraticuleGeneratorGraticule 
   // True is defined elsewhere
   // GraticuleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeMiterLimit (UnionType)

sealed trait AreaConfigStrokeMiterLimit 
   case class AreaConfigStrokeMiterLimitAsNumber(value: JsNumber) extends AreaConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecWidth (UnionType)
/**
 * The width of a visualization.
 * 
 * - For a plot with a continuous x-field, width should be a number.
 * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on width, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait TopLevelLayerSpecWidth 
   case class TopLevelLayerSpecWidthAsNumber(value: JsNumber) extends TopLevelLayerSpecWidth
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelHConcatSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldLTPredicate (StructType)

case class FieldLTPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * The value that the field should be less than.
   **/
  var `lt` : FieldLTPredicateLt,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldLTPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldLTPredicate {
  val definedFields = Set("field", "lt", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingXError2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingXError2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingFillBin 
   case class SharedEncodingFillBinAsBool(value: Boolean) extends SharedEncodingFillBin
   // BinParams is defined elsewhere
   case object SharedEncodingFillBinAsNull extends SharedEncodingFillBin

////////////////////////////////////////////////////////////////////////

// ProjectionConfigRadius (UnionType)

sealed trait ProjectionConfigRadius 
   case class ProjectionConfigRadiusAsNumber(value: JsNumber) extends ProjectionConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RepeatRefRepeat (EnumType)

sealed trait RepeatRefRepeat  { val payload: JsValue }
   case object RepeatRefRepeatRow extends RepeatRefRepeat { val payload = JsString("row") }
   case object RepeatRefRepeatColumn extends RepeatRefRepeat { val payload = JsString("column") }
   case object RepeatRefRepeatRepeat extends RepeatRefRepeat { val payload = JsString("repeat") }
   case object RepeatRefRepeatLayer extends RepeatRefRepeat { val payload = JsString("layer") }

////////////////////////////////////////////////////////////////////////

// ErrorBarDef (StructType)

case class ErrorBarDef(
  /**
   * Size of the ticks of an error bar
   **/
  var `size` : Option[JsNumber] = None,
  /**
   * The extent of the rule. Available options include:
   * - `"ci"`: Extend the rule to the confidence interval of the mean.
   * - `"stderr"`: The size of rule are set to the value of standard error, extending from the mean.
   * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from the mean.
   * - `"iqr"`: Extend the rule to the q1 and q3.
   * 
   * __Default value:__ `"stderr"`.
   **/
  var `extent` : Option[ErrorBarExtent] = None,
  var `rule` : Option[ErrorBarDefRule] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[ErrorBarDefColor] = None,
  /**
   * Thickness of the ticks and the bar of an error bar
   **/
  var `thickness` : Option[JsNumber] = None,
  var `ticks` : Option[ErrorBarDefTicks] = None,
  /**
   * Orientation of the error bar. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The opacity (value between [0,1]) of the mark.
   **/
  var `opacity` : Option[ErrorBarDefOpacity] = None,
  /**
   * The mark type. This could a primitive mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`) or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
   **/
  var `type` : ErrorBar,
  /**
   * Whether a composite mark be clipped to the enclosing group’s width and height.
   **/
  var `clip` : Option[Boolean] = None
) extends CompositeMarkDef 
{  }
object ErrorBarDef {
  val definedFields = Set("type", "rule", "ticks", "clip", "orient", "thickness", "opacity", "color", "size", "extent") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStyle (UnionType)
/**
 * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.
 * 
 * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).
 **/
sealed trait OverlayMarkDefStyle 
   case class OverlayMarkDefStyleAsString(value: String) extends OverlayMarkDefStyle
   case class OverlayMarkDefStyleAsArrayOfString(value: Seq[String]) extends OverlayMarkDefStyle

////////////////////////////////////////////////////////////////////////

// AxisConfigBandPosition (UnionType)

sealed trait AxisConfigBandPosition 
   case class AxisConfigBandPositionAsNumber(value: JsNumber) extends AxisConfigBandPosition
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFontStyle (UnionType)

sealed trait OverlayMarkDefFontStyle 
   case class OverlayMarkDefFontStyleAsString(value: String) extends OverlayMarkDefFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFillOpacity (UnionType)

sealed trait OverlayMarkDefFillOpacity 
   // OverlayMarkDefFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConfigPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait ConfigPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TimeInterval (EnumType)

sealed trait TimeInterval extends TickCount with ScaleNice with AxisTickCount with AxisConfigTickCount { val payload: JsValue }
   case object TimeIntervalMillisecond extends TimeInterval { val payload = JsString("millisecond") }
   case object TimeIntervalSecond extends TimeInterval { val payload = JsString("second") }
   case object TimeIntervalMinute extends TimeInterval { val payload = JsString("minute") }
   case object TimeIntervalHour extends TimeInterval { val payload = JsString("hour") }
   case object TimeIntervalDay extends TimeInterval { val payload = JsString("day") }
   case object TimeIntervalWeek extends TimeInterval { val payload = JsString("week") }
   case object TimeIntervalMonth extends TimeInterval { val payload = JsString("month") }
   case object TimeIntervalYear extends TimeInterval { val payload = JsString("year") }

////////////////////////////////////////////////////////////////////////

// FacetSpecFacet (UnionType)
/**
 * Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
 **/
sealed trait FacetSpecFacet 
   // FacetFieldDef is defined elsewhere
   // FacetMapping is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientStrokeWidthAsNumber (ConstrainedType)
/**
 * The width of the gradient stroke, in pixels.
 * 
 * __Default value:__ `0`.
 **/
case class LegendConfigGradientStrokeWidthAsNumber(value: JsNumber) extends LegendConfigGradientStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingColor (StructType)

case class SharedEncodingColor(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingColorDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingColorBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingColorCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingColorBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingColorValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingColorTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingColorType] = None
)  
{  }
object SharedEncodingColor {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefAriaRole (UnionType)

sealed trait MarkDefAriaRole 
   case class MarkDefAriaRoleAsString(value: String) extends MarkDefAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelFontStyle (UnionType)

sealed trait AxisLabelFontStyle 
   case class AxisLabelFontStyleAsString(value: String) extends AxisLabelFontStyle
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelFontStyle is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigDiscreteWidthAsObject2 (StructType)

case class ViewConfigDiscreteWidthAsObject2(
  var `step` : JsNumber
) extends ViewConfigDiscreteWidth 
{  }
object ViewConfigDiscreteWidthAsObject2 {
  val definedFields = Set("step") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait AreaConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object AreaConfigStrokeAsNull extends AreaConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigWidth (UnionType)

sealed trait RectConfigWidth 
   case class RectConfigWidthAsNumber(value: JsNumber) extends RectConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TooltipContent (StructType)

case class TooltipContent(
  var `content` : TooltipContentContent
) extends MarkDefTooltip with OverlayMarkDefTooltip with TickConfigTooltip with BarConfigTooltip with MarkConfigTooltip with RectConfigTooltip with AreaConfigTooltip with LineConfigTooltip 
{  }
object TooltipContent {
  val definedFields = Set("content") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleColor (UnionType)
/**
 * Color of the title, can be in hex color code or regular color name.
 **/
sealed trait AxisConfigTitleColor 
   case object AxisConfigTitleColorAsNull extends AxisConfigTitleColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait FacetEncodingFieldDefSpacing 
   case class FacetEncodingFieldDefSpacingAsNumber(value: JsNumber) extends FacetEncodingFieldDefSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleRange (UnionType)
/**
 * The range of the scale. One of:
 * 
 * - A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `"symbol"`, or `"diverging"`).
 * 
 * - For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
 * 
 * - For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values or an object with a `field` property representing the range values.  For example, if a field `color` contains CSS color names, we can set `range` to `{field: "color"}`.
 * 
 * __Notes:__
 * 
 * 1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.
 * 
 * 2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`).
 **/
sealed trait ScaleRange 
   // RangeEnum is defined elsewhere
   case class ScaleRangeAsArrayOfScaleRangeAsArrayElement(value: Seq[ScaleRangeAsArrayElement]) extends ScaleRange
   // FieldRange is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin 
   case class FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBinAsBool(value: Boolean) extends FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin
   // BinParams is defined elsewhere
   case object FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBinAsNull extends FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin

////////////////////////////////////////////////////////////////////////

// ProjectionReflectX (UnionType)

sealed trait ProjectionReflectX 
   case class ProjectionReflectXAsBool(value: Boolean) extends ProjectionReflectX
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecParamsElement (UnionType)

sealed trait FacetedUnitSpecParamsElement 
   // VariableParameter is defined elsewhere
   // SelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionReflectY (UnionType)

sealed trait ProjectionReflectY 
   case class ProjectionReflectYAsBool(value: Boolean) extends ProjectionReflectY
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Vector3Number (ConstrainedType)

case class Vector3Number(value: Seq[JsNumber]) extends ProjectionConfigRotate with ProjectionRotate
{ assert(value.size >= 3)
  assert(value.size <= 3) }

////////////////////////////////////////////////////////////////////////

// ScaleScheme (UnionType)
/**
 * A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `"category10"` or `"blues"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).
 * 
 * Discrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.
 * 
 * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
 **/
sealed trait ScaleScheme 
   case class ScaleSchemeAsString(value: String) extends ScaleScheme
   // SchemeParams is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelFontSizeAsNumber (ConstrainedType)
/**
 * The font size of the label, in pixels.
 **/
case class AxisLabelFontSizeAsNumber(value: JsNumber) extends AxisLabelFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FacetedEncodingDescription (UnionType)
/**
 * A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `"aria-label"` attribute will be set to this description.
 **/
sealed trait FacetedEncodingDescription 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecSpec (UnionType)
/**
 * A specification of the view that gets repeated.
 **/
sealed trait LayerRepeatSpecSpec 
   // LayerSpec is defined elsewhere
   // UnitSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpec (StructType)
/**
 * Base interface for a facet specification.
 **/
case class FacetSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[FacetSpecCenter] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[FacetSpecBounds] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets faceted.
   **/
  var `spec` : FacetSpecSpec,
  /**
   * Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
   **/
  var `facet` : FacetSpecFacet,
  /**
   * Title for the plot.
   **/
  var `title` : Option[FacetSpecTitle] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[FacetSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[FacetSpecSpacing] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends NonNormalizedSpec with Spec 
{  }
object FacetSpec {
  val definedFields = Set("spacing", "data", "spec", "facet", "transform", "name", "align", "description", "title", "resolve", "bounds", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecParamsElement (UnionType)

sealed trait TopLevelConcatSpecParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelFontWeight (UnionType)
/**
 * The font weight of the header label.
 **/
sealed trait HeaderConfigLabelFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingRadiusBin 
   case class SharedEncodingRadiusBinAsBool(value: Boolean) extends SharedEncodingRadiusBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingRadiusBinAsNull extends SharedEncodingRadiusBin

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FacetEncodingFieldDefBin 
   case class FacetEncodingFieldDefBinAsBool(value: Boolean) extends FacetEncodingFieldDefBin
   // BinParams is defined elsewhere
   case object FacetEncodingFieldDefBinAsNull extends FacetEncodingFieldDefBin

////////////////////////////////////////////////////////////////////////

// ErrorBarConfigTicks (UnionType)

sealed trait ErrorBarConfigTicks 
   case class ErrorBarConfigTicksAsBool(value: Boolean) extends ErrorBarConfigTicks
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDef (StructType)

case class PositionFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.
   * 
   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
   **/
  var `impute` : Option[ImputeParams] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[PositionFieldDefBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[PositionFieldDefStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[PositionFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[PositionFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
   * 
   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
   **/
  var `axis` : Option[Axis] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends PositionDef 
{  }
object PositionFieldDef {
  val definedFields = Set("bin", "type", "bandPosition", "stack", "aggregate", "title", "impute", "axis", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// RangeConfigOptional (UnionType)

sealed trait RangeConfigOptional 
   // RangeScheme is defined elsewhere
   case class RangeConfigOptionalAsArrayOfAny(value: Seq[JsValue]) extends RangeConfigOptional

////////////////////////////////////////////////////////////////////////

// Categorical (EnumType)

sealed trait Categorical extends ColorScheme { val payload: JsValue }
   case object CategoricalAccent extends Categorical { val payload = JsString("accent") }
   case object CategoricalCategory10 extends Categorical { val payload = JsString("category10") }
   case object CategoricalCategory20 extends Categorical { val payload = JsString("category20") }
   case object CategoricalCategory20b extends Categorical { val payload = JsString("category20b") }
   case object CategoricalCategory20c extends Categorical { val payload = JsString("category20c") }
   case object CategoricalDark2 extends Categorical { val payload = JsString("dark2") }
   case object CategoricalPaired extends Categorical { val payload = JsString("paired") }
   case object CategoricalPastel1 extends Categorical { val payload = JsString("pastel1") }
   case object CategoricalPastel2 extends Categorical { val payload = JsString("pastel2") }
   case object CategoricalSet1 extends Categorical { val payload = JsString("set1") }
   case object CategoricalSet2 extends Categorical { val payload = JsString("set2") }
   case object CategoricalSet3 extends Categorical { val payload = JsString("set3") }
   case object CategoricalTableau10 extends Categorical { val payload = JsString("tableau10") }
   case object CategoricalTableau20 extends Categorical { val payload = JsString("tableau20") }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait OverlayMarkDefAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OrderFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait OrderFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConfigAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait ConfigAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowEventType (UnionType)

sealed trait WindowEventType 
   // EventType is defined elsewhere
   case class WindowEventTypeAsString(value: String) extends WindowEventType

////////////////////////////////////////////////////////////////////////

// AxisConfigTickDash (UnionType)

sealed trait AxisConfigTickDash 
   case class AxisConfigTickDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisConfigTickDash
   // ExprRef is defined elsewhere
   // ConditionalAxisNumberArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingStrokeWidthBin 
   case class SharedEncodingStrokeWidthBinAsBool(value: Boolean) extends SharedEncodingStrokeWidthBin
   // BinParams is defined elsewhere
   case object SharedEncodingStrokeWidthBinAsNull extends SharedEncodingStrokeWidthBin

////////////////////////////////////////////////////////////////////////

// TickConfigFillOpacity (UnionType)

sealed trait TickConfigFillOpacity 
   // TickConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStartAngle (UnionType)

sealed trait RectConfigStartAngle 
   case class RectConfigStartAngleAsNumber(value: JsNumber) extends RectConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScalePaddingOuter (ConstrainedType)
/**
 * The outer padding (spacing) at the ends of the range of band and point scales, as a fraction of the step size. This value must lie in the range [0,1].
 * 
 * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales. By default, Vega-Lite sets outer padding such that _width/height = number of unique values * step_.
 **/
sealed trait ScalePaddingOuter 
   case class ScalePaddingOuterAsNumber(value: JsNumber) extends ScalePaddingOuter
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LoessTransform (StructType)

case class LoessTransform(
  /**
   * The data field of the independent variable to use a predictor.
   **/
  var `on` : String,
  /**
   * A bandwidth parameter in the range `[0, 1]` that determines the amount of smoothing.
   * 
   * __Default value:__ `0.3`
   **/
  var `bandwidth` : Option[JsNumber] = None,
  /**
   * The output field names for the smoothed points generated by the loess transform.
   * 
   * __Default value:__ The field names of the input x and y values.
   **/
  var `as` : Option[LoessTransformAs] = None,
  /**
   * The data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * The data field of the dependent variable to smooth.
   **/
  var `loess` : String
) extends Transform 
{  }
object LoessTransform {
  val definedFields = Set("loess", "bandwidth", "groupby", "as", "on") 
}

////////////////////////////////////////////////////////////////////////

// ErrorBandConfigBorders (UnionType)

sealed trait ErrorBandConfigBorders 
   case class ErrorBandConfigBordersAsBool(value: Boolean) extends ErrorBandConfigBorders
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterStringFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalParameterStringFieldDefBin 
   case class ConditionalParameterStringFieldDefBinAsBool(value: Boolean) extends ConditionalParameterStringFieldDefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object ConditionalParameterStringFieldDefBinAsNull extends ConditionalParameterStringFieldDefBin

////////////////////////////////////////////////////////////////////////

// BarConfigEndAngle (UnionType)

sealed trait BarConfigEndAngle 
   case class BarConfigEndAngleAsNumber(value: JsNumber) extends BarConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefTension (UnionType)

sealed trait MarkDefTension 
   case class MarkDefTensionAsNumber(value: JsNumber) extends MarkDefTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin 
   case class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBinAsBool(value: Boolean) extends FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin
   // BinParams is defined elsewhere
   case object FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBinAsNull extends FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin

////////////////////////////////////////////////////////////////////////

// RangeConfigCategory (UnionType)
/**
 * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data.
 **/
sealed trait RangeConfigCategory 
   // RangeScheme is defined elsewhere
   case class RangeConfigCategoryAsArrayOfColor(value: Seq[Color]) extends RangeConfigCategory

////////////////////////////////////////////////////////////////////////

// ErrorBand (ConstantType)

case class ErrorBand() extends CompositeMark

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefPadAngle (UnionType)

sealed trait OverlayMarkDefPadAngle 
   case class OverlayMarkDefPadAngleAsNumber(value: JsNumber) extends OverlayMarkDefPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescription (StructType)

case class SharedEncodingDescription(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[SharedEncodingDescriptionFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingDescriptionBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingDescriptionCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingDescriptionBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingDescriptionValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingDescriptionTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object SharedEncodingDescription {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// TitleConfigFrame (UnionType)
/**
 * The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the full bounding box) or `"group"` (to anchor relative to the group width or height).
 **/
sealed trait TitleConfigFrame 
   // TitleFrame is defined elsewhere
   case class TitleConfigFrameAsString(value: String) extends TitleConfigFrame
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTranslate (UnionType)

sealed trait AxisConfigTranslate 
   case class AxisConfigTranslateAsNumber(value: JsNumber) extends AxisConfigTranslate
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait NonLayerRepeatSpecCenter 
   case class NonLayerRepeatSpecCenterAsBool(value: Boolean) extends NonLayerRepeatSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadiusBottomRight (UnionType)

sealed trait BarConfigCornerRadiusBottomRight 
   case class BarConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends BarConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingY2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingY2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFontSize (UnionType)

sealed trait AxisConfigLabelFontSize 
   // AxisConfigLabelFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RadialGradient (StructType)

case class RadialGradient(
  /**
   * The type of gradient. Use `"radial"` for a radial gradient.
   **/
  var `gradient` : RadialGradientGradient,
  /**
   * The x-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.
   * 
   * __Default value:__ `0.5`
   **/
  var `x2` : Option[JsNumber] = None,
  var `id` : Option[String] = None,
  /**
   * The radius length, in normalized [0, 1] coordinates, of the outer circle for the gradient.
   * 
   * __Default value:__ `0.5`
   **/
  var `r2` : Option[JsNumber] = None,
  /**
   * An array of gradient stops defining the gradient color sequence.
   **/
  var `stops` : Seq[GradientStop],
  /**
   * The y-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.
   * 
   * __Default value:__ `0.5`
   **/
  var `y1` : Option[JsNumber] = None,
  /**
   * The radius length, in normalized [0, 1] coordinates, of the inner circle for the gradient.
   * 
   * __Default value:__ `0`
   **/
  var `r1` : Option[JsNumber] = None,
  /**
   * The y-coordinate, in normalized [0, 1] coordinates, for the center of the outer circle for the gradient.
   * 
   * __Default value:__ `0.5`
   **/
  var `y2` : Option[JsNumber] = None,
  /**
   * The x-coordinate, in normalized [0, 1] coordinates, for the center of the inner circle for the gradient.
   * 
   * __Default value:__ `0.5`
   **/
  var `x1` : Option[JsNumber] = None
) extends Gradient 
{  }
object RadialGradient {
  val definedFields = Set("y1", "r1", "gradient", "id", "r2", "y2", "stops", "x2", "x1") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait AreaConfigX2 
   case class AreaConfigX2AsNumber(value: JsNumber) extends AreaConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait RectConfigRadius2 
   case class RectConfigRadius2AsNumber(value: JsNumber) extends RectConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingSizeDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SelectionType (EnumType)

sealed trait SelectionType extends SelectionParameterSelect with TopLevelSelectionParameterSelect { val payload: JsValue }
   case object SelectionTypePoint extends SelectionType { val payload = JsString("point") }
   case object SelectionTypeInterval extends SelectionType { val payload = JsString("interval") }

////////////////////////////////////////////////////////////////////////

// NumberLocale (StructType)
/**
 * Locale definition for formatting numbers.
 **/
case class NumberLocale(
  /**
   * The minus sign (defaults to hyphen-minus, "-").
   **/
  var `minus` : Option[String] = None,
  /**
   * The array of group sizes (e.g., [3]), cycled as needed.
   **/
  var `grouping` : Seq[JsNumber],
  /**
   * The decimal point (e.g., ".").
   **/
  var `decimal` : String,
  /**
   * The currency prefix and suffix (e.g., ["$", ""]).
   **/
  var `currency` : Vector2String,
  /**
   * The percent sign (defaults to "%").
   **/
  var `percent` : Option[String] = None,
  /**
   * The group separator (e.g., ",").
   **/
  var `thousands` : String,
  /**
   * The not-a-number value (defaults to "NaN").
   **/
  var `nan` : Option[String] = None,
  /**
   * An array of ten strings to replace the numerals 0-9.
   **/
  var `numerals` : Option[Vector10String] = None
)  
{  }
object NumberLocale {
  val definedFields = Set("currency", "nan", "thousands", "grouping", "numerals", "minus", "decimal", "percent") 
}

////////////////////////////////////////////////////////////////////////

// EventStream (UnionType)

sealed trait EventStream extends Stream
   // EventStreamAsObject1 is defined elsewhere
   // EventStreamAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStyle (UnionType)
/**
 * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.
 * 
 * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).
 **/
sealed trait MarkDefStyle 
   case class MarkDefStyleAsString(value: String) extends MarkDefStyle
   case class MarkDefStyleAsArrayOfString(value: Seq[String]) extends MarkDefStyle

////////////////////////////////////////////////////////////////////////

// ScaleFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ScaleFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DensityTransform (StructType)

case class DensityTransform(
  /**
   * A boolean flag indicating whether to produce density estimates (false) or cumulative density estimates (true).
   * 
   * __Default value:__ `false`
   **/
  var `cumulative` : Option[Boolean] = None,
  /**
   * The data field for which to perform density estimation.
   **/
  var `density` : String,
  /**
   * The data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * The minimum number of samples to take along the extent domain for plotting the density.
   * 
   * __Default value:__ `25`
   **/
  var `minsteps` : Option[JsNumber] = None,
  /**
   * A [min, max] domain from which to sample the distribution. If unspecified, the extent will be determined by the observed minimum and maximum values of the density value field.
   **/
  var `extent` : Option[DensityTransformExtent] = None,
  /**
   * The maximum number of samples to take along the extent domain for plotting the density.
   * 
   * __Default value:__ `200`
   **/
  var `maxsteps` : Option[JsNumber] = None,
  /**
   * The bandwidth (standard deviation) of the Gaussian kernel. If unspecified or set to zero, the bandwidth value is automatically estimated from the input data using Scott’s rule.
   **/
  var `bandwidth` : Option[JsNumber] = None,
  /**
   * The output fields for the sample value and corresponding density estimate.
   * 
   * __Default value:__ `["value", "density"]`
   **/
  var `as` : Option[DensityTransformAs] = None,
  /**
   * A boolean flag indicating if the output values should be probability estimates (false) or smoothed counts (true).
   * 
   * __Default value:__ `false`
   **/
  var `counts` : Option[Boolean] = None,
  /**
   * The exact number of samples to take along the extent domain for plotting the density. If specified, overrides both minsteps and maxsteps to set an exact number of uniform samples. Potentially useful in conjunction with a fixed extent to ensure consistent sample points for stacked densities.
   **/
  var `steps` : Option[JsNumber] = None
) extends Transform 
{  }
object DensityTransform {
  val definedFields = Set("counts", "extent", "bandwidth", "groupby", "as", "minsteps", "density", "maxsteps", "cumulative", "steps") 
}

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition (UnionType)
/**
 * A field definition or one or more value definition(s) with a parameter predicate.
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition 
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition

////////////////////////////////////////////////////////////////////////

// Greedy (ConstantType)

case class Greedy() extends LabelOverlap

////////////////////////////////////////////////////////////////////////

// RangeConfigDiverging (UnionType)
/**
 * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging quantitative ramps.
 **/
sealed trait RangeConfigDiverging 
   // RangeScheme is defined elsewhere
   case class RangeConfigDivergingAsArrayOfColor(value: Seq[Color]) extends RangeConfigDiverging

////////////////////////////////////////////////////////////////////////

// ViewConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait ViewConfigOpacity 
   case class ViewConfigOpacityAsNumber(value: JsNumber) extends ViewConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisDomainDashOffset (UnionType)

sealed trait AxisDomainDashOffset 
   case class AxisDomainDashOffsetAsNumber(value: JsNumber) extends AxisDomainDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigLineHeight (UnionType)

sealed trait TitleConfigLineHeight 
   case class TitleConfigLineHeightAsNumber(value: JsNumber) extends TitleConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingKeyBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingKeyBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefEllipsis (UnionType)

sealed trait MarkDefEllipsis 
   case class MarkDefEllipsisAsString(value: String) extends MarkDefEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Type (EnumType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait Type extends SharedEncodingFillOpacityType with SharedEncodingFillType with SharedEncodingYOffsetType with SharedEncodingColorType with SharedEncodingTextType with SharedEncodingXType with SharedEncodingXOffsetType with SharedEncodingStrokeType with SharedEncodingRadiusType with SharedEncodingThetaType with SharedEncodingYType with SharedEncodingStrokeDashType with SharedEncodingShapeType with SharedEncodingAngleType with SharedEncodingSizeType with SharedEncodingOpacityType with SharedEncodingLongitudeType with SharedEncodingStrokeWidthType with SharedEncodingLatitudeType with SharedEncodingStrokeOpacityType { val payload: JsValue }
   case object TypeQuantitative extends Type { val payload = JsString("quantitative") }
   case object TypeOrdinal extends Type { val payload = JsString("ordinal") }
   case object TypeTemporal extends Type { val payload = JsString("temporal") }
   case object TypeNominal extends Type { val payload = JsString("nominal") }
   case object TypeGeojson extends Type { val payload = JsString("geojson") }

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleFontSizeAsNumber (ConstrainedType)
/**
 * Font size of the title.
 **/
case class AxisConfigTitleFontSizeAsNumber(value: JsNumber) extends AxisConfigTitleFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// PositionFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait PositionFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StyleConfigIndex (StructType)
/**
 * An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config).
 **/
case class StyleConfigIndex(
  /**
   * Rect-Specific Config
   **/
  var `rect` : Option[RectConfig] = None,
  /**
   * Circle-Specific Config
   **/
  var `circle` : Option[MarkConfig] = None,
  /**
   * Trail-Specific Config
   **/
  var `trail` : Option[LineConfig] = None,
  /**
   * Default style for axis, legend, and header titles.
   **/
  var `guide-title` : Option[MarkConfig] = None,
  /**
   * Rule-Specific Config
   **/
  var `rule` : Option[MarkConfig] = None,
  /**
   * Square-Specific Config
   **/
  var `square` : Option[MarkConfig] = None,
  /**
   * Arc-specific Config
   **/
  var `arc` : Option[RectConfig] = None,
  /**
   * Bar-Specific Config
   **/
  var `bar` : Option[BarConfig] = None,
  /**
   * Mark Config
   **/
  var `mark` : Option[MarkConfig] = None,
  /**
   * Area-Specific Config
   **/
  var `area` : Option[AreaConfig] = None,
  /**
   * Point-Specific Config
   **/
  var `point` : Option[MarkConfig] = None,
  /**
   * Image-specific Config
   **/
  var `image` : Option[RectConfig] = None,
  /**
   * Line-Specific Config
   **/
  var `line` : Option[LineConfig] = None,
  /**
   * Default style for chart subtitles
   **/
  var `group-subtitle` : Option[MarkConfig] = None,
  /**
   * Text-Specific Config
   **/
  var `text` : Option[MarkConfig] = None,
  /**
   * Geoshape-Specific Config
   **/
  var `geoshape` : Option[MarkConfig] = None,
  /**
   * Tick-Specific Config
   **/
  var `tick` : Option[TickConfig] = None,
  /**
   * Default style for axis, legend, and header labels.
   **/
  var `guide-label` : Option[MarkConfig] = None,
  /**
   * Default style for chart titles
   **/
  var `group-title` : Option[MarkConfig] = None,

  /**
   * optional parameters for StyleConfigIndex
   */
  var optionalFields: Map[String,StyleConfigIndexOptional]
)  
{  }
object StyleConfigIndex {
  val definedFields = Set("arc", "text", "group-title", "area", "rect", "trail", "tick", "guide-label", "guide-title", "geoshape", "square", "bar", "group-subtitle", "point", "rule", "circle", "image", "mark", "line") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelBaseline (UnionType)

sealed trait AxisConfigLabelBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelBaseline is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefOrder (UnionType)

sealed trait OverlayMarkDefOrder 
   case object OverlayMarkDefOrderAsNull extends OverlayMarkDefOrder
   case class OverlayMarkDefOrderAsBool(value: Boolean) extends OverlayMarkDefOrder

////////////////////////////////////////////////////////////////////////

// LatLongFieldDefType (ConstantType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
case class LatLongFieldDefType() 

////////////////////////////////////////////////////////////////////////

// ParameterExtentAsObject1 (StructType)

case class ParameterExtentAsObject1(
  /**
   * If a selection parameter is specified, the field name to extract selected values for when the selection is [projected](https://vega.github.io/vega-lite/docs/selection.html#project) over multiple fields or encodings.
   **/
  var `field` : Option[String] = None,
  /**
   * The name of a parameter.
   **/
  var `param` : String
) extends ParameterExtent 
{  }
object ParameterExtentAsObject1 {
  val definedFields = Set("field", "param") 
}

////////////////////////////////////////////////////////////////////////

// ParameterExtentAsObject2 (StructType)

case class ParameterExtentAsObject2(
  /**
   * If a selection parameter is specified, the encoding channel to extract selected values for when a selection is [projected](https://vega.github.io/vega-lite/docs/selection.html#project) over multiple fields or encodings.
   **/
  var `encoding` : Option[SingleDefUnitChannel] = None,
  /**
   * The name of a parameter.
   **/
  var `param` : String
) extends ParameterExtent 
{  }
object ParameterExtentAsObject2 {
  val definedFields = Set("encoding", "param") 
}

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfig (StructType)

case class IntervalSelectionConfig(
  /**
   * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
   * 
   * __Default value:__ `dblclick`.
   * 
   * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
   **/
  var `clear` : Option[IntervalSelectionConfigClear] = None,
  /**
   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
   * 
   * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
   **/
  var `on` : Option[IntervalSelectionConfigOn] = None,
  /**
   * With layered and multi-view displays, a strategy that determines how selections' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.
   * 
   * One of:
   * - `"global"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.
   * - `"union"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.
   * - `"intersect"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.
   * 
   * __Default value:__ `global`.
   * 
   * __See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation.
   **/
  var `resolve` : Option[SelectionResolution] = None,
  /**
   * When truthy, allows a user to interactively move an interval selection back-and-forth. Can be `true`, `false` (to disable panning), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/) which must include a start and end event to trigger continuous panning. Discrete panning (e.g., pressing the left/right arrow keys) will be supported in future versions.
   * 
   * __Default value:__ `true`, which corresponds to `[mousedown, window:mouseup] > window:mousemove!`. This default allows users to clicks and drags within an interval selection to reposition it.
   * 
   * __See also:__ [`translate` examples](https://vega.github.io/vega-lite/docs/selection.html#translate) in the documentation.
   **/
  var `translate` : Option[IntervalSelectionConfigTranslate] = None,
  /**
   * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
   * 
   * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
   * - `"interval"` -- to select a continuous range of data values on `drag`.
   **/
  var `type` : IntervalSelectionConfigType,
  /**
   * An interval selection also adds a rectangle mark to depict the extents of the interval. The `mark` property can be used to customize the appearance of the mark.
   * 
   * __See also:__ [`mark` examples](https://vega.github.io/vega-lite/docs/selection.html#mark) in the documentation.
   **/
  var `mark` : Option[BrushConfig] = None,
  /**
   * An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `encodings` : Option[Seq[SingleDefUnitChannel]] = None,
  /**
   * When truthy, allows a user to interactively resize an interval selection. Can be `true`, `false` (to disable zooming), or a [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/). Currently, only `wheel` events are supported, but custom event streams can still be used to specify filters, debouncing, and throttling. Future versions will expand the set of events that can trigger this transformation.
   * 
   * __Default value:__ `true`, which corresponds to `wheel!`. This default allows users to use the mouse wheel to resize an interval selection.
   * 
   * __See also:__ [`zoom` examples](https://vega.github.io/vega-lite/docs/selection.html#zoom) in the documentation.
   **/
  var `zoom` : Option[IntervalSelectionConfigZoom] = None
) extends SelectionParameterSelect with TopLevelSelectionParameterSelect 
{  }
object IntervalSelectionConfig {
  val definedFields = Set("clear", "zoom", "type", "encodings", "mark", "resolve", "translate", "on") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTickSize (UnionType)

sealed trait AxisConfigTickSize 
   // AxisConfigTickSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefTextBaselineNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefTextBaselineNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefTextBaselineNullExprRef 
{  }
object ConditionalPredicateValueDefTextBaselineNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Center (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait TopLevelRepeatSpecAsObject1Center 
   case class TopLevelRepeatSpecAsObject1CenterAsBool(value: Boolean) extends TopLevelRepeatSpecAsObject1Center
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude2 (StructType)

case class SharedEncodingLatitude2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingLatitude2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingLatitude2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingLatitude2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingLatitude2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingLatitude2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// BoxPlotDefOpacity (ConstrainedType)
/**
 * The opacity (value between [0,1]) of the mark.
 **/
case class BoxPlotDefOpacity(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefTextBaselineNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefTextBaselineNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[TextBaseline] = None
) extends ConditionalPredicateValueDefTextBaselineNullExprRef 
{  }
object ConditionalPredicateValueDefTextBaselineNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingStrokeDashDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigFraction (UnionType)

sealed trait ProjectionConfigFraction 
   case class ProjectionConfigFractionAsNumber(value: JsNumber) extends ProjectionConfigFraction
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait TickConfigRadius 
   case class TickConfigRadiusAsNumber(value: JsNumber) extends TickConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingHrefValue 
   case class SharedEncodingHrefValueAsString(value: String) extends SharedEncodingHrefValue
   case object SharedEncodingHrefValueAsNull extends SharedEncodingHrefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// UnitSpecWithFrameParamsElement (UnionType)

sealed trait UnitSpecWithFrameParamsElement 
   // VariableParameter is defined elsewhere
   // SelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigOn (UnionType)
/**
 * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
 * 
 * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
 **/
sealed trait IntervalSelectionConfigOn 
   // Stream is defined elsewhere
   case class IntervalSelectionConfigOnAsString(value: String) extends IntervalSelectionConfigOn

////////////////////////////////////////////////////////////////////////

// AreaConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait AreaConfigY2 
   case class AreaConfigY2AsNumber(value: JsNumber) extends AreaConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingXError (UnionType)
/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait FacetedEncodingXError 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalParameterMarkPropFieldOrDatumDefAsObject2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigHeight (UnionType)

sealed trait AreaConfigHeight 
   case class AreaConfigHeightAsNumber(value: JsNumber) extends AreaConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleResolveMap (StructType)

case class ScaleResolveMap(
  var `x` : Option[ResolveMode] = None,
  var `fillOpacity` : Option[ResolveMode] = None,
  var `color` : Option[ResolveMode] = None,
  var `radius` : Option[ResolveMode] = None,
  var `strokeDash` : Option[ResolveMode] = None,
  var `yOffset` : Option[ResolveMode] = None,
  var `strokeWidth` : Option[ResolveMode] = None,
  var `xOffset` : Option[ResolveMode] = None,
  var `size` : Option[ResolveMode] = None,
  var `y` : Option[ResolveMode] = None,
  var `strokeOpacity` : Option[ResolveMode] = None,
  var `angle` : Option[ResolveMode] = None,
  var `stroke` : Option[ResolveMode] = None,
  var `fill` : Option[ResolveMode] = None,
  var `theta` : Option[ResolveMode] = None,
  var `shape` : Option[ResolveMode] = None,
  var `opacity` : Option[ResolveMode] = None
)  
{  }
object ScaleResolveMap {
  val definedFields = Set("strokeWidth", "y", "size", "theta", "strokeDash", "strokeOpacity", "yOffset", "xOffset", "stroke", "shape", "angle", "fill", "opacity", "fillOpacity", "color", "radius", "x") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait AreaConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object AreaConfigFillAsNull extends AreaConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AutosizeType (EnumType)

sealed trait AutosizeType extends TopLevelVConcatSpecAutosize with TopLevelConcatSpecAutosize with ConfigAutosize with TopLevelRepeatSpecAsObject2Autosize with TopLevelFacetSpecAutosize with TopLevelLayerSpecAutosize with TopLevelUnitSpecAutosize with TopLevelHConcatSpecAutosize with TopLevelRepeatSpecAsObject1Autosize { val payload: JsValue }
   case object AutosizeTypePad extends AutosizeType { val payload = JsString("pad") }
   case object AutosizeTypeNone extends AutosizeType { val payload = JsString("none") }
   case object AutosizeTypeFit extends AutosizeType { val payload = JsString("fit") }
   case object AutosizeTypeFitX extends AutosizeType { val payload = JsString("fit-x") }
   case object AutosizeTypeFitY extends AutosizeType { val payload = JsString("fit-y") }

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNull (ConstrainedType)

case class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNull(
  /**
   * A field definition or one or more value definition(s) with a parameter predicate.
   **/
  var `condition` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue] = None
) extends ShapeDef 
{ assert(value.size >= 1)
  assert(value.size <= 1) }
object ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNull {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// LookupTransform (StructType)

case class LookupTransform(
  /**
   * The output fields on which to store the looked up data values.
   * 
   * For data lookups, this property may be left blank if `from.fields` has been specified (those field names will be used); if `from.fields` has not been specified, `as` must be a string.
   * 
   * For selection lookups, this property is optional: if unspecified, looked up values will be stored under a property named for the selection; and if specified, it must correspond to `from.fields`.
   **/
  var `as` : Option[LookupTransformAs] = None,
  /**
   * The default value to use if lookup fails.
   * 
   * __Default value:__ `null`
   **/
  var `default` : Option[JsValue] = None,
  /**
   * Data source or selection for secondary data reference.
   **/
  var `from` : LookupTransformFrom,
  /**
   * Key in primary data source.
   **/
  var `lookup` : String
) extends Transform 
{  }
object LookupTransform {
  val definedFields = Set("as", "default", "from", "lookup") 
}

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithConditionBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class StringFieldDefWithConditionBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCornerRadiusTopLeft (UnionType)

sealed trait OverlayMarkDefCornerRadiusTopLeft 
   case class OverlayMarkDefCornerRadiusTopLeftAsNumber(value: JsNumber) extends OverlayMarkDefCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeOffset (UnionType)

sealed trait BarConfigStrokeOffset 
   case class BarConfigStrokeOffsetAsNumber(value: JsNumber) extends BarConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigFit (UnionType)

sealed trait ProjectionConfigFit 
   case class ProjectionConfigFitAsArrayOfAny(value: Seq[JsValue]) extends ProjectionConfigFit
   case class ProjectionConfigFitAsArrayOfFit(value: Seq[Fit]) extends ProjectionConfigFit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefTheta2Offset (UnionType)
/**
 * Offset for theta2.
 **/
sealed trait MarkDefTheta2Offset 
   case class MarkDefTheta2OffsetAsNumber(value: JsNumber) extends MarkDefTheta2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingStrokeTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StackTransformAs (UnionType)
/**
 * Output field names. This can be either a string or an array of strings with two elements denoting the name for the fields for stack start and stack end respectively. If a single string(e.g., `"val"`) is provided, the end field will be `"val_end"`.
 **/
sealed trait StackTransformAs 
   case class StackTransformAsAsString(value: String) extends StackTransformAs
   // StackTransformAsAsArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendStreamBindingLegend (UnionType)

sealed trait LegendStreamBindingLegend 
   case class LegendStreamBindingLegendAsString(value: String) extends LegendStreamBindingLegend
   // Stream is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigText (UnionType)

sealed trait AreaConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigFont (UnionType)

sealed trait TitleConfigFont 
   case class TitleConfigFontAsString(value: String) extends TitleConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleColor (UnionType)
/**
 * Color of the header title, can be in hex color code or regular color name.
 **/
sealed trait HeaderConfigTitleColor 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigAngle (UnionType)

sealed trait TitleConfigAngle 
   case class TitleConfigAngleAsNumber(value: JsNumber) extends TitleConfigAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefRadiusOffset (UnionType)
/**
 * Offset for radius.
 **/
sealed trait MarkDefRadiusOffset 
   case class MarkDefRadiusOffsetAsNumber(value: JsNumber) extends MarkDefRadiusOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefBinSpacing (ConstrainedType)
/**
 * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
 * 
 * __Default value:__ `1`
 **/
case class MarkDefBinSpacing(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAria (UnionType)

sealed trait OverlayMarkDefAria 
   case class OverlayMarkDefAriaAsBool(value: Boolean) extends OverlayMarkDefAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFillOpacity (UnionType)

sealed trait LineConfigFillOpacity 
   // LineConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Blend (EnumType)
/**
 * The color blend mode for drawing an item on its current background. Any valid [CSS mix-blend-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode) value can be used.
 * 
 * __Default value: `"source-over"`
 **/
sealed trait Blend extends RectConfigBlend with AreaConfigBlend with MarkDefBlend with TickConfigBlend with OverlayMarkDefBlend with BarConfigBlend with MarkConfigBlend with LineConfigBlend { val payload: JsValue }
   case object BlendUndefined extends Blend { val payload = JsNull }
   case object BlendMultiply extends Blend { val payload = JsString("multiply") }
   case object BlendScreen extends Blend { val payload = JsString("screen") }
   case object BlendOverlay extends Blend { val payload = JsString("overlay") }
   case object BlendDarken extends Blend { val payload = JsString("darken") }
   case object BlendLighten extends Blend { val payload = JsString("lighten") }
   case object BlendColorDodge extends Blend { val payload = JsString("color-dodge") }
   case object BlendColorBurn extends Blend { val payload = JsString("color-burn") }
   case object BlendHardLight extends Blend { val payload = JsString("hard-light") }
   case object BlendSoftLight extends Blend { val payload = JsString("soft-light") }
   case object BlendDifference extends Blend { val payload = JsString("difference") }
   case object BlendExclusion extends Blend { val payload = JsString("exclusion") }
   case object BlendHue extends Blend { val payload = JsString("hue") }
   case object BlendSaturation extends Blend { val payload = JsString("saturation") }
   case object BlendColor extends Blend { val payload = JsString("color") }
   case object BlendLuminosity extends Blend { val payload = JsString("luminosity") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingShapeTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Data (UnionType)

sealed trait Data 
   // DataSource is defined elsewhere
   // Generator is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBarConfigRule (UnionType)

sealed trait ErrorBarConfigRule 
   case class ErrorBarConfigRuleAsBool(value: Boolean) extends ErrorBarConfigRule
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffsetBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingYOffsetBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ImputeParamsKeyvals (UnionType)
/**
 * Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
 * 
 * If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.
 * 
 * If there is no impute grouping, this property _must_ be specified.
 **/
sealed trait ImputeParamsKeyvals 
   case class ImputeParamsKeyvalsAsArrayOfAny(value: Seq[JsValue]) extends ImputeParamsKeyvals
   // ImputeSequence is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Date (ConstantType)

case class Date() extends ParseValue

////////////////////////////////////////////////////////////////////////

// AreaConfigSmooth (UnionType)

sealed trait AreaConfigSmooth 
   case class AreaConfigSmoothAsBool(value: Boolean) extends AreaConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigToggle (UnionType)

sealed trait PointSelectionConfigToggle 
   case class PointSelectionConfigToggleAsString(value: String) extends PointSelectionConfigToggle
   case class PointSelectionConfigToggleAsBool(value: Boolean) extends PointSelectionConfigToggle

////////////////////////////////////////////////////////////////////////

// Fit (UnionType)

sealed trait Fit 
   case class FitAsAny(value: JsValue) extends Fit
   case class FitAsArrayOfAny(value: Seq[JsValue]) extends Fit

////////////////////////////////////////////////////////////////////////

// SharedEncodingYError (StructType)

case class SharedEncodingYError(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingYErrorBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingYErrorTimeUnit] = None
)  
{  }
object SharedEncodingYError {
  val definedFields = Set("bin", "timeUnit", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeCap (UnionType)

sealed trait OverlayMarkDefStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeMiterLimit (UnionType)

sealed trait RectConfigStrokeMiterLimit 
   case class RectConfigStrokeMiterLimitAsNumber(value: JsNumber) extends RectConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RegressionTransformMethod (EnumType)
/**
 * The functional form of the regression model. One of `"linear"`, `"log"`, `"exp"`, `"pow"`, `"quad"`, or `"poly"`.
 * 
 * __Default value:__ `"linear"`
 **/
sealed trait RegressionTransformMethod  { val payload: JsValue }
   case object RegressionTransformMethodLinear extends RegressionTransformMethod { val payload = JsString("linear") }
   case object RegressionTransformMethodLog extends RegressionTransformMethod { val payload = JsString("log") }
   case object RegressionTransformMethodExp extends RegressionTransformMethod { val payload = JsString("exp") }
   case object RegressionTransformMethodPow extends RegressionTransformMethod { val payload = JsString("pow") }
   case object RegressionTransformMethodQuad extends RegressionTransformMethod { val payload = JsString("quad") }
   case object RegressionTransformMethodPoly extends RegressionTransformMethod { val payload = JsString("poly") }

////////////////////////////////////////////////////////////////////////

// HeaderTitlePadding (UnionType)
/**
 * The padding, in pixel, between facet header's title and the label.
 * 
 * __Default value:__ `10`
 **/
sealed trait HeaderTitlePadding 
   case class HeaderTitlePaddingAsNumber(value: JsNumber) extends HeaderTitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecParamsElement (UnionType)

sealed trait TopLevelVConcatSpecParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingAngleValue 
   case class SharedEncodingAngleValueAsNumber(value: JsNumber) extends SharedEncodingAngleValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecHeight (UnionType)
/**
 * The height of a visualization.
 * 
 * - For a plot with a continuous y-field, height should be a number.
 * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on height, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait FacetedUnitSpecHeight 
   case class FacetedUnitSpecHeightAsNumber(value: JsNumber) extends FacetedUnitSpecHeight
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait BarConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object BarConfigStrokeAsNull extends BarConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta (StructType)

case class SharedEncodingTheta(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingThetaDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingThetaBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[SharedEncodingThetaStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingThetaBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingThetaValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingThetaTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingThetaType] = None
)  
{  }
object SharedEncodingTheta {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "stack", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleFontStyle (UnionType)

sealed trait TitleConfigSubtitleFontStyle 
   case class TitleConfigSubtitleFontStyleAsString(value: String) extends TitleConfigSubtitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PolarDef (UnionType)
/**
 * The outer radius in pixels of arc marks.
 **/
sealed trait PolarDef 
   // PositionFieldDefBase is defined elsewhere
   // PositionDatumDefBase is defined elsewhere
   // PositionValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait RectConfigY 
   case class RectConfigYAsNumber(value: JsNumber) extends RectConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait OverlayMarkDefTooltip 
   case class OverlayMarkDefTooltipAsString(value: String) extends OverlayMarkDefTooltip
   case object OverlayMarkDefTooltipAsNull extends OverlayMarkDefTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class OverlayMarkDefTooltipAsBool(value: Boolean) extends OverlayMarkDefTooltip
   case class OverlayMarkDefTooltipAsNumber(value: JsNumber) extends OverlayMarkDefTooltip

////////////////////////////////////////////////////////////////////////

// RectConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait RectConfigX 
   case class RectConfigXAsNumber(value: JsNumber) extends RectConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefStringNullExprRef (UnionType)

sealed trait ConditionalValueDefStringNullExprRef extends SharedEncodingHrefCondition with SharedEncodingUrlCondition with StringValueDefWithConditionCondition with SharedEncodingShapeCondition with ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition with FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullCondition with SharedEncodingDescriptionCondition with FieldOrDatumDefWithConditionDatumDefStringNullCondition
   // ConditionalPredicateValueDefStringNullExprRef is defined elsewhere
   // ConditionalParameterValueDefStringNullExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DataFormat (UnionType)
/**
 * An object that specifies the format for parsing the data.
 **/
sealed trait DataFormat 
   // CsvDataFormat is defined elsewhere
   // DsvDataFormat is defined elsewhere
   // JsonDataFormat is defined elsewhere
   // TopoDataFormat is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BindCheckbox (StructType)

case class BindCheckbox(
  /**
   * If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.
   **/
  var `debounce` : Option[JsNumber] = None,
  /**
   * An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view.
   **/
  var `element` : Option[String] = None,
  var `input` : BindCheckboxInput,
  /**
   * By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.
   **/
  var `name` : Option[String] = None
) extends Binding 
{  }
object BindCheckbox {
  val definedFields = Set("debounce", "element", "input", "name") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigFontSize (UnionType)

sealed trait MarkConfigFontSize 
   // MarkConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class BarConfigFontSizeAsNumber(value: JsNumber) extends BarConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecParamsElement (UnionType)

sealed trait TopLevelUnitSpecParamsElement 
   // VariableParameter is defined elsewhere
   // SelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EncodingHref (UnionType)
/**
 * A URL to load upon mouse click.
 **/
sealed trait EncodingHref 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefThetaOffset (UnionType)
/**
 * Offset for theta.
 **/
sealed trait OverlayMarkDefThetaOffset 
   case class OverlayMarkDefThetaOffsetAsNumber(value: JsNumber) extends OverlayMarkDefThetaOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleAnchor (EnumType)
/**
 * Text anchor position for placing axis titles.
 **/
sealed trait TitleAnchor extends TitleConfigAnchor with LegendConfigTitleAnchor with AxisTitleAnchor with AxisConfigTitleAnchor { val payload: JsValue }
   case object TitleAnchorUndefined extends TitleAnchor { val payload = JsNull }
   case object TitleAnchorStart extends TitleAnchor { val payload = JsString("start") }
   case object TitleAnchorMiddle extends TitleAnchor { val payload = JsString("middle") }
   case object TitleAnchorEnd extends TitleAnchor { val payload = JsString("end") }

////////////////////////////////////////////////////////////////////////

// SequenceGenerator (StructType)

case class SequenceGenerator(
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : Option[String] = None,
  /**
   * Generate a sequence of numbers.
   **/
  var `sequence` : SequenceParams
) extends Generator 
{  }
object SequenceGenerator {
  val definedFields = Set("name", "sequence") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingLatitude2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleFontSize (UnionType)

sealed trait LegendConfigTitleFontSize 
   case class LegendConfigTitleFontSizeAsNumber(value: JsNumber) extends LegendConfigTitleFontSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HConcatSpecGenericSpec (StructType)
/**
 * Base interface for a horizontal concatenation specification.
 **/
case class HConcatSpecGenericSpec(
  /**
   * A list of views to be concatenated and put into a row.
   **/
  var `hconcat` : Seq[Spec],
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[Boolean] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[HConcatSpecGenericSpecBounds] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[HConcatSpecGenericSpecTitle] = None,
  /**
   * The spacing in pixels between sub-views of the concat operator.
   * 
   * __Default value__: `10`
   **/
  var `spacing` : Option[JsNumber] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends NonNormalizedSpec with Spec 
{  }
object HConcatSpecGenericSpec {
  val definedFields = Set("spacing", "transform", "name", "center", "data", "hconcat", "description", "title", "resolve", "bounds") 
}

////////////////////////////////////////////////////////////////////////

// ProjectionConfigType (UnionType)
/**
 * The cartographic projection to use. This value is case-insensitive, for example `"albers"` and `"Albers"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).
 * 
 * __Default value:__ `equalEarth`
 **/
sealed trait ProjectionConfigType 
   // ProjectionType is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait TickConfigInvalid  { val payload: JsValue }
   case object TickConfigInvalidFilter extends TickConfigInvalid { val payload = JsString("filter") }
   case object TickConfigInvalidUndefined extends TickConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffsetDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingXOffsetDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeSchemeAsObject3Scheme (UnionType)

sealed trait RangeSchemeAsObject3Scheme 
   case class RangeSchemeAsObject3SchemeAsString(value: String) extends RangeSchemeAsObject3Scheme
   case class RangeSchemeAsObject3SchemeAsArrayOfString(value: Seq[String]) extends RangeSchemeAsObject3Scheme
   // ColorScheme is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefXOffset (UnionType)
/**
 * Offset for x-position.
 **/
sealed trait MarkDefXOffset 
   case class MarkDefXOffsetAsNumber(value: JsNumber) extends MarkDefXOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingStrokeValue 
   // Gradient is defined elsewhere
   case class SharedEncodingStrokeValueAsString(value: String) extends SharedEncodingStrokeValue
   case object SharedEncodingStrokeValueAsNull extends SharedEncodingStrokeValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DateTimeMinutes (ConstrainedType)
/**
 * Integer value representing the minute segment of time from 0-59.
 **/
case class DateTimeMinutes(value: JsNumber) 
{ assert(value.value <= 60)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// CsvDataFormat (StructType)

case class CsvDataFormat(
  /**
   * If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)). For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
   * 
   * For `"date"`, we parse data based using JavaScript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: "date:'%m%d%Y'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:'%m%d%Y'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)
   **/
  var `parse` : Option[Map[String,ParseValue]] = None,
  /**
   * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
   * 
   * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
   **/
  var `type` : Option[CsvDataFormatType] = None
) extends DataFormat 
{  }
object CsvDataFormat {
  val definedFields = Set("parse", "type") 
}

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefStringNullDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefStringNullDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefDescription (UnionType)

sealed trait OverlayMarkDefDescription 
   case class OverlayMarkDefDescriptionAsString(value: String) extends OverlayMarkDefDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadiusBottomRight (UnionType)

sealed trait MarkDefCornerRadiusBottomRight 
   case class MarkDefCornerRadiusBottomRightAsNumber(value: JsNumber) extends MarkDefCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EncodingDetail (UnionType)
/**
 * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
 **/
sealed trait EncodingDetail 
   // FieldDefWithoutScale is defined elsewhere
   case class EncodingDetailAsArrayOfFieldDefWithoutScale(value: Seq[FieldDefWithoutScale]) extends EncodingDetail

////////////////////////////////////////////////////////////////////////

// BoxPlotDefBox (UnionType)

sealed trait BoxPlotDefBox 
   case class BoxPlotDefBoxAsBool(value: Boolean) extends BoxPlotDefBox
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigText (UnionType)

sealed trait LineConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait RectConfigOpacity 
   case class RectConfigOpacityAsNumber(value: JsNumber) extends RectConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait RectConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefX2Offset (UnionType)
/**
 * Offset for x2-position.
 **/
sealed trait OverlayMarkDefX2Offset 
   case class OverlayMarkDefX2OffsetAsNumber(value: JsNumber) extends OverlayMarkDefX2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeDashOffset (UnionType)

sealed trait MarkDefStrokeDashOffset 
   case class MarkDefStrokeDashOffsetAsNumber(value: JsNumber) extends MarkDefStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeOpacity (UnionType)

sealed trait ViewBackgroundStrokeOpacity 
   // ViewBackgroundStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisMaxExtent (UnionType)

sealed trait AxisMaxExtent 
   case class AxisMaxExtentAsNumber(value: JsNumber) extends AxisMaxExtent
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderLabelFont (UnionType)
/**
 * The font of the header label.
 **/
sealed trait HeaderLabelFont 
   case class HeaderLabelFontAsString(value: String) extends HeaderLabelFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigClear (UnionType)
/**
 * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
 * 
 * __Default value:__ `dblclick`.
 * 
 * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
 **/
sealed trait IntervalSelectionConfigClear 
   // Stream is defined elsewhere
   case class IntervalSelectionConfigClearAsString(value: String) extends IntervalSelectionConfigClear
   case class IntervalSelectionConfigClearAsBool(value: Boolean) extends IntervalSelectionConfigClear

////////////////////////////////////////////////////////////////////////

// LineConfigAspect (UnionType)

sealed trait LineConfigAspect 
   case class LineConfigAspectAsBool(value: Boolean) extends LineConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionStringFieldDefTextCondition (UnionType)
/**
 * A field definition or one or more value definition(s) with a parameter predicate.
 **/
sealed trait ValueDefWithConditionStringFieldDefTextCondition 
   // ConditionalStringFieldDef is defined elsewhere
   // ConditionalValueDefTextExprRef is defined elsewhere
   case class ValueDefWithConditionStringFieldDefTextConditionAsArrayOfConditionalValueDefTextExprRef(value: Seq[ConditionalValueDefTextExprRef]) extends ValueDefWithConditionStringFieldDefTextCondition

////////////////////////////////////////////////////////////////////////

// FieldOneOfPredicateOneOf (UnionType)
/**
 * A set of values that the `field`'s value should be a member of, for a data item included in the filtered data.
 **/
sealed trait FieldOneOfPredicateOneOf 
   case class FieldOneOfPredicateOneOfAsArrayOfString(value: Seq[String]) extends FieldOneOfPredicateOneOf
   case class FieldOneOfPredicateOneOfAsArrayOfNumber(value: Seq[JsNumber]) extends FieldOneOfPredicateOneOf
   case class FieldOneOfPredicateOneOfAsArrayOfBool(value: Seq[Boolean]) extends FieldOneOfPredicateOneOf
   case class FieldOneOfPredicateOneOfAsArrayOfDateTime(value: Seq[DateTime]) extends FieldOneOfPredicateOneOf

////////////////////////////////////////////////////////////////////////

// PaddingAsObject2 (StructType)

case class PaddingAsObject2(
  var `bottom` : Option[JsNumber] = None,
  var `left` : Option[JsNumber] = None,
  var `right` : Option[JsNumber] = None,
  var `top` : Option[JsNumber] = None
) extends Padding 
{  }
object PaddingAsObject2 {
  val definedFields = Set("bottom", "left", "right", "top") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleAngle (UnionType)

sealed trait AxisConfigTitleAngle 
   case class AxisConfigTitleAngleAsNumber(value: JsNumber) extends AxisConfigTitleAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// VariableParameter (StructType)

case class VariableParameter(
  /**
   * Binds the parameter to an external input element such as a slider, selection list or radio button group.
   **/
  var `bind` : Option[Binding] = None,
  /**
   * An expression for the value of the parameter. This expression may include other parameters, in which case the parameter will automatically update in response to upstream parameter changes.
   **/
  var `expr` : Option[String] = None,
  /**
   * A unique name for the variable parameter. Parameter names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or "$", or "_") and may not start with a digit. Reserved keywords that may not be used as parameter names are "datum", "event", "item", and "parent".
   **/
  var `name` : String,
  /**
   * The [initial value](http://vega.github.io/vega-lite/docs/value.html) of the parameter.
   * 
   * __Default value:__ `undefined`
   **/
  var `value` : Option[JsValue] = None
) extends UnitSpecWithFrameParamsElement with TopLevelLayerSpecParamsElement with TopLevelConcatSpecParamsElement with TopLevelHConcatSpecParamsElement with UnitSpecParamsElement with TopLevelFacetSpecParamsElement with ConfigParamsElement with FacetedUnitSpecParamsElement with TopLevelUnitSpecParamsElement with TopLevelVConcatSpecParamsElement with TopLevelRepeatSpecAsObject1ParamsElement with TopLevelRepeatSpecAsObject2ParamsElement 
{  }
object VariableParameter {
  val definedFields = Set("bind", "expr", "name", "value") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigSmooth (UnionType)

sealed trait BarConfigSmooth 
   case class BarConfigSmoothAsBool(value: Boolean) extends BarConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldEqualPredicate (StructType)

case class FieldEqualPredicate(
  /**
   * The value that the field should be equal to.
   **/
  var `equal` : FieldEqualPredicateEqual,
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldEqualPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldEqualPredicate {
  val definedFields = Set("equal", "field", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleLineHeight (UnionType)
/**
 * Line height in pixels for multi-line header title text or title text with `"line-top"` or `"line-bottom"` baseline.
 **/
sealed trait HeaderConfigTitleLineHeight 
   case class HeaderConfigTitleLineHeightAsNumber(value: JsNumber) extends HeaderConfigTitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfig (StructType)
/**
 * Line-Specific Config
 **/
case class LineConfig(
  /**
   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
   * 
   * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
   * 
   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
   * 
   * - If this property is `false`, no points would be automatically added to line or area marks.
   * 
   * __Default value:__ `false`.
   **/
  var `point` : Option[LineConfigPoint] = None,
  var `cornerRadiusBottomRight` : Option[LineConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[LineConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[LineConfigStrokeMiterLimit] = None,
  var `dir` : Option[LineConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[LineConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[LineConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[LineConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[LineConfigX] = None,
  var `dy` : Option[LineConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[LineConfigSize] = None,
  var `smooth` : Option[LineConfigSmooth] = None,
  var `url` : Option[LineConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[LineConfigY] = None,
  var `strokeOpacity` : Option[LineConfigStrokeOpacity] = None,
  var `ellipsis` : Option[LineConfigEllipsis] = None,
  var `description` : Option[LineConfigDescription] = None,
  var `angle` : Option[LineConfigAngle] = None,
  var `lineBreak` : Option[LineConfigLineBreak] = None,
  var `tension` : Option[LineConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[LineConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[LineConfigStroke] = None,
  var `strokeDashOffset` : Option[LineConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[LineConfigAlign] = None,
  var `ariaRole` : Option[LineConfigAriaRole] = None,
  var `strokeCap` : Option[LineConfigStrokeCap] = None,
  var `endAngle` : Option[LineConfigEndAngle] = None,
  var `strokeJoin` : Option[LineConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[LineConfigBaseline] = None,
  var `ariaRoleDescription` : Option[LineConfigAriaRoleDescription] = None,
  var `aspect` : Option[LineConfigAspect] = None,
  var `height` : Option[LineConfigHeight] = None,
  var `fontStyle` : Option[LineConfigFontStyle] = None,
  var `text` : Option[LineConfigText] = None,
  var `cornerRadius` : Option[LineConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[LineConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[LineConfigX2] = None,
  var `padAngle` : Option[LineConfigPadAngle] = None,
  var `cursor` : Option[LineConfigCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[LineConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[LineConfigStartAngle] = None,
  var `font` : Option[LineConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[LineConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[LineConfigInvalid] = None,
  var `lineHeight` : Option[LineConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[LineConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[LineConfigFill] = None,
  var `interpolate` : Option[LineConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[LineConfigTheta] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[LineConfigInnerRadius] = None,
  var `fontSize` : Option[LineConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[LineConfigY2] = None,
  var `shape` : Option[LineConfigShape] = None,
  var `aria` : Option[LineConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[LineConfigOpacity] = None,
  var `dx` : Option[LineConfigDx] = None,
  var `cornerRadiusBottomLeft` : Option[LineConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[LineConfigHref] = None,
  var `strokeDash` : Option[LineConfigStrokeDash] = None,
  var `strokeOffset` : Option[LineConfigStrokeOffset] = None,
  var `limit` : Option[LineConfigLimit] = None,
  var `width` : Option[LineConfigWidth] = None,
  var `fontWeight` : Option[LineConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[LineConfigBlend] = None,
  var `strokeWidth` : Option[LineConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[LineConfigTheta2] = None
) extends AnyMarkConfig 
{  }
object LineConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "point", "ariaRole", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "dx", "cornerRadiusBottomRight", "width", "cursor", "blend", "height", "theta2", "orient", "baseline", "stroke", "align", "shape", "lineHeight", "interpolate", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// AxisGridWidthAsNumber (ConstrainedType)
/**
 * The grid width, in pixels.
 * 
 * __Default value:__ `1`
 **/
case class AxisGridWidthAsNumber(value: JsNumber) extends AxisGridWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisLabelFontWeight (UnionType)

sealed trait AxisLabelFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelFontWeight is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefStringNullExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalParameterValueDefStringNullExprRefValue 
   case class ConditionalParameterValueDefStringNullExprRefValueAsString(value: String) extends ConditionalParameterValueDefStringNullExprRefValue
   case object ConditionalParameterValueDefStringNullExprRefValueAsNull extends ConditionalParameterValueDefStringNullExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleFontWeight (UnionType)

sealed trait AxisTitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelAlignAsObject2 (StructType)

case class ConditionalAxisLabelAlignAsObject2(
  var `condition` : ConditionalAxisLabelAlignAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisLabelAlign 
{  }
object ConditionalAxisLabelAlignAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelAlignAsObject1 (StructType)

case class ConditionalAxisLabelAlignAsObject1(
  var `condition` : ConditionalAxisLabelAlignAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Align] = None
) extends ConditionalAxisLabelAlign 
{  }
object ConditionalAxisLabelAlignAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainCap (UnionType)

sealed trait AxisConfigDomainCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayoutAlign (EnumType)

sealed trait LayoutAlign extends TopLevelConcatSpecAlign with TopLevelRepeatSpecAsObject1Align with FacetedUnitSpecAlign with FacetEncodingFieldDefAlign with LegendConfigGridAlign with FacetSpecAlign with TopLevelRepeatSpecAsObject2Align with TopLevelFacetSpecAlign with NonLayerRepeatSpecAlign with TopLevelUnitSpecAlign with LayerRepeatSpecAlign with ConcatSpecGenericSpecAlign { val payload: JsValue }
   case object LayoutAlignAll extends LayoutAlign { val payload = JsString("all") }
   case object LayoutAlignEach extends LayoutAlign { val payload = JsString("each") }
   case object LayoutAlignNone extends LayoutAlign { val payload = JsString("none") }

////////////////////////////////////////////////////////////////////////

// MarkDefX2Offset (UnionType)
/**
 * Offset for x2-position.
 **/
sealed trait MarkDefX2Offset 
   case class MarkDefX2OffsetAsNumber(value: JsNumber) extends MarkDefX2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigDescription (UnionType)

sealed trait TickConfigDescription 
   case class TickConfigDescriptionAsString(value: String) extends TickConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TimeIntervalStep (StructType)

case class TimeIntervalStep(
  var `interval` : TimeInterval,
  var `step` : JsNumber
) extends TickCount with ScaleNice with AxisTickCount with AxisConfigTickCount 
{  }
object TimeIntervalStep {
  val definedFields = Set("interval", "step") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1 (StructType)

case class TopLevelRepeatSpecAsObject1(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelRepeatSpecAsObject1ParamsElement]] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelRepeatSpecAsObject1Bounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets repeated.
   **/
  var `spec` : NonNormalizedSpec,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelRepeatSpecAsObject1Padding] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelRepeatSpecAsObject1Background] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[TopLevelRepeatSpecAsObject1Center] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[TopLevelRepeatSpecAsObject1Align] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
   **/
  var `repeat` : TopLevelRepeatSpecAsObject1Repeat,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelRepeatSpecAsObject1Title] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[TopLevelRepeatSpecAsObject1Spacing] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelRepeatSpecAsObject1Autosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelRepeatSpec 
{  }
object TopLevelRepeatSpecAsObject1 {
  val definedFields = Set("spacing", "padding", "config", "autosize", "datasets", "transform", "align", "$schema", "data", "repeat", "usermeta", "spec", "params", "description", "title", "resolve", "bounds", "background", "name", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTickColor (UnionType)
/**
 * The color of the axis's tick.
 * 
 * __Default value:__ `"gray"`
 **/
sealed trait AxisConfigTickColor 
   case object AxisConfigTickColorAsNull extends AxisConfigTickColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisPosition (UnionType)
/**
 * The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.
 * 
 * __Default value__: `0`
 **/
sealed trait AxisPosition 
   case class AxisPositionAsNumber(value: JsNumber) extends AxisPosition
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigZindex (UnionType)

sealed trait TitleConfigZindex 
   // TitleConfigZindexAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait StringFieldDefBin 
   case class StringFieldDefBinAsBool(value: Boolean) extends StringFieldDefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object StringFieldDefBinAsNull extends StringFieldDefBin

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2 (StructType)

case class TopLevelRepeatSpecAsObject2(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelRepeatSpecAsObject2ParamsElement]] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelRepeatSpecAsObject2Bounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets repeated.
   **/
  var `spec` : TopLevelRepeatSpecAsObject2Spec,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelRepeatSpecAsObject2Padding] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelRepeatSpecAsObject2Background] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[TopLevelRepeatSpecAsObject2Center] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[TopLevelRepeatSpecAsObject2Align] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
   **/
  var `repeat` : LayerRepeatMapping,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelRepeatSpecAsObject2Title] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[TopLevelRepeatSpecAsObject2Spacing] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelRepeatSpecAsObject2Autosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelRepeatSpec 
{  }
object TopLevelRepeatSpecAsObject2 {
  val definedFields = Set("spacing", "padding", "config", "autosize", "datasets", "transform", "align", "$schema", "data", "repeat", "usermeta", "spec", "params", "description", "title", "resolve", "bounds", "background", "name", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefGradientStringNullExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalParameterValueDefGradientStringNullExprRefValue 
   // Gradient is defined elsewhere
   case class ConditionalParameterValueDefGradientStringNullExprRefValueAsString(value: String) extends ConditionalParameterValueDefGradientStringNullExprRefValue
   case object ConditionalParameterValueDefGradientStringNullExprRefValueAsNull extends ConditionalParameterValueDefGradientStringNullExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeOffset (UnionType)

sealed trait AreaConfigStrokeOffset 
   case class AreaConfigStrokeOffsetAsNumber(value: JsNumber) extends AreaConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigUrl (UnionType)

sealed trait LineConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderLabelLimit (UnionType)
/**
 * The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
 * 
 * __Default value:__ `0`, indicating no limit
 **/
sealed trait HeaderLabelLimit 
   case class HeaderLabelLimitAsNumber(value: JsNumber) extends HeaderLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacity (StructType)

case class SharedEncodingFillOpacity(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingFillOpacityDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingFillOpacityBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingFillOpacityCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingFillOpacityBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingFillOpacityValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingFillOpacityTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingFillOpacityType] = None
)  
{  }
object SharedEncodingFillOpacity {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// SecondaryFieldDef (StructType)
/**
 * A field definition of a secondary channel that shares a scale with another primary channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.
 **/
case class SecondaryFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SecondaryFieldDefBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SecondaryFieldDefTimeUnit] = None
) extends FacetedEncodingYError with FacetedEncodingYError2 with EncodingXError with EncodingYError with EncodingXError2 with FacetedEncodingXError with FacetedEncodingXError2 with EncodingYError2 with Position2Def 
{  }
object SecondaryFieldDef {
  val definedFields = Set("bin", "timeUnit", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait FacetEncodingFieldDefBounds  { val payload: JsValue }
   case object FacetEncodingFieldDefBoundsFull extends FacetEncodingFieldDefBounds { val payload = JsString("full") }
   case object FacetEncodingFieldDefBoundsFlush extends FacetEncodingFieldDefBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringDatumDefTextBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionStringDatumDefTextBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleConfigRound (UnionType)
/**
 * If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid. (Only available for `x`, `y`, and `size` scales.)
 **/
sealed trait ScaleConfigRound 
   case class ScaleConfigRoundAsBool(value: Boolean) extends ScaleConfigRound
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitlePadding (UnionType)

sealed trait TitleParamsSubtitlePadding 
   case class TitleParamsSubtitlePaddingAsNumber(value: JsNumber) extends TitleParamsSubtitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class RectConfigFontSizeAsNumber(value: JsNumber) extends RectConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RectConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait RectConfigTooltip 
   case class RectConfigTooltipAsString(value: String) extends RectConfigTooltip
   case object RectConfigTooltipAsNull extends RectConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class RectConfigTooltipAsBool(value: Boolean) extends RectConfigTooltip
   case class RectConfigTooltipAsNumber(value: JsNumber) extends RectConfigTooltip

////////////////////////////////////////////////////////////////////////

// BarConfigLineHeight (UnionType)

sealed trait BarConfigLineHeight 
   case class BarConfigLineHeightAsNumber(value: JsNumber) extends BarConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerSpec (StructType)
/**
 * A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.
 **/
case class LayerSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of the geographic projection shared by underlying layers.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * The height of a visualization.
   * 
   * - For a plot with a continuous y-field, height should be a number.
   * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on height, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `height` : Option[LayerSpecHeight] = None,
  /**
   * A shared key-value mapping between encoding channels and definition of fields in the underlying layers.
   **/
  var `encoding` : Option[SharedEncoding] = None,
  /**
   * Layer or single view specifications to be layered.
   * 
   * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.
   **/
  var `layer` : Seq[LayerSpecLayerElement],
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[LayerSpecTitle] = None,
  /**
   * An object defining the view background's fill and stroke.
   * 
   * __Default value:__ none (transparent)
   **/
  var `view` : Option[ViewBackground] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None,
  /**
   * The width of a visualization.
   * 
   * - For a plot with a continuous x-field, width should be a number.
   * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on width, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `width` : Option[LayerSpecWidth] = None
) extends NonNormalizedSpec with FacetSpecSpec with TopLevelRepeatSpecAsObject2Spec with TopLevelFacetSpecSpec with TopLevelLayerSpecLayerElement with Spec with LayerRepeatSpecSpec with LayerSpecLayerElement 
{  }
object LayerSpec {
  val definedFields = Set("projection", "layer", "data", "encoding", "view", "width", "resolve", "height", "transform", "name", "description", "title") 
}

////////////////////////////////////////////////////////////////////////

// FacetedEncodingUrl (UnionType)
/**
 * The URL of an image mark.
 **/
sealed trait FacetedEncodingUrl 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefAlignNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefAlignNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Align] = None
) extends ConditionalPredicateValueDefAlignNullExprRef 
{  }
object ConditionalPredicateValueDefAlignNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefAlignNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefAlignNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefAlignNullExprRef 
{  }
object ConditionalPredicateValueDefAlignNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigAngle (UnionType)

sealed trait LineConfigAngle 
   // LineConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumberExprRef (StructType)

case class ConditionalPredicateValueDefNumberExprRef(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalPredicateValueDefNumberExprRefValue
) extends ConditionalValueDefNumberExprRef 
{  }
object ConditionalPredicateValueDefNumberExprRef {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleColor (UnionType)
/**
 * The color of the legend title, can be in hex color code or regular color name.
 **/
sealed trait LegendConfigTitleColor 
   case object LegendConfigTitleColorAsNull extends LegendConfigTitleColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigGridWidthAsNumber (ConstrainedType)
/**
 * The grid width, in pixels.
 * 
 * __Default value:__ `1`
 **/
case class AxisConfigGridWidthAsNumber(value: JsNumber) extends AxisConfigGridWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFontWeight (UnionType)

sealed trait OverlayMarkDefFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RowColumnEncodingFieldDefSort (UnionType)
/**
 * Sort order for the encoded field.
 * 
 * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
 * 
 * For discrete fields, `sort` can be one of the following:
 * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
 * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
 * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
 * - `null` indicating no sort.
 * 
 * __Default value:__ `"ascending"`
 * 
 * __Note:__ `null` is not supported for `row` and `column`.
 **/
sealed trait RowColumnEncodingFieldDefSort 
   // SortArray is defined elsewhere
   // SortOrder is defined elsewhere
   // EncodingSortField is defined elsewhere
   case object RowColumnEncodingFieldDefSortAsNull extends RowColumnEncodingFieldDefSort

////////////////////////////////////////////////////////////////////////

// SortByEncoding (StructType)

case class SortByEncoding(
  /**
   * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `"x"`, `"y"`)
   **/
  var `encoding` : SortByChannel,
  /**
   * The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
   **/
  var `order` : Option[SortOrder] = None
) extends Sort 
{  }
object SortByEncoding {
  val definedFields = Set("encoding", "order") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait OverlayMarkDefX2 
   case class OverlayMarkDefX2AsNumber(value: JsNumber) extends OverlayMarkDefX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpec (StructType)

case class TopLevelLayerSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of the geographic projection shared by underlying layers.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelLayerSpecBackground] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelLayerSpecParamsElement]] = None,
  /**
   * The height of a visualization.
   * 
   * - For a plot with a continuous y-field, height should be a number.
   * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on height, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `height` : Option[TopLevelLayerSpecHeight] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * A shared key-value mapping between encoding channels and definition of fields in the underlying layers.
   **/
  var `encoding` : Option[SharedEncoding] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Layer or single view specifications to be layered.
   * 
   * __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.
   **/
  var `layer` : Seq[TopLevelLayerSpecLayerElement],
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelLayerSpecPadding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelLayerSpecTitle] = None,
  /**
   * An object defining the view background's fill and stroke.
   * 
   * __Default value:__ none (transparent)
   **/
  var `view` : Option[ViewBackground] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelLayerSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None,
  /**
   * The width of a visualization.
   * 
   * - For a plot with a continuous x-field, width should be a number.
   * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on width, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `width` : Option[TopLevelLayerSpecWidth] = None
) extends TopLevelSpec 
{  }
object TopLevelLayerSpec {
  val definedFields = Set("projection", "layer", "data", "padding", "encoding", "config", "view", "usermeta", "autosize", "width", "resolve", "height", "datasets", "transform", "$schema", "params", "description", "title", "background", "name") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefTextExprRef (StructType)

case class ConditionalPredicateValueDefTextExprRef(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalPredicateValueDefTextExprRefValue
) extends ConditionalValueDefTextExprRef 
{  }
object ConditionalPredicateValueDefTextExprRef {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefRadiusOffset (UnionType)
/**
 * Offset for radius.
 **/
sealed trait OverlayMarkDefRadiusOffset 
   case class OverlayMarkDefRadiusOffsetAsNumber(value: JsNumber) extends OverlayMarkDefRadiusOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeCap (UnionType)

sealed trait ViewBackgroundStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFontWeight (UnionType)

sealed trait AreaConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigAriaRoleDescription (UnionType)

sealed trait MarkConfigAriaRoleDescription 
   case class MarkConfigAriaRoleDescriptionAsString(value: String) extends MarkConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FontWeight (EnumType)
/**
 * The font weight. This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
 **/
sealed trait FontWeight extends AxisConfigTitleFontWeight with TickConfigFontWeight with RectConfigFontWeight with HeaderTitleFontWeight with LineConfigFontWeight with MarkConfigFontWeight with HeaderConfigLabelFontWeight with TitleParamsFontWeight with AreaConfigFontWeight with BarConfigFontWeight with LegendConfigTitleFontWeight with LegendConfigLabelFontWeight with MarkDefFontWeight with TitleConfigFontWeight with AxisLabelFontWeight with TitleConfigSubtitleFontWeight with HeaderConfigTitleFontWeight with TitleParamsSubtitleFontWeight with AxisConfigLabelFontWeight with AxisTitleFontWeight with OverlayMarkDefFontWeight with HeaderLabelFontWeight { val payload: JsValue }
   case object FontWeightNormal extends FontWeight { val payload = JsString("normal") }
   case object FontWeightBold extends FontWeight { val payload = JsString("bold") }
   case object FontWeightLighter extends FontWeight { val payload = JsString("lighter") }
   case object FontWeightBolder extends FontWeight { val payload = JsString("bolder") }
   case object FontWeight1000 extends FontWeight { val payload = JsNumber(BigDecimal(100.0)) }
   case object FontWeight2000 extends FontWeight { val payload = JsNumber(BigDecimal(200.0)) }
   case object FontWeight3000 extends FontWeight { val payload = JsNumber(BigDecimal(300.0)) }
   case object FontWeight4000 extends FontWeight { val payload = JsNumber(BigDecimal(400.0)) }
   case object FontWeight5000 extends FontWeight { val payload = JsNumber(BigDecimal(500.0)) }
   case object FontWeight6000 extends FontWeight { val payload = JsNumber(BigDecimal(600.0)) }
   case object FontWeight7000 extends FontWeight { val payload = JsNumber(BigDecimal(700.0)) }
   case object FontWeight8000 extends FontWeight { val payload = JsNumber(BigDecimal(800.0)) }
   case object FontWeight9000 extends FontWeight { val payload = JsNumber(BigDecimal(900.0)) }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFontStyle (UnionType)

sealed trait AxisConfigLabelFontStyle 
   case class AxisConfigLabelFontStyleAsString(value: String) extends AxisConfigLabelFontStyle
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelFontStyle is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1 (StructType)

case class ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[TypeForShape] = None
) extends ConditionalParameterMarkPropFieldOrDatumDefTypeForShape 
{  }
object ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1 {
  val definedFields = Set("bin", "type", "bandPosition", "param", "legend", "empty", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2 (StructType)

case class ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ConditionalParameterMarkPropFieldOrDatumDefTypeForShape 
{  }
object ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2 {
  val definedFields = Set("type", "scale", "datum", "bandPosition", "param", "legend", "empty", "title") 
}

////////////////////////////////////////////////////////////////////////

// Field (UnionType)
/**
 * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
 * 
 * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
 * 
 * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
 **/
sealed trait Field 
   case class FieldAsString(value: String) extends Field
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait MarkDefAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DateTimeSeconds (ConstrainedType)
/**
 * Integer value representing the second segment (0-59) of a time value
 **/
case class DateTimeSeconds(value: JsNumber) 
{ assert(value.value <= 60)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait OverlayMarkDefOpacity 
   case class OverlayMarkDefOpacityAsNumber(value: JsNumber) extends OverlayMarkDefOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// JsonDataFormat (StructType)

case class JsonDataFormat(
  /**
   * If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)). For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
   * 
   * For `"date"`, we parse data based using JavaScript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: "date:'%m%d%Y'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:'%m%d%Y'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)
   **/
  var `parse` : Option[Map[String,ParseValue]] = None,
  /**
   * The JSON property containing the desired data. This parameter can be used when the loaded JSON file may have surrounding structure or meta-data. For example `"property": "values.features"` is equivalent to retrieving `json.values.features` from the loaded JSON object.
   **/
  var `property` : Option[String] = None,
  /**
   * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
   * 
   * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
   **/
  var `type` : Option[JsonDataFormatType] = None
) extends DataFormat 
{  }
object JsonDataFormat {
  val definedFields = Set("parse", "property", "type") 
}

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait LayerRepeatSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigDescription (UnionType)

sealed trait AxisConfigDescription 
   case class AxisConfigDescriptionAsString(value: String) extends AxisConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleLineHeight (UnionType)

sealed trait TitleConfigSubtitleLineHeight 
   case class TitleConfigSubtitleLineHeightAsNumber(value: JsNumber) extends TitleConfigSubtitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait FacetedUnitSpecBounds  { val payload: JsValue }
   case object FacetedUnitSpecBoundsFull extends FacetedUnitSpecBounds { val payload = JsString("full") }
   case object FacetedUnitSpecBoundsFlush extends FacetedUnitSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingColorBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ViewBackgroundFillOpacity (UnionType)

sealed trait ViewBackgroundFillOpacity 
   // ViewBackgroundFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleAngle (ConstrainedType)
/**
 * The rotation angle of the header title.
 * 
 * __Default value:__ `0`.
 **/
case class HeaderTitleAngle(value: JsNumber) 
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// TopoDataFormatType (ConstantType)
/**
 * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
 * 
 * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
 **/
case class TopoDataFormatType() 

////////////////////////////////////////////////////////////////////////

// ScaleConfigBandPaddingOuter (ConstrainedType)
/**
 * Default outer padding for `x` and `y` band scales.
 * 
 * __Default value:__ `paddingInner/2` (which makes _width/height = number of unique values * step_)
 **/
sealed trait ScaleConfigBandPaddingOuter 
   case class ScaleConfigBandPaddingOuterAsNumber(value: JsNumber) extends ScaleConfigBandPaddingOuter
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCornerRadius (UnionType)

sealed trait MarkConfigCornerRadius 
   case class MarkConfigCornerRadiusAsNumber(value: JsNumber) extends MarkConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait OverlayMarkDefY2 
   case class OverlayMarkDefY2AsNumber(value: JsNumber) extends OverlayMarkDefY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionScale (UnionType)
/**
 * The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.
 **/
sealed trait ProjectionScale 
   case class ProjectionScaleAsNumber(value: JsNumber) extends ProjectionScale
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBarDefTicks (UnionType)

sealed trait ErrorBarDefTicks 
   case class ErrorBarDefTicksAsBool(value: Boolean) extends ErrorBarDefTicks
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeJoin (UnionType)

sealed trait ViewConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingHref (UnionType)
/**
 * A URL to load upon mouse click.
 **/
sealed trait FacetedEncodingHref 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelFacetSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffsetTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingXOffsetTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeCap (UnionType)

sealed trait MarkDefStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait OverlayMarkDefSize 
   case class OverlayMarkDefSizeAsNumber(value: JsNumber) extends OverlayMarkDefSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingStrokeDashBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefStringNull (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionDatumDefStringNull(
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[FieldOrDatumDefWithConditionDatumDefStringNullDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionDatumDefStringNullBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionDatumDefStringNullCondition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ShapeDef 
{  }
object FieldOrDatumDefWithConditionDatumDefStringNull {
  val definedFields = Set("type", "datum", "bandPosition", "condition", "title") 
}

////////////////////////////////////////////////////////////////////////

// AxisTitleAnchor (UnionType)

sealed trait AxisTitleAnchor 
   // TitleAnchor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingKeyBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingKeyBin 
   case class SharedEncodingKeyBinAsBool(value: Boolean) extends SharedEncodingKeyBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingKeyBinAsNull extends SharedEncodingKeyBin

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeCap (UnionType)

sealed trait ViewConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigLimit (UnionType)

sealed trait BarConfigLimit 
   case class BarConfigLimitAsNumber(value: JsNumber) extends BarConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait OverlayMarkDefShape 
   case class OverlayMarkDefShapeAsString(value: String) extends OverlayMarkDefShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBandDefTension (ConstrainedType)
/**
 * The tension parameter for the interpolation type of the error band.
 **/
case class ErrorBandDefTension(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderTitleFontSize (ConstrainedType)
/**
 * Font size of the header title.
 **/
sealed trait HeaderTitleFontSize 
   case class HeaderTitleFontSizeAsNumber(value: JsNumber) extends HeaderTitleFontSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigLineBreak (UnionType)

sealed trait TickConfigLineBreak 
   case class TickConfigLineBreakAsString(value: String) extends TickConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigFontStyle (UnionType)

sealed trait MarkConfigFontStyle 
   case class MarkConfigFontStyleAsString(value: String) extends MarkConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFont (UnionType)

sealed trait AreaConfigFont 
   case class AreaConfigFontAsString(value: String) extends AreaConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldDefWithoutScaleBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FieldDefWithoutScaleBin 
   case class FieldDefWithoutScaleBinAsBool(value: Boolean) extends FieldDefWithoutScaleBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object FieldDefWithoutScaleBinAsNull extends FieldDefWithoutScaleBin

////////////////////////////////////////////////////////////////////////

// PointSelectionConfig (StructType)

case class PointSelectionConfig(
  /**
   * When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.
   * 
   * __Default value:__ `false`, which means that data values must be interacted with directly (e.g., clicked on) to be added to the selection.
   * 
   * __See also:__ [`nearest` examples](https://vega.github.io/vega-lite/docs/selection.html#nearest) documentation.
   **/
  var `nearest` : Option[Boolean] = None,
  /**
   * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
   * 
   * __Default value:__ `dblclick`.
   * 
   * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
   **/
  var `clear` : Option[PointSelectionConfigClear] = None,
  /**
   * Controls whether data values should be toggled (inserted or removed from a point selection) or only ever inserted into multi selections.
   * 
   * One of:
   * - `true` -- the default behavior, which corresponds to `"event.shiftKey"`.  As a result, data values are toggled when the user interacts with the shift-key pressed.
   * - `false` -- disables toggling behaviour; as the user interacts, data values are only inserted into the multi selection and never removed.
   * - A [Vega expression](https://vega.github.io/vega/docs/expressions/) which is re-evaluated as the user interacts. If the expression evaluates to `true`, the data value is toggled into or out of the multi selection. If the expression evaluates to `false`, the multi selection is first clear, and the data value is then inserted. For example, setting the value to the Vega expression `"true"` will toggle data values without the user pressing the shift-key.
   * 
   * __Default value:__ `true`
   * 
   * __See also:__ [`toggle` examples](https://vega.github.io/vega-lite/docs/selection.html#toggle) in the documentation.
   **/
  var `toggle` : Option[PointSelectionConfigToggle] = None,
  /**
   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
   * 
   * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
   **/
  var `on` : Option[PointSelectionConfigOn] = None,
  /**
   * An array of field names whose values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `fields` : Option[Seq[String]] = None,
  /**
   * With layered and multi-view displays, a strategy that determines how selections' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.
   * 
   * One of:
   * - `"global"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.
   * - `"union"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.
   * - `"intersect"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.
   * 
   * __Default value:__ `global`.
   * 
   * __See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation.
   **/
  var `resolve` : Option[SelectionResolution] = None,
  /**
   * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
   * 
   * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
   * - `"interval"` -- to select a continuous range of data values on `drag`.
   **/
  var `type` : PointSelectionConfigType,
  /**
   * An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `encodings` : Option[Seq[SingleDefUnitChannel]] = None
) extends SelectionParameterSelect with TopLevelSelectionParameterSelect 
{  }
object PointSelectionConfig {
  val definedFields = Set("clear", "type", "nearest", "encodings", "fields", "on", "resolve", "toggle") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelLayerSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientThicknessAsNumber (ConstrainedType)
/**
 * The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.
 * 
 * __Default value:__ `16`.
 **/
case class LegendConfigGradientThicknessAsNumber(value: JsNumber) extends LegendConfigGradientThickness
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait TopLevelConcatSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingXType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigRectBandPaddingInner (ConstrainedType)
/**
 * Default inner padding for `x` and `y` band-ordinal scales of `"rect"` marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait ScaleConfigRectBandPaddingInner 
   case class ScaleConfigRectBandPaddingInnerAsNumber(value: JsNumber) extends ScaleConfigRectBandPaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeScheme (UnionType)

sealed trait RangeScheme extends RangeConfigCategory with RangeConfigDiverging with RangeConfigRamp with RangeConfigHeatmap with RangeConfigOrdinal with RangeConfigOptional
   // RangeEnum is defined elsewhere
   case class RangeSchemeAsArrayOfRangeRawElement(value: Seq[RangeRawElement]) extends RangeScheme
   // RangeSchemeAsObject3 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin 
   case class FieldOrDatumDefWithConditionMarkPropFieldDefNumberBinAsBool(value: Boolean) extends FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin
   // BinParams is defined elsewhere
   case object FieldOrDatumDefWithConditionMarkPropFieldDefNumberBinAsNull extends FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin

////////////////////////////////////////////////////////////////////////

// MarkConfigFont (UnionType)

sealed trait MarkConfigFont 
   case class MarkConfigFontAsString(value: String) extends MarkConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Cyclical (EnumType)

sealed trait Cyclical extends ColorScheme { val payload: JsValue }
   case object CyclicalRainbow extends Cyclical { val payload = JsString("rainbow") }
   case object CyclicalSinebow extends Cyclical { val payload = JsString("sinebow") }

////////////////////////////////////////////////////////////////////////

// UnitSpec (StructType)
/**
 * A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types).
 **/
case class UnitSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks and to `latitude` and `"longitude"` channels for other marks.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.
   **/
  var `params` : Option[Seq[UnitSpecParamsElement]] = None,
  /**
   * A key-value mapping between encoding channels and definition of fields.
   **/
  var `encoding` : Option[Encoding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[UnitSpecTitle] = None,
  /**
   * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   **/
  var `mark` : AnyMark,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelRepeatSpecAsObject2Spec with TopLevelLayerSpecLayerElement with LayerRepeatSpecSpec with LayerSpecLayerElement 
{  }
object UnitSpec {
  val definedFields = Set("projection", "data", "encoding", "mark", "transform", "name", "params", "description", "title") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Spacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait TopLevelRepeatSpecAsObject2Spacing 
   case class TopLevelRepeatSpecAsObject2SpacingAsNumber(value: JsNumber) extends TopLevelRepeatSpecAsObject2Spacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigBandPaddingInner (ConstrainedType)
/**
 * Default inner padding for `x` and `y` band scales.
 * 
 * __Default value:__
 * - `nestedOffsetPaddingInner` for x/y scales with nested x/y offset scales.
 * - `barBandPaddingInner` for bar marks (`0.1` by default)
 * - `rectBandPaddingInner` for rect and other marks (`0` by default)
 **/
sealed trait ScaleConfigBandPaddingInner 
   case class ScaleConfigBandPaddingInnerAsNumber(value: JsNumber) extends ScaleConfigBandPaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecBackground (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelUnitSpecBackground 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NumericMarkPropDef (UnionType)
/**
 * Rotation angle of point and text marks.
 **/
sealed trait NumericMarkPropDef 
   // FieldOrDatumDefWithConditionMarkPropFieldDefNumber is defined elsewhere
   // FieldOrDatumDefWithConditionDatumDefNumber is defined elsewhere
   // ValueDefWithConditionMarkPropFieldOrDatumDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigLineBreak (UnionType)

sealed trait RectConfigLineBreak 
   case class RectConfigLineBreakAsString(value: String) extends RectConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberArrayAsObject2 (StructType)

case class ConditionalAxisNumberArrayAsObject2(
  var `condition` : ConditionalAxisNumberArrayAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisNumberArray 
{  }
object ConditionalAxisNumberArrayAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// ProjectionTranslate (UnionType)
/**
 * The projection’s translation offset as a two-element array `[tx, ty]`.
 **/
sealed trait ProjectionTranslate 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingTextValue 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Align (EnumType)

sealed trait Align extends RectConfigAlign with AxisTitleAlign with LineConfigAlign with BarConfigAlign with TickConfigAlign with HeaderTitleAlign with HeaderLabelAlign with OverlayMarkDefAlign with LegendConfigTitleAlign with AxisConfigTitleAlign with HeaderConfigLabelAlign with MarkDefAlign with HeaderConfigTitleAlign with AreaConfigAlign with LegendConfigLabelAlign with AxisConfigLabelAlign with AxisLabelAlign with MarkConfigAlign { val payload: JsValue }
   case object AlignLeft extends Align { val payload = JsString("left") }
   case object AlignCenter extends Align { val payload = JsString("center") }
   case object AlignRight extends Align { val payload = JsString("right") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffset (StructType)

case class SharedEncodingXOffset(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingXOffsetDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingXOffsetBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingXOffsetBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingXOffsetTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingXOffsetType] = None
)  
{  }
object SharedEncodingXOffset {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecLayerElement (UnionType)

sealed trait TopLevelLayerSpecLayerElement 
   // LayerSpec is defined elsewhere
   // UnitSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Padding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelRepeatSpecAsObject2Padding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFontSize (UnionType)

sealed trait TickConfigFontSize 
   // TickConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleAlign (UnionType)
/**
 * Horizontal text alignment (to the anchor) of header titles.
 **/
sealed trait HeaderTitleAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDefBaseDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait PositionDatumDefBaseDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStartAngle (UnionType)

sealed trait TickConfigStartAngle 
   case class TickConfigStartAngleAsNumber(value: JsNumber) extends TickConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberArrayAsObject1 (StructType)

case class ConditionalAxisNumberArrayAsObject1(
  var `condition` : ConditionalAxisNumberArrayAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Seq[JsNumber]] = None
) extends ConditionalAxisNumberArray 
{  }
object ConditionalAxisNumberArrayAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigEllipsis (UnionType)

sealed trait AreaConfigEllipsis 
   case class AreaConfigEllipsisAsString(value: String) extends AreaConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SelectionConfig (StructType)
/**
 * An object hash for defining default properties for each type of selections.
 **/
case class SelectionConfig(
  /**
   * The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations for an interval selection definition (except `type`) may be specified here.
   * 
   * For instance, setting `interval` to `{"translate": false}` disables the ability to move interval selections by default.
   **/
  var `interval` : Option[IntervalSelectionConfigWithoutType] = None,
  /**
   * The default definition for a [`point`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations  for a point selection definition (except `type`) may be specified here.
   * 
   * For instance, setting `point` to `{"on": "dblclick"}` populates point selections on double-click by default.
   **/
  var `point` : Option[PointSelectionConfigWithoutType] = None
)  
{  }
object SelectionConfig {
  val definedFields = Set("interval", "point") 
}

////////////////////////////////////////////////////////////////////////

// BoxPlotDefColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait BoxPlotDefColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LocalMultiTimeUnit (EnumType)

sealed trait LocalMultiTimeUnit extends MultiTimeUnit { val payload: JsValue }
   case object LocalMultiTimeUnitYearquarter extends LocalMultiTimeUnit { val payload = JsString("yearquarter") }
   case object LocalMultiTimeUnitYearquartermonth extends LocalMultiTimeUnit { val payload = JsString("yearquartermonth") }
   case object LocalMultiTimeUnitYearmonth extends LocalMultiTimeUnit { val payload = JsString("yearmonth") }
   case object LocalMultiTimeUnitYearmonthdate extends LocalMultiTimeUnit { val payload = JsString("yearmonthdate") }
   case object LocalMultiTimeUnitYearmonthdatehours extends LocalMultiTimeUnit { val payload = JsString("yearmonthdatehours") }
   case object LocalMultiTimeUnitYearmonthdatehoursminutes extends LocalMultiTimeUnit { val payload = JsString("yearmonthdatehoursminutes") }
   case object LocalMultiTimeUnitYearmonthdatehoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("yearmonthdatehoursminutesseconds") }
   case object LocalMultiTimeUnitYearweek extends LocalMultiTimeUnit { val payload = JsString("yearweek") }
   case object LocalMultiTimeUnitYearweekday extends LocalMultiTimeUnit { val payload = JsString("yearweekday") }
   case object LocalMultiTimeUnitYearweekdayhours extends LocalMultiTimeUnit { val payload = JsString("yearweekdayhours") }
   case object LocalMultiTimeUnitYearweekdayhoursminutes extends LocalMultiTimeUnit { val payload = JsString("yearweekdayhoursminutes") }
   case object LocalMultiTimeUnitYearweekdayhoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("yearweekdayhoursminutesseconds") }
   case object LocalMultiTimeUnitYeardayofyear extends LocalMultiTimeUnit { val payload = JsString("yeardayofyear") }
   case object LocalMultiTimeUnitQuartermonth extends LocalMultiTimeUnit { val payload = JsString("quartermonth") }
   case object LocalMultiTimeUnitMonthdate extends LocalMultiTimeUnit { val payload = JsString("monthdate") }
   case object LocalMultiTimeUnitMonthdatehours extends LocalMultiTimeUnit { val payload = JsString("monthdatehours") }
   case object LocalMultiTimeUnitMonthdatehoursminutes extends LocalMultiTimeUnit { val payload = JsString("monthdatehoursminutes") }
   case object LocalMultiTimeUnitMonthdatehoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("monthdatehoursminutesseconds") }
   case object LocalMultiTimeUnitWeekday extends LocalMultiTimeUnit { val payload = JsString("weekday") }
   case object LocalMultiTimeUnitWeeksdayhours extends LocalMultiTimeUnit { val payload = JsString("weeksdayhours") }
   case object LocalMultiTimeUnitWeekdayhoursminutes extends LocalMultiTimeUnit { val payload = JsString("weekdayhoursminutes") }
   case object LocalMultiTimeUnitWeekdayhoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("weekdayhoursminutesseconds") }
   case object LocalMultiTimeUnitDayhours extends LocalMultiTimeUnit { val payload = JsString("dayhours") }
   case object LocalMultiTimeUnitDayhoursminutes extends LocalMultiTimeUnit { val payload = JsString("dayhoursminutes") }
   case object LocalMultiTimeUnitDayhoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("dayhoursminutesseconds") }
   case object LocalMultiTimeUnitHoursminutes extends LocalMultiTimeUnit { val payload = JsString("hoursminutes") }
   case object LocalMultiTimeUnitHoursminutesseconds extends LocalMultiTimeUnit { val payload = JsString("hoursminutesseconds") }
   case object LocalMultiTimeUnitMinutesseconds extends LocalMultiTimeUnit { val payload = JsString("minutesseconds") }
   case object LocalMultiTimeUnitSecondsmilliseconds extends LocalMultiTimeUnit { val payload = JsString("secondsmilliseconds") }

////////////////////////////////////////////////////////////////////////

// LineBottom (ConstantType)

case class LineBottom() extends TextBaseline

////////////////////////////////////////////////////////////////////////

// AxisConfigTickSizeAsNumber (ConstrainedType)
/**
 * The size in pixels of axis ticks.
 * 
 * __Default value:__ `5`
 **/
case class AxisConfigTickSizeAsNumber(value: JsNumber) extends AxisConfigTickSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigAriaRole (UnionType)

sealed trait AreaConfigAriaRole 
   case class AreaConfigAriaRoleAsString(value: String) extends AreaConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait HeaderConfigFormat 
   case class HeaderConfigFormatAsString(value: String) extends HeaderConfigFormat
   case class HeaderConfigFormatAsDictOfAny(value: Map[String,JsValue]) extends HeaderConfigFormat

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject1 (StructType)

case class ConditionalPredicateMarkPropFieldOrDatumDefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalPredicateMarkPropFieldOrDatumDefAsObject1BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalPredicateMarkPropFieldOrDatumDefAsObject1TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends ConditionalPredicateMarkPropFieldOrDatumDef 
{  }
object ConditionalPredicateMarkPropFieldOrDatumDefAsObject1 {
  val definedFields = Set("bin", "type", "test", "bandPosition", "legend", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefAngle (UnionType)

sealed trait MarkDefAngle 
   // MarkDefAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject2 (StructType)

case class ConditionalPredicateMarkPropFieldOrDatumDefAsObject2(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalPredicateMarkPropFieldOrDatumDefAsObject2BandPosition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ConditionalPredicateMarkPropFieldOrDatumDef 
{  }
object ConditionalPredicateMarkPropFieldOrDatumDefAsObject2 {
  val definedFields = Set("type", "test", "scale", "datum", "bandPosition", "legend", "title") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingOpacityBin 
   case class SharedEncodingOpacityBinAsBool(value: Boolean) extends SharedEncodingOpacityBin
   // BinParams is defined elsewhere
   case object SharedEncodingOpacityBinAsNull extends SharedEncodingOpacityBin

////////////////////////////////////////////////////////////////////////

// LookupSelection (StructType)

case class LookupSelection(
  /**
   * Fields in foreign data or selection to lookup. If not specified, the entire object is queried.
   **/
  var `fields` : Option[Seq[String]] = None,
  /**
   * Key in data to lookup.
   **/
  var `key` : String,
  /**
   * Selection parameter name to look up.
   **/
  var `param` : String
) extends LookupTransformFrom 
{  }
object LookupSelection {
  val definedFields = Set("fields", "key", "param") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitudeTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingLatitudeTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNull (ConstrainedType)

case class ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNull(
  /**
   * A field definition or one or more value definition(s) with a parameter predicate.
   **/
  var `condition` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue] = None
) extends ColorDef 
{ assert(value.size >= 1)
  assert(value.size <= 1) }
object ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNull {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigBlend (UnionType)

sealed trait RectConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFontSize (UnionType)

sealed trait BarConfigFontSize 
   // BarConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigDir (UnionType)

sealed trait LineConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition (UnionType)
/**
 * A field definition or one or more value definition(s) with a parameter predicate.
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition 
   // ConditionalMarkPropFieldOrDatumDefTypeForShape is defined elsewhere
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition

////////////////////////////////////////////////////////////////////////

// RegressionTransform (StructType)

case class RegressionTransform(
  /**
   * The functional form of the regression model. One of `"linear"`, `"log"`, `"exp"`, `"pow"`, `"quad"`, or `"poly"`.
   * 
   * __Default value:__ `"linear"`
   **/
  var `method` : Option[RegressionTransformMethod] = None,
  /**
   * A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.
   **/
  var `extent` : Option[RegressionTransformExtent] = None,
  /**
   * A boolean flag indicating if the transform should return the regression model parameters (one object per group), rather than trend line points. The resulting objects include a `coef` array of fitted coefficient values (starting with the intercept term and then including terms of increasing order) and an `rSquared` value (indicating the total variance explained by the model).
   * 
   * __Default value:__ `false`
   **/
  var `params` : Option[Boolean] = None,
  /**
   * The output field names for the smoothed points generated by the regression transform.
   * 
   * __Default value:__ The field names of the input x and y values.
   **/
  var `as` : Option[RegressionTransformAs] = None,
  /**
   * The data field of the independent variable to use a predictor.
   **/
  var `on` : String,
  /**
   * The polynomial order (number of coefficients) for the 'poly' method.
   * 
   * __Default value:__ `3`
   **/
  var `order` : Option[JsNumber] = None,
  /**
   * The data field of the dependent variable to predict.
   **/
  var `regression` : String,
  /**
   * The data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None
) extends Transform 
{  }
object RegressionTransform {
  val definedFields = Set("regression", "extent", "method", "groupby", "as", "params", "order", "on") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffset (StructType)

case class SharedEncodingYOffset(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingYOffsetDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingYOffsetBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingYOffsetBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingYOffsetTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingYOffsetType] = None
)  
{  }
object SharedEncodingYOffset {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsLimitAsNumber (ConstrainedType)
/**
 * The maximum allowed length in pixels of title and subtitle text.
 **/
case class TitleParamsLimitAsNumber(value: JsNumber) extends TitleParamsLimit
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait TickConfigInnerRadius 
   case class TickConfigInnerRadiusAsNumber(value: JsNumber) extends TickConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleFont (UnionType)

sealed trait AxisConfigTitleFont 
   case class AxisConfigTitleFontAsString(value: String) extends AxisConfigTitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DatumDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class DatumDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait NonLayerRepeatSpecBounds  { val payload: JsValue }
   case object NonLayerRepeatSpecBoundsFull extends NonLayerRepeatSpecBounds { val payload = JsString("full") }
   case object NonLayerRepeatSpecBoundsFlush extends NonLayerRepeatSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// RectConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait RectConfigShape 
   case class RectConfigShapeAsString(value: String) extends RectConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class TickConfigFontSizeAsNumber(value: JsNumber) extends TickConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkConfigFontWeight (UnionType)

sealed trait MarkConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait LineConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingFillOpacityDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigLimit (UnionType)

sealed trait MarkConfigLimit 
   case class MarkConfigLimitAsNumber(value: JsNumber) extends MarkConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkConfigOuterRadius 
   case class MarkConfigOuterRadiusAsNumber(value: JsNumber) extends MarkConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingLatitude2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpec (StructType)
/**
 * Base interface for a generalized concatenation specification.
 **/
case class ConcatSpecGenericSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[ConcatSpecGenericSpecCenter] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * A list of views to be concatenated.
   **/
  var `concat` : Seq[Spec],
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[ConcatSpecGenericSpecBounds] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[ConcatSpecGenericSpecTitle] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[ConcatSpecGenericSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[ConcatSpecGenericSpecSpacing] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends NonNormalizedSpec with Spec 
{  }
object ConcatSpecGenericSpec {
  val definedFields = Set("spacing", "data", "transform", "name", "align", "concat", "description", "title", "resolve", "bounds", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// AxisTitleFont (UnionType)

sealed trait AxisTitleFont 
   case class AxisTitleFontAsString(value: String) extends AxisTitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOneOfPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldOneOfPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigColor (UnionType)
/**
 * Text color for title text.
 **/
sealed trait TitleConfigColor 
   case object TitleConfigColorAsNull extends TitleConfigColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingOrder (UnionType)
/**
 * Order of the marks.
 * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
 * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
 * - Otherwise, this `order` channel encodes layer order of the marks.
 * 
 * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
 **/
sealed trait SharedEncodingOrder 
   // OrderFieldDef is defined elsewhere
   case class SharedEncodingOrderAsArrayOfOrderFieldDef(value: Seq[OrderFieldDef]) extends SharedEncodingOrder
   // OrderValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SingleTimeUnit (UnionType)

sealed trait SingleTimeUnit extends TimeUnit
   // LocalSingleTimeUnit is defined elsewhere
   // UtcSingleTimeUnit is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStroke (StructType)

case class SharedEncodingStroke(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingStrokeDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingStrokeBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingStrokeCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingStrokeBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingStrokeValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingStrokeTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingStrokeType] = None
)  
{  }
object SharedEncodingStroke {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeMiterLimit (UnionType)

sealed trait BarConfigStrokeMiterLimit 
   case class BarConfigStrokeMiterLimitAsNumber(value: JsNumber) extends BarConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMaxBandSize (ConstrainedType)
/**
 * The default max value for mapping quantitative fields to bar's size/bandSize.
 * 
 * If undefined (default), we will use the axis's size (width or height) - 1.
 **/
case class ScaleConfigMaxBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleConfigOrient (UnionType)

sealed trait TitleConfigOrient 
   // TitleOrient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFontWeight (UnionType)

sealed trait RectConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMaxSize (ConstrainedType)
/**
 * Default max value for point size scale.
 **/
case class ScaleConfigMaxSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitlePadding (UnionType)
/**
 * The padding, in pixel, between facet header's title and the label.
 * 
 * __Default value:__ `10`
 **/
sealed trait HeaderConfigTitlePadding 
   case class HeaderConfigTitlePaddingAsNumber(value: JsNumber) extends HeaderConfigTitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TextBaseline (UnionType)

sealed trait TextBaseline extends LineConfigBaseline with LegendConfigTitleBaseline with LegendConfigLabelBaseline with HeaderLabelBaseline with OverlayMarkDefBaseline with TickConfigBaseline with HeaderConfigLabelBaseline with AreaConfigBaseline with MarkDefBaseline with HeaderTitleBaseline with HeaderConfigTitleBaseline with AxisConfigLabelBaseline with BarConfigBaseline with AxisLabelBaseline with MarkConfigBaseline with AxisConfigTitleBaseline with AxisTitleBaseline with RectConfigBaseline
   // Alphabetic is defined elsewhere
   // Baseline is defined elsewhere
   // LineTop is defined elsewhere
   // LineBottom is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingYError2 (UnionType)
/**
 * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait FacetedEncodingYError2 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingAngleBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait LineConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object LineConfigFillAsNull extends LineConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingXBin 
   case class SharedEncodingXBinAsBool(value: Boolean) extends SharedEncodingXBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingXBinAsNull extends SharedEncodingXBin

////////////////////////////////////////////////////////////////////////

// OrderValueDefCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait OrderValueDefCondition 
   // ConditionalValueDefNumber is defined elsewhere
   case class OrderValueDefConditionAsArrayOfConditionalValueDefNumber(value: Seq[ConditionalValueDefNumber]) extends OrderValueDefCondition

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelConcatSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigLobes (UnionType)

sealed trait ProjectionConfigLobes 
   case class ProjectionConfigLobesAsNumber(value: JsNumber) extends ProjectionConfigLobes
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefTextBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionStringFieldDefTextBin 
   case class FieldOrDatumDefWithConditionStringFieldDefTextBinAsBool(value: Boolean) extends FieldOrDatumDefWithConditionStringFieldDefTextBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object FieldOrDatumDefWithConditionStringFieldDefTextBinAsNull extends FieldOrDatumDefWithConditionStringFieldDefTextBin

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait OverlayMarkDefInnerRadius 
   case class OverlayMarkDefInnerRadiusAsNumber(value: JsNumber) extends OverlayMarkDefInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class LineConfigFillOpacityAsNumber(value: JsNumber) extends LineConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisOffset (UnionType)
/**
 * The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.
 * 
 * __Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)
 **/
sealed trait AxisOffset 
   case class AxisOffsetAsNumber(value: JsNumber) extends AxisOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisColorAsObject2 (StructType)

case class ConditionalAxisColorAsObject2(
  var `condition` : ConditionalAxisColorAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisColor 
{  }
object ConditionalAxisColorAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefGradientStringNullExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalPredicateValueDefGradientStringNullExprRefValue 
   // Gradient is defined elsewhere
   case class ConditionalPredicateValueDefGradientStringNullExprRefValueAsString(value: String) extends ConditionalPredicateValueDefGradientStringNullExprRefValue
   case object ConditionalPredicateValueDefGradientStringNullExprRefValueAsNull extends ConditionalPredicateValueDefGradientStringNullExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DateTimeDay (UnionType)
/**
 * Value representing the day of a week. This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `"Monday"`); (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).
 * 
 * **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.
 **/
sealed trait DateTimeDay 
   // Day is defined elsewhere
   case class DateTimeDayAsString(value: String) extends DateTimeDay

////////////////////////////////////////////////////////////////////////

// ConditionalAxisColorAsObject1 (StructType)

case class ConditionalAxisColorAsObject1(
  var `condition` : ConditionalAxisColorAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Color] = None
) extends ConditionalAxisColor 
{  }
object ConditionalAxisColorAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// InlineDataset (UnionType)
/**
 * The full data set, included inline. This can be an array of objects or primitive values, an object, or a string. Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type.
 **/
sealed trait InlineDataset 
   case class InlineDatasetAsString(value: String) extends InlineDataset
   case object InlineDatasetAsEmptyObject extends InlineDataset
   case class InlineDatasetAsArrayOfNumber(value: Seq[JsNumber]) extends InlineDataset
   case class InlineDatasetAsArrayOfBool(value: Seq[Boolean]) extends InlineDataset
   case class InlineDatasetAsArrayOfEmptyObject(value: Seq[JsObject]) extends InlineDataset
   case class InlineDatasetAsArrayOfString(value: Seq[String]) extends InlineDataset

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitudeBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingLatitudeBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// BrushConfig (StructType)
/**
 * An interval selection also adds a rectangle mark to depict the extents of the interval. The `mark` property can be used to customize the appearance of the mark.
 * 
 * __See also:__ [`mark` examples](https://vega.github.io/vega-lite/docs/selection.html#mark) in the documentation.
 **/
case class BrushConfig(
  /**
   * The stroke opacity of the interval mark (a value between `0` and `1`).
   **/
  var `strokeOpacity` : Option[JsNumber] = None,
  /**
   * The fill opacity of the interval mark (a value between `0` and `1`).
   * 
   * __Default value:__ `0.125`
   **/
  var `fillOpacity` : Option[JsNumber] = None,
  /**
   * The mouse cursor used over the interval mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
   **/
  var `cursor` : Option[Cursor] = None,
  /**
   * The fill color of the interval mark.
   * 
   * __Default value:__ `"#333333"`
   **/
  var `fill` : Option[Color] = None,
  /**
   * An array of alternating stroke and space lengths, for creating dashed or dotted lines.
   **/
  var `strokeDash` : Option[Seq[JsNumber]] = None,
  /**
   * The stroke width of the interval mark.
   **/
  var `strokeWidth` : Option[JsNumber] = None,
  /**
   * The stroke color of the interval mark.
   * 
   * __Default value:__ `"#ffffff"`
   **/
  var `stroke` : Option[Color] = None,
  /**
   * The offset (in pixels) with which to begin drawing the stroke dash array.
   **/
  var `strokeDashOffset` : Option[JsNumber] = None
)  
{  }
object BrushConfig {
  val definedFields = Set("strokeDashOffset", "strokeWidth", "fillOpacity", "strokeDash", "strokeOpacity", "cursor", "stroke", "fill") 
}

////////////////////////////////////////////////////////////////////////

// HeaderLabelLineHeight (UnionType)
/**
 * Line height in pixels for multi-line header labels or title text with `"line-top"` or `"line-bottom"` baseline.
 **/
sealed trait HeaderLabelLineHeight 
   case class HeaderLabelLineHeightAsNumber(value: JsNumber) extends HeaderLabelLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldRangePredicate (StructType)

case class FieldRangePredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data.
   **/
  var `range` : FieldRangePredicateRange,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldRangePredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldRangePredicate {
  val definedFields = Set("field", "range", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringDatumDefTextFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait FieldOrDatumDefWithConditionStringDatumDefTextFormat 
   case class FieldOrDatumDefWithConditionStringDatumDefTextFormatAsString(value: String) extends FieldOrDatumDefWithConditionStringDatumDefTextFormat
   case class FieldOrDatumDefWithConditionStringDatumDefTextFormatAsDictOfAny(value: Map[String,JsValue]) extends FieldOrDatumDefWithConditionStringDatumDefTextFormat

////////////////////////////////////////////////////////////////////////

// SortByChannelDesc (EnumType)

sealed trait SortByChannelDesc extends AllSortString { val payload: JsValue }
   case object SortByChannelDescX extends SortByChannelDesc { val payload = JsString("-x") }
   case object SortByChannelDescY extends SortByChannelDesc { val payload = JsString("-y") }
   case object SortByChannelDescColor extends SortByChannelDesc { val payload = JsString("-color") }
   case object SortByChannelDescFill extends SortByChannelDesc { val payload = JsString("-fill") }
   case object SortByChannelDescStroke extends SortByChannelDesc { val payload = JsString("-stroke") }
   case object SortByChannelDescStrokeWidth extends SortByChannelDesc { val payload = JsString("-strokeWidth") }
   case object SortByChannelDescSize extends SortByChannelDesc { val payload = JsString("-size") }
   case object SortByChannelDescShape extends SortByChannelDesc { val payload = JsString("-shape") }
   case object SortByChannelDescFillOpacity extends SortByChannelDesc { val payload = JsString("-fillOpacity") }
   case object SortByChannelDescStrokeOpacity extends SortByChannelDesc { val payload = JsString("-strokeOpacity") }
   case object SortByChannelDescOpacity extends SortByChannelDesc { val payload = JsString("-opacity") }
   case object SortByChannelDescText extends SortByChannelDesc { val payload = JsString("-text") }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefHref (UnionType)

sealed trait OverlayMarkDefHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefStringNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefStringNullExprRef 
{  }
object ConditionalPredicateValueDefStringNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefNumber (StructType)

case class ConditionalParameterValueDefNumber(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : JsNumber
) extends ConditionalValueDefNumber 
{  }
object ConditionalParameterValueDefNumber {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// AxisDomainOpacity (UnionType)

sealed trait AxisDomainOpacity 
   case class AxisDomainOpacityAsNumber(value: JsNumber) extends AxisDomainOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigWidth (UnionType)

sealed trait AreaConfigWidth 
   case class AreaConfigWidthAsNumber(value: JsNumber) extends AreaConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigPointPadding (ConstrainedType)
/**
 * Default outer padding for `x` and `y` point-ordinal scales.
 * 
 * __Default value:__ `0.5` (which makes _width/height = number of unique values * step_)
 **/
sealed trait ScaleConfigPointPadding 
   case class ScaleConfigPointPaddingAsNumber(value: JsNumber) extends ScaleConfigPointPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientDirection (UnionType)

sealed trait LegendConfigGradientDirection 
   // Orientation is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigLineHeight (UnionType)

sealed trait MarkConfigLineHeight 
   case class MarkConfigLineHeightAsNumber(value: JsNumber) extends MarkConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingColorBin 
   case class SharedEncodingColorBinAsBool(value: Boolean) extends SharedEncodingColorBin
   // BinParams is defined elsewhere
   case object SharedEncodingColorBinAsNull extends SharedEncodingColorBin

////////////////////////////////////////////////////////////////////////

// SharedEncodingKeyTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingKeyTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConfigParamsElement (UnionType)

sealed trait ConfigParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingStrokeWidthTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeOffset (UnionType)

sealed trait TickConfigStrokeOffset 
   case class TickConfigStrokeOffsetAsNumber(value: JsNumber) extends TickConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait ConcatSpecGenericSpecBounds  { val payload: JsValue }
   case object ConcatSpecGenericSpecBoundsFull extends ConcatSpecGenericSpecBounds { val payload = JsString("full") }
   case object ConcatSpecGenericSpecBoundsFlush extends ConcatSpecGenericSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// LegendConfigPadding (UnionType)

sealed trait LegendConfigPadding 
   case class LegendConfigPaddingAsNumber(value: JsNumber) extends LegendConfigPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class TickConfigAngleAsNumber(value: JsNumber) extends TickConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait AreaConfigX 
   case class AreaConfigXAsNumber(value: JsNumber) extends AreaConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class BarConfigStrokeWidthAsNumber(value: JsNumber) extends BarConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait TopLevelConcatSpecSpacing 
   case class TopLevelConcatSpecSpacingAsNumber(value: JsNumber) extends TopLevelConcatSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait AreaConfigY 
   case class AreaConfigYAsNumber(value: JsNumber) extends AreaConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefOrder (UnionType)

sealed trait MarkDefOrder 
   case object MarkDefOrderAsNull extends MarkDefOrder
   case class MarkDefOrderAsBool(value: Boolean) extends MarkDefOrder

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait SharedEncodingUrlFormat 
   case class SharedEncodingUrlFormatAsString(value: String) extends SharedEncodingUrlFormat
   case class SharedEncodingUrlFormatAsDictOfAny(value: Map[String,JsValue]) extends SharedEncodingUrlFormat

////////////////////////////////////////////////////////////////////////

// LineConfigDx (UnionType)

sealed trait LineConfigDx 
   case class LineConfigDxAsNumber(value: JsNumber) extends LineConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigDy (UnionType)

sealed trait LineConfigDy 
   case class LineConfigDyAsNumber(value: JsNumber) extends LineConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingFillValue 
   // Gradient is defined elsewhere
   case class SharedEncodingFillValueAsString(value: String) extends SharedEncodingFillValue
   case object SharedEncodingFillValueAsNull extends SharedEncodingFillValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefStringNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalPredicateValueDefStringNullExprRefAsObject1Value
) extends ConditionalPredicateValueDefStringNullExprRef 
{  }
object ConditionalPredicateValueDefStringNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// FacetedEncodingXError2 (UnionType)
/**
 * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait FacetedEncodingXError2 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Background (UnionType)
/**
 * CSS color property to use as the background of the entire view.
 * 
 * __Default value:__ `"white"`
 **/
sealed trait TopLevelRepeatSpecAsObject1Background 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitudeBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingLongitudeBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontStyleNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefFontStyleNullExprRef extends ConditionalAxisLabelFontStyleAsObject1Condition with ConditionalAxisLabelFontStyleAsObject2Condition
   // ConditionalPredicateValueDefFontStyleNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefFontStyleNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAngle (UnionType)

sealed trait BarConfigAngle 
   // BarConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingSize (StructType)

case class SharedEncodingSize(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingSizeDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingSizeBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingSizeCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingSizeBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingSizeValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingSizeTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingSizeType] = None
)  
{  }
object SharedEncodingSize {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// DateTimeHours (ConstrainedType)
/**
 * Integer value representing the hour of a day from 0-23.
 **/
case class DateTimeHours(value: JsNumber) 
{ assert(value.value <= 24)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecSpec (UnionType)
/**
 * A specification of the view that gets faceted.
 **/
sealed trait TopLevelFacetSpecSpec 
   // LayerSpec is defined elsewhere
   // UnitSpecWithFrame is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigHeight (UnionType)

sealed trait MarkConfigHeight 
   case class MarkConfigHeightAsNumber(value: JsNumber) extends MarkConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitlePadding (UnionType)

sealed trait AxisTitlePadding 
   case class AxisTitlePaddingAsNumber(value: JsNumber) extends AxisTitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFontWeight (UnionType)

sealed trait BarConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude (StructType)

case class SharedEncodingLongitude(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingLongitudeDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingLongitudeBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingLongitudeTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingLongitudeType] = None
)  
{  }
object SharedEncodingLongitude {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// FieldGTEPredicateGte (UnionType)
/**
 * The value that the field should be greater than or equals to.
 **/
sealed trait FieldGTEPredicateGte 
   case class FieldGTEPredicateGteAsString(value: String) extends FieldGTEPredicateGte
   case class FieldGTEPredicateGteAsNumber(value: JsNumber) extends FieldGTEPredicateGte
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Month (ConstrainedType)

case class Month(value: JsNumber) extends DateTimeMonth
{ assert(value.value <= 12)
  assert(value.value >= 1) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateStringFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalPredicateStringFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait AreaConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeDash (UnionType)

sealed trait ViewConfigStrokeDash 
   case class ViewConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends ViewConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleFontSize (UnionType)

sealed trait AxisTitleFontSize 
   // AxisTitleFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBarDefColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait ErrorBarDefColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelBaseline (UnionType)

sealed trait AxisLabelBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelBaseline is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelLayerSpecHeight (UnionType)
/**
 * The height of a visualization.
 * 
 * - For a plot with a continuous y-field, height should be a number.
 * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on height, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait TopLevelLayerSpecHeight 
   case class TopLevelLayerSpecHeightAsNumber(value: JsNumber) extends TopLevelLayerSpecHeight
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringValueDefWithCondition (ConstrainedType)

case class StringValueDefWithCondition(
  /**
   * A field definition or one or more value definition(s) with a parameter predicate.
   **/
  var `condition` : Option[StringValueDefWithConditionCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[StringValueDefWithConditionValue] = None
) extends FacetedEncodingUrl with FacetedEncodingTooltip with FacetedEncodingHref with SharedEncodingTooltip with EncodingDescription with EncodingUrl with EncodingTooltip with EncodingHref with FacetedEncodingDescription 
{ assert(value.size >= 1)
  assert(value.size <= 1) }
object StringValueDefWithCondition {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingRadiusDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Vector10String (ConstrainedType)
/**
 * An array of ten strings to replace the numerals 0-9.
 **/
case class Vector10String(value: Seq[String]) 
{ assert(value.size >= 10)
  assert(value.size <= 10) }

////////////////////////////////////////////////////////////////////////

// RectConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait RectConfigInnerRadius 
   case class RectConfigInnerRadiusAsNumber(value: JsNumber) extends RectConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigRatio (UnionType)

sealed trait ProjectionConfigRatio 
   case class ProjectionConfigRatioAsNumber(value: JsNumber) extends ProjectionConfigRatio
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelBaselineAsObject1 (StructType)

case class ConditionalAxisLabelBaselineAsObject1(
  var `condition` : ConditionalAxisLabelBaselineAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[TextBaseline] = None
) extends ConditionalAxisLabelBaseline 
{  }
object ConditionalAxisLabelBaselineAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelBaselineAsObject2 (StructType)

case class ConditionalAxisLabelBaselineAsObject2(
  var `condition` : ConditionalAxisLabelBaselineAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisLabelBaseline 
{  }
object ConditionalAxisLabelBaselineAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// UnitSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait UnitSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleBinParams (StructType)

case class ScaleBinParams(
  /**
   * The starting (lowest-valued) bin boundary.
   * 
   * __Default value:__ The lowest value of the scale domain will be used.
   **/
  var `start` : Option[JsNumber] = None,
  /**
   * The step size defining the bin interval width.
   **/
  var `step` : JsNumber,
  /**
   * The stopping (highest-valued) bin boundary.
   * 
   * __Default value:__ The highest value of the scale domain will be used.
   **/
  var `stop` : Option[JsNumber] = None
) extends ScaleBins 
{  }
object ScaleBinParams {
  val definedFields = Set("start", "step", "stop") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingUrlBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait AreaConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFontStyle (UnionType)

sealed trait LineConfigFontStyle 
   case class LineConfigFontStyleAsString(value: String) extends LineConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeOpacity (UnionType)

sealed trait MarkConfigStrokeOpacity 
   // MarkConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelSeparation (UnionType)

sealed trait AxisLabelSeparation 
   case class AxisLabelSeparationAsNumber(value: JsNumber) extends AxisLabelSeparation
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleBaseline (UnionType)
/**
 * The vertical text baseline for the header title. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 * 
 * __Default value:__ `"middle"`
 **/
sealed trait HeaderConfigTitleBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldDefWithoutScaleTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FieldDefWithoutScaleTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ResolveMode (EnumType)

sealed trait ResolveMode  { val payload: JsValue }
   case object ResolveModeIndependent extends ResolveMode { val payload = JsString("independent") }
   case object ResolveModeShared extends ResolveMode { val payload = JsString("shared") }

////////////////////////////////////////////////////////////////////////

// ScaleDomainMax (UnionType)
/**
 * Sets the maximum value in the scale domain, overriding the `domain` property. This property is only intended for use with scales having continuous domains.
 **/
sealed trait ScaleDomainMax 
   case class ScaleDomainMaxAsNumber(value: JsNumber) extends ScaleDomainMax
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingStrokeCondition 
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class SharedEncodingStrokeConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends SharedEncodingStrokeCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AnyMark (UnionType)
/**
 * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
 **/
sealed trait AnyMark 
   // CompositeMark is defined elsewhere
   // CompositeMarkDef is defined elsewhere
   // Mark is defined elsewhere
   // MarkDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AggregatedFieldDef (StructType)

case class AggregatedFieldDef(
  /**
   * The output field names to use for each aggregated field.
   **/
  var `as` : String,
  /**
   * The data field for which to compute aggregate function. This is required for all aggregation operations except `"count"`.
   **/
  var `field` : Option[String] = None,
  /**
   * The aggregation operation to apply to the fields (e.g., `"sum"`, `"average"`, or `"count"`). See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops) for more information.
   **/
  var `op` : AggregateOp
)  
{  }
object AggregatedFieldDef {
  val definedFields = Set("as", "field", "op") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigDir (UnionType)

sealed trait AreaConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionStringFieldDefText (ConstrainedType)

case class ValueDefWithConditionStringFieldDefText(
  /**
   * A field definition or one or more value definition(s) with a parameter predicate.
   **/
  var `condition` : Option[ValueDefWithConditionStringFieldDefTextCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[ValueDefWithConditionStringFieldDefTextValue] = None
) extends TextDef 
{ assert(value.size >= 1)
  assert(value.size <= 1) }
object ValueDefWithConditionStringFieldDefText {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsLineHeight (UnionType)

sealed trait TitleParamsLineHeight 
   case class TitleParamsLineHeightAsNumber(value: JsNumber) extends TitleParamsLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait SharedEncodingDescriptionFormat 
   case class SharedEncodingDescriptionFormatAsString(value: String) extends SharedEncodingDescriptionFormat
   case class SharedEncodingDescriptionFormatAsDictOfAny(value: Map[String,JsValue]) extends SharedEncodingDescriptionFormat

////////////////////////////////////////////////////////////////////////

// UnitSpecWithFrame (StructType)

case class UnitSpecWithFrame(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks and to `latitude` and `"longitude"` channels for other marks.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.
   **/
  var `params` : Option[Seq[UnitSpecWithFrameParamsElement]] = None,
  /**
   * The height of a visualization.
   * 
   * - For a plot with a continuous y-field, height should be a number.
   * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on height, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `height` : Option[UnitSpecWithFrameHeight] = None,
  /**
   * A key-value mapping between encoding channels and definition of fields.
   **/
  var `encoding` : Option[Encoding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[UnitSpecWithFrameTitle] = None,
  /**
   * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   **/
  var `mark` : AnyMark,
  /**
   * An object defining the view background's fill and stroke.
   * 
   * __Default value:__ none (transparent)
   **/
  var `view` : Option[ViewBackground] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None,
  /**
   * The width of a visualization.
   * 
   * - For a plot with a continuous x-field, width should be a number.
   * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on width, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `width` : Option[UnitSpecWithFrameWidth] = None
) extends TopLevelFacetSpecSpec 
{  }
object UnitSpecWithFrame {
  val definedFields = Set("projection", "data", "encoding", "view", "height", "transform", "name", "params", "description", "title", "mark", "width") 
}

////////////////////////////////////////////////////////////////////////

// HeaderLabelAngle (ConstrainedType)
/**
 * The rotation angle of the header labels.
 * 
 * __Default value:__ `0` for column header, `-90` for row header.
 **/
case class HeaderLabelAngle(value: JsNumber) 
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingOpacityValue 
   case class SharedEncodingOpacityValueAsNumber(value: JsNumber) extends SharedEncodingOpacityValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefNumberExprRef (StructType)

case class ConditionalParameterValueDefNumberExprRef(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalParameterValueDefNumberExprRefValue
) extends ConditionalValueDefNumberExprRef 
{  }
object ConditionalParameterValueDefNumberExprRef {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait ConcatSpecGenericSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeDashOffset (UnionType)

sealed trait OverlayMarkDefStrokeDashOffset 
   case class OverlayMarkDefStrokeDashOffsetAsNumber(value: JsNumber) extends OverlayMarkDefStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigGridDashOffset (UnionType)

sealed trait AxisConfigGridDashOffset 
   case class AxisConfigGridDashOffsetAsNumber(value: JsNumber) extends AxisConfigGridDashOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HConcatSpecGenericSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait HConcatSpecGenericSpecBounds  { val payload: JsValue }
   case object HConcatSpecGenericSpecBoundsFull extends HConcatSpecGenericSpecBounds { val payload = JsString("full") }
   case object HConcatSpecGenericSpecBoundsFlush extends HConcatSpecGenericSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// LineConfigCornerRadiusTopRight (UnionType)

sealed trait LineConfigCornerRadiusTopRight 
   case class LineConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends LineConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeDash (UnionType)

sealed trait BarConfigStrokeDash 
   case class BarConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends BarConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionLobes (UnionType)

sealed trait ProjectionLobes 
   case class ProjectionLobesAsNumber(value: JsNumber) extends ProjectionLobes
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleOpacity (UnionType)

sealed trait AxisConfigTitleOpacity 
   case class AxisConfigTitleOpacityAsNumber(value: JsNumber) extends AxisConfigTitleOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait LayerRepeatSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringConst (ConstantType)

case class StringConst() extends ParseValue

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingShapeCondition 
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class SharedEncodingShapeConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends SharedEncodingShapeCondition
   // ConditionalMarkPropFieldOrDatumDefTypeForShape is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleFontStyle (UnionType)
/**
 * The font style of the header title.
 **/
sealed trait HeaderConfigTitleFontStyle 
   case class HeaderConfigTitleFontStyleAsString(value: String) extends HeaderConfigTitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigOrder (UnionType)

sealed trait LineConfigOrder 
   case object LineConfigOrderAsNull extends LineConfigOrder
   case class LineConfigOrderAsBool(value: Boolean) extends LineConfigOrder

////////////////////////////////////////////////////////////////////////

// FieldEqualPredicateEqual (UnionType)
/**
 * The value that the field should be equal to.
 **/
sealed trait FieldEqualPredicateEqual 
   case class FieldEqualPredicateEqualAsString(value: String) extends FieldEqualPredicateEqual
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   case class FieldEqualPredicateEqualAsBool(value: Boolean) extends FieldEqualPredicateEqual
   case class FieldEqualPredicateEqualAsNumber(value: JsNumber) extends FieldEqualPredicateEqual

////////////////////////////////////////////////////////////////////////

// ProjectionConfigExtent (UnionType)

sealed trait ProjectionConfigExtent 
   // Vector2Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingColorValue 
   // Gradient is defined elsewhere
   case class SharedEncodingColorValueAsString(value: String) extends SharedEncodingColorValue
   case object SharedEncodingColorValueAsNull extends SharedEncodingColorValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelSelectionParameterValue (UnionType)
/**
 * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.
 * 
 * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation.
 **/
sealed trait TopLevelSelectionParameterValue 
   // SelectionInit is defined elsewhere
   case class TopLevelSelectionParameterValueAsArrayOfDictOfSelectionInit(value: Seq[Map[String,SelectionInit]]) extends TopLevelSelectionParameterValue
   case class TopLevelSelectionParameterValueAsDictOfSelectionInitInterval(value: Map[String,SelectionInitInterval]) extends TopLevelSelectionParameterValue

////////////////////////////////////////////////////////////////////////

// BarConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait BarConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object BarConfigFillAsNull extends BarConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingFillOpacityBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionConfigClipExtent (UnionType)

sealed trait ProjectionConfigClipExtent 
   // Vector2Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelAngle (ConstrainedType)
/**
 * The rotation angle of the header labels.
 * 
 * __Default value:__ `0` for column header, `-90` for row header.
 **/
case class HeaderConfigLabelAngle(value: JsNumber) 
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTickCount (ConstrainedType)
/**
 * A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale's range.
 * 
 * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, an object-valued interval specifier of the form `{"interval": "month", "step": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.
 * 
 * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.
 **/
sealed trait AxisConfigTickCount 
   case class AxisConfigTickCountAsNumber(value: JsNumber) extends AxisConfigTickCount
   // TimeInterval is defined elsewhere
   // TimeIntervalStep is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefStringNullExprRef (StructType)

case class ConditionalParameterValueDefStringNullExprRef(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalParameterValueDefStringNullExprRefValue
) extends ConditionalValueDefStringNullExprRef 
{  }
object ConditionalParameterValueDefStringNullExprRef {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigCornerRadiusTopRight (UnionType)

sealed trait RectConfigCornerRadiusTopRight 
   case class RectConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends RectConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigBlend (UnionType)

sealed trait TickConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeDashOffset (UnionType)

sealed trait RectConfigStrokeDashOffset 
   case class RectConfigStrokeDashOffsetAsNumber(value: JsNumber) extends RectConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait TickConfigTheta2 
   case class TickConfigTheta2AsNumber(value: JsNumber) extends TickConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SampleTransform (StructType)

case class SampleTransform(
  /**
   * The maximum number of data objects to include in the sample.
   * 
   * __Default value:__ `1000`
   **/
  var `sample` : JsNumber
) extends Transform 
{  }
object SampleTransform {
  val definedFields = Set("sample") 
}

////////////////////////////////////////////////////////////////////////

// StrokeJoin (EnumType)
/**
 * The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.
 * 
 * __Default value:__ `"miter"`
 **/
sealed trait StrokeJoin extends LineConfigStrokeJoin with RectConfigStrokeJoin with ViewConfigStrokeJoin with OverlayMarkDefStrokeJoin with MarkDefStrokeJoin with BarConfigStrokeJoin with AreaConfigStrokeJoin with MarkConfigStrokeJoin with ViewBackgroundStrokeJoin with TickConfigStrokeJoin { val payload: JsValue }
   case object StrokeJoinMiter extends StrokeJoin { val payload = JsString("miter") }
   case object StrokeJoinRound extends StrokeJoin { val payload = JsString("round") }
   case object StrokeJoinBevel extends StrokeJoin { val payload = JsString("bevel") }

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeCap (UnionType)

sealed trait RectConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFontStyle (UnionType)

sealed trait AreaConfigFontStyle 
   case class AreaConfigFontStyleAsString(value: String) extends AreaConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// CompositeMarkDef (UnionType)

sealed trait CompositeMarkDef extends AnyMark
   // BoxPlotDef is defined elsewhere
   // ErrorBarDef is defined elsewhere
   // ErrorBandDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeOffset (UnionType)

sealed trait OverlayMarkDefStrokeOffset 
   case class OverlayMarkDefStrokeOffsetAsNumber(value: JsNumber) extends OverlayMarkDefStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigInterpolate (UnionType)

sealed trait MarkConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius2 (StructType)

case class SharedEncodingRadius2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingRadius2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingRadius2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingRadius2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingRadius2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingRadius2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// BindRadioSelect (StructType)

case class BindRadioSelect(
  /**
   * By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.
   **/
  var `name` : Option[String] = None,
  /**
   * An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view.
   **/
  var `element` : Option[String] = None,
  /**
   * An array of options to select from.
   **/
  var `options` : Seq[JsValue],
  /**
   * An array of label strings to represent the `options` values. If unspecified, the `options` value will be coerced to a string and used as the label.
   **/
  var `labels` : Option[Seq[String]] = None,
  var `input` : BindRadioSelectInput,
  /**
   * If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.
   **/
  var `debounce` : Option[JsNumber] = None
) extends Binding 
{  }
object BindRadioSelect {
  val definedFields = Set("options", "labels", "debounce", "name", "element", "input") 
}

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBase (StructType)

case class PositionFieldDefBase(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[PositionFieldDefBaseBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[PositionFieldDefBaseStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[PositionFieldDefBaseBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[PositionFieldDefBaseTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends PolarDef 
{  }
object PositionFieldDefBase {
  val definedFields = Set("bin", "type", "bandPosition", "stack", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// RowColLayoutAlign (StructType)

case class RowColLayoutAlign(
  var `column` : Option[LayoutAlign] = None,
  var `row` : Option[LayoutAlign] = None
) extends NonLayerRepeatSpecAlign with TopLevelUnitSpecAlign with TopLevelConcatSpecAlign with TopLevelRepeatSpecAsObject1Align with FacetedUnitSpecAlign with FacetEncodingFieldDefAlign with LayerRepeatSpecAlign with ConcatSpecGenericSpecAlign with FacetSpecAlign with TopLevelRepeatSpecAsObject2Align with TopLevelFacetSpecAlign 
{  }
object RowColLayoutAlign {
  val definedFields = Set("column", "row") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefStringExprRef (UnionType)

sealed trait ConditionalValueDefStringExprRef extends SharedEncodingHrefCondition with StringFieldDefWithConditionCondition with SharedEncodingUrlCondition with SharedEncodingDescriptionCondition
   // ConditionalPredicateValueDefStringExprRef is defined elsewhere
   // ConditionalParameterValueDefStringExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrl (StructType)

case class SharedEncodingUrl(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[SharedEncodingUrlFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingUrlBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingUrlCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingUrlBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingUrlValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingUrlTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object SharedEncodingUrl {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// ScalePaddingInner (ConstrainedType)
/**
 * The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].
 * 
 * For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).
 * 
 * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.
 **/
sealed trait ScalePaddingInner 
   case class ScalePaddingInnerAsNumber(value: JsNumber) extends ScalePaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldValidPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldValidPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAriaRoleDescription (UnionType)

sealed trait BarConfigAriaRoleDescription 
   case class BarConfigAriaRoleDescriptionAsString(value: String) extends BarConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// VConcatSpecGenericSpec (StructType)
/**
 * Base interface for a vertical concatenation specification.
 **/
case class VConcatSpecGenericSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[Boolean] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * A list of views to be concatenated and put into a column.
   **/
  var `vconcat` : Seq[Spec],
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[VConcatSpecGenericSpecBounds] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[VConcatSpecGenericSpecTitle] = None,
  /**
   * The spacing in pixels between sub-views of the concat operator.
   * 
   * __Default value__: `10`
   **/
  var `spacing` : Option[JsNumber] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends NonNormalizedSpec with Spec 
{  }
object VConcatSpecGenericSpec {
  val definedFields = Set("spacing", "data", "transform", "name", "vconcat", "center", "description", "title", "resolve", "bounds") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingY2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingY2Value 
   case class SharedEncodingY2ValueAsNumber(value: JsNumber) extends SharedEncodingY2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientLengthAsNumber (ConstrainedType)
/**
 * The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.
 * 
 * __Default value:__ `200`.
 **/
case class LegendConfigGradientLengthAsNumber(value: JsNumber) extends LegendConfigGradientLength
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FlattenTransform (StructType)

case class FlattenTransform(
  /**
   * The output field names for extracted array values.
   * 
   * __Default value:__ The field name of the corresponding array field
   **/
  var `as` : Option[Seq[String]] = None,
  /**
   * An array of one or more data fields containing arrays to flatten. If multiple fields are specified, their array values should have a parallel structure, ideally with the same length. If the lengths of parallel arrays do not match, the longest array will be used with `null` values added for missing entries.
   **/
  var `flatten` : Seq[String]
) extends Transform 
{  }
object FlattenTransform {
  val definedFields = Set("as", "flatten") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingSizeTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingShapeBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisResolveMap (StructType)

case class AxisResolveMap(
  var `x` : Option[ResolveMode] = None,
  var `y` : Option[ResolveMode] = None
)  
{  }
object AxisResolveMap {
  val definedFields = Set("x", "y") 
}

////////////////////////////////////////////////////////////////////////

// PositionDef (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait PositionDef 
   // PositionFieldDef is defined elsewhere
   // PositionDatumDef is defined elsewhere
   // PositionValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Title (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelRepeatSpecAsObject1Title 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius (StructType)

case class SharedEncodingRadius(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingRadiusDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingRadiusBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[SharedEncodingRadiusStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingRadiusBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingRadiusValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingRadiusTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingRadiusType] = None
)  
{  }
object SharedEncodingRadius {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "stack", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// Vector12String (ConstrainedType)
/**
 * The full names of the months (starting with January).
 **/
case class Vector12String(value: Seq[String]) 
{ assert(value.size >= 12)
  assert(value.size <= 12) }

////////////////////////////////////////////////////////////////////////

// TitleConfigFontSizeAsNumber (ConstrainedType)
/**
 * Font size in pixels for title text.
 **/
case class TitleConfigFontSizeAsNumber(value: JsNumber) extends TitleConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigCursor (UnionType)

sealed trait AreaConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefTextFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait FieldOrDatumDefWithConditionStringFieldDefTextFormat 
   case class FieldOrDatumDefWithConditionStringFieldDefTextFormatAsString(value: String) extends FieldOrDatumDefWithConditionStringFieldDefTextFormat
   case class FieldOrDatumDefWithConditionStringFieldDefTextFormatAsDictOfAny(value: Map[String,JsValue]) extends FieldOrDatumDefWithConditionStringFieldDefTextFormat

////////////////////////////////////////////////////////////////////////

// MarkDefThetaOffset (UnionType)
/**
 * Offset for theta.
 **/
sealed trait MarkDefThetaOffset 
   case class MarkDefThetaOffsetAsNumber(value: JsNumber) extends MarkDefThetaOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleFontWeight (UnionType)
/**
 * Font weight of the header title. This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
 **/
sealed trait HeaderConfigTitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigBox (UnionType)

sealed trait BoxPlotConfigBox 
   case class BoxPlotConfigBoxAsBool(value: Boolean) extends BoxPlotConfigBox
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class AreaConfigStrokeWidthAsNumber(value: JsNumber) extends AreaConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigPadAngle (UnionType)

sealed trait TickConfigPadAngle 
   case class TickConfigPadAngleAsNumber(value: JsNumber) extends TickConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXErrorTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingXErrorTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelFont (UnionType)

sealed trait LegendConfigLabelFont 
   case class LegendConfigLabelFontAsString(value: String) extends LegendConfigLabelFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigHref (UnionType)

sealed trait RectConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackground (StructType)
/**
 * An object defining the view background's fill and stroke.
 * 
 * __Default value:__ none (transparent)
 **/
case class ViewBackground(
  var `fillOpacity` : Option[ViewBackgroundFillOpacity] = None,
  var `cornerRadius` : Option[ViewBackgroundCornerRadius] = None,
  /**
   * The mouse cursor used over the view. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
   **/
  var `cursor` : Option[Cursor] = None,
  var `strokeMiterLimit` : Option[ViewBackgroundStrokeMiterLimit] = None,
  /**
   * The fill color.
   * 
   * __Default value:__ `undefined`
   **/
  var `fill` : Option[ViewBackgroundFill] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[ViewBackgroundOpacity] = None,
  var `strokeDash` : Option[ViewBackgroundStrokeDash] = None,
  var `strokeWidth` : Option[ViewBackgroundStrokeWidth] = None,
  /**
   * A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
   * 
   * __Default value:__ `"cell"` __Note:__ Any specified view background properties will augment the default style.
   **/
  var `style` : Option[ViewBackgroundStyle] = None,
  var `strokeOpacity` : Option[ViewBackgroundStrokeOpacity] = None,
  /**
   * The stroke color.
   * 
   * __Default value:__ `"#ddd"`
   **/
  var `stroke` : Option[ViewBackgroundStroke] = None,
  var `strokeDashOffset` : Option[ViewBackgroundStrokeDashOffset] = None,
  var `strokeCap` : Option[ViewBackgroundStrokeCap] = None,
  var `strokeJoin` : Option[ViewBackgroundStrokeJoin] = None
)  
{  }
object ViewBackground {
  val definedFields = Set("strokeDashOffset", "strokeWidth", "strokeCap", "strokeOpacity", "stroke", "fill", "opacity", "fillOpacity", "strokeJoin", "strokeDash", "cursor", "style", "cornerRadius", "strokeMiterLimit") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefLineHeight (UnionType)

sealed trait OverlayMarkDefLineHeight 
   case class OverlayMarkDefLineHeightAsNumber(value: JsNumber) extends OverlayMarkDefLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpec (StructType)

case class TopLevelHConcatSpec(
  /**
   * A list of views to be concatenated and put into a row.
   **/
  var `hconcat` : Seq[NonNormalizedSpec],
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelHConcatSpecParamsElement]] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelHConcatSpecBounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelHConcatSpecPadding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelHConcatSpecTitle] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelHConcatSpecBackground] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[Boolean] = None,
  /**
   * The spacing in pixels between sub-views of the concat operator.
   * 
   * __Default value__: `10`
   **/
  var `spacing` : Option[JsNumber] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelHConcatSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelSpec 
{  }
object TopLevelHConcatSpec {
  val definedFields = Set("spacing", "padding", "config", "usermeta", "autosize", "datasets", "transform", "center", "$schema", "data", "hconcat", "params", "description", "title", "resolve", "bounds", "background", "name") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadiusTopLeft (UnionType)

sealed trait MarkDefCornerRadiusTopLeft 
   case class MarkDefCornerRadiusTopLeftAsNumber(value: JsNumber) extends MarkDefCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait BarConfigY 
   case class BarConfigYAsNumber(value: JsNumber) extends BarConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterStringFieldDef (StructType)

case class ConditionalParameterStringFieldDef(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[ConditionalParameterStringFieldDefFormat] = None,
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalParameterStringFieldDefBandPosition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalParameterStringFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalParameterStringFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends ConditionalStringFieldDef 
{  }
object ConditionalParameterStringFieldDef {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "param", "aggregate", "title", "formatType", "field", "format", "empty") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait BarConfigX 
   case class BarConfigXAsNumber(value: JsNumber) extends BarConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisGridOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity of grid (value between [0,1])
 * 
 * __Default value:__ `1`
 **/
case class AxisGridOpacityAsNumber(value: JsNumber) extends AxisGridOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTitlePadding (UnionType)

sealed trait AxisConfigTitlePadding 
   case class AxisConfigTitlePaddingAsNumber(value: JsNumber) extends AxisConfigTitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigPadAngle (UnionType)

sealed trait BarConfigPadAngle 
   case class BarConfigPadAngleAsNumber(value: JsNumber) extends BarConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowOnlyOp (EnumType)

sealed trait WindowOnlyOp extends WindowFieldDefOp { val payload: JsValue }
   case object WindowOnlyOpRowNumber extends WindowOnlyOp { val payload = JsString("row_number") }
   case object WindowOnlyOpRank extends WindowOnlyOp { val payload = JsString("rank") }
   case object WindowOnlyOpDenseRank extends WindowOnlyOp { val payload = JsString("dense_rank") }
   case object WindowOnlyOpPercentRank extends WindowOnlyOp { val payload = JsString("percent_rank") }
   case object WindowOnlyOpCumeDist extends WindowOnlyOp { val payload = JsString("cume_dist") }
   case object WindowOnlyOpNtile extends WindowOnlyOp { val payload = JsString("ntile") }
   case object WindowOnlyOpLag extends WindowOnlyOp { val payload = JsString("lag") }
   case object WindowOnlyOpLead extends WindowOnlyOp { val payload = JsString("lead") }
   case object WindowOnlyOpFirstValue extends WindowOnlyOp { val payload = JsString("first_value") }
   case object WindowOnlyOpLastValue extends WindowOnlyOp { val payload = JsString("last_value") }
   case object WindowOnlyOpNthValue extends WindowOnlyOp { val payload = JsString("nth_value") }

////////////////////////////////////////////////////////////////////////

// AxisTitleY (UnionType)

sealed trait AxisTitleY 
   case class AxisTitleYAsNumber(value: JsNumber) extends AxisTitleY
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickDashOffset (UnionType)

sealed trait AxisConfigTickDashOffset 
   case class AxisConfigTickDashOffsetAsNumber(value: JsNumber) extends AxisConfigTickDashOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleX (UnionType)

sealed trait AxisTitleX 
   case class AxisTitleXAsNumber(value: JsNumber) extends AxisTitleX
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeJoin (UnionType)

sealed trait AreaConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFontStyle (UnionType)

sealed trait BarConfigFontStyle 
   case class BarConfigFontStyleAsString(value: String) extends BarConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConfigLineBreak (UnionType)
/**
 * A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property provides a global default for text marks, which is overridden by mark or style config settings, and by the lineBreak mark encoding channel. If signal-valued, either string or regular expression (regexp) values are valid.
 **/
sealed trait ConfigLineBreak 
   case class ConfigLineBreakAsString(value: String) extends ConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigCornerRadiusTopLeft (UnionType)

sealed trait RectConfigCornerRadiusTopLeft 
   case class RectConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends RectConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingFillCondition 
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class SharedEncodingFillConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends SharedEncodingFillCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigCornerRadiusTopLeft (UnionType)

sealed trait TickConfigCornerRadiusTopLeft 
   case class TickConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends TickConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingTextType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Projection (StructType)
/**
 * An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks and to `latitude` and `"longitude"` channels for other marks.
 **/
case class Projection(
  var `fraction` : Option[ProjectionFraction] = None,
  var `extent` : Option[ProjectionExtent] = None,
  var `center` : Option[ProjectionCenter] = None,
  /**
   * The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.
   **/
  var `scale` : Option[ProjectionScale] = None,
  var `fit` : Option[ProjectionFit] = None,
  var `reflectX` : Option[ProjectionReflectX] = None,
  var `rotate` : Option[ProjectionRotate] = None,
  var `clipAngle` : Option[ProjectionClipAngle] = None,
  var `lobes` : Option[ProjectionLobes] = None,
  var `parallels` : Option[ProjectionParallels] = None,
  /**
   * The projection’s translation offset as a two-element array `[tx, ty]`.
   **/
  var `translate` : Option[ProjectionTranslate] = None,
  /**
   * The cartographic projection to use. This value is case-insensitive, for example `"albers"` and `"Albers"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).
   * 
   * __Default value:__ `equalEarth`
   **/
  var `type` : Option[ProjectionType] = None,
  var `spacing` : Option[ProjectionSpacing] = None,
  var `clipExtent` : Option[ProjectionClipExtent] = None,
  var `coefficient` : Option[ProjectionCoefficient] = None,
  var `precision` : Option[ProjectionPrecision] = None,
  var `size` : Option[ProjectionSize] = None,
  var `reflectY` : Option[ProjectionReflectY] = None,
  var `radius` : Option[ProjectionRadius] = None,
  var `tilt` : Option[ProjectionTilt] = None,
  var `pointRadius` : Option[ProjectionPointRadius] = None,
  var `ratio` : Option[ProjectionRatio] = None,
  var `parallel` : Option[ProjectionParallel] = None,
  var `distance` : Option[ProjectionDistance] = None
)  
{  }
object Projection {
  val definedFields = Set("ratio", "reflectX", "clipAngle", "distance", "precision", "scale", "fit", "clipExtent", "rotate", "lobes", "reflectY", "parallels", "translate", "center", "fraction", "type", "spacing", "size", "extent", "coefficient", "pointRadius", "parallel", "radius", "tilt") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeDashOffset (UnionType)

sealed trait AreaConfigStrokeDashOffset 
   case class AreaConfigStrokeDashOffsetAsNumber(value: JsNumber) extends AreaConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait AreaConfigRadius 
   case class AreaConfigRadiusAsNumber(value: JsNumber) extends AreaConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefStringExprRef (StructType)

case class ConditionalParameterValueDefStringExprRef(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalParameterValueDefStringExprRefValue
) extends ConditionalValueDefStringExprRef 
{  }
object ConditionalParameterValueDefStringExprRef {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// BindDirect (StructType)

case class BindDirect(
  /**
   * If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.
   **/
  var `debounce` : Option[JsNumber] = None,
  /**
   * An input element that exposes a _value_ property and supports the [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) interface, or a CSS selector string to such an element. When the element updates and dispatches an event, the _value_ property will be used as the new, bound signal value. When the signal updates independent of the element, the _value_ property will be set to the signal value and a new event will be dispatched on the element.
   **/
  var `element` : BindDirectElement,
  /**
   * The event (default `"input"`) to listen for to track changes on the external element.
   **/
  var `event` : Option[String] = None
) extends Binding 
{  }
object BindDirect {
  val definedFields = Set("debounce", "element", "event") 
}

////////////////////////////////////////////////////////////////////////

// TimeUnitTransformTimeUnit (UnionType)
/**
 * The timeUnit.
 **/
sealed trait TimeUnitTransformTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigBlend (UnionType)

sealed trait AreaConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeOpacity (UnionType)

sealed trait MarkDefStrokeOpacity 
   // MarkDefStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeDash (UnionType)

sealed trait MarkDefStrokeDash 
   case class MarkDefStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends MarkDefStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigAria (UnionType)

sealed trait TitleConfigAria 
   case class TitleConfigAriaAsBool(value: Boolean) extends TitleConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBarDefOpacity (ConstrainedType)
/**
 * The opacity (value between [0,1]) of the mark.
 **/
case class ErrorBarDefOpacity(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberArrayAsObject1Condition (UnionType)

sealed trait ConditionalAxisNumberArrayAsObject1Condition 
   // ConditionalPredicateValueDefNumberNullExprRef is defined elsewhere
   case class ConditionalAxisNumberArrayAsObject1ConditionAsArrayOfConditionalPredicateValueDefNumberNullExprRef(value: Seq[ConditionalPredicateValueDefNumberNullExprRef]) extends ConditionalAxisNumberArrayAsObject1Condition

////////////////////////////////////////////////////////////////////////

// ScaleConfigMinOpacity (ConstrainedType)
/**
 * Default minimum opacity for mapping a field to opacity.
 * 
 * __Default value:__ `0.3`
 **/
case class ScaleConfigMinOpacity(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigBandSize (ConstrainedType)
/**
 * The width of the ticks.
 * 
 * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).
 **/
case class TickConfigBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleAnchor (UnionType)

sealed trait AxisConfigTitleAnchor 
   // TitleAnchor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class MarkConfigStrokeWidthAsNumber(value: JsNumber) extends MarkConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigHeight (UnionType)

sealed trait TickConfigHeight 
   case class TickConfigHeightAsNumber(value: JsNumber) extends TickConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingY (StructType)

case class SharedEncodingY(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingYBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[SharedEncodingYStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingYBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingYValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingYTimeUnit] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingYDatum] = None,
  /**
   * An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.
   * 
   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
   **/
  var `impute` : Option[ImputeParams] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
   * 
   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
   **/
  var `axis` : Option[Axis] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingYType] = None
)  
{  }
object SharedEncodingY {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "stack", "aggregate", "title", "impute", "axis", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingX (StructType)

case class SharedEncodingX(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingXBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[SharedEncodingXStack] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingXBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingXValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingXTimeUnit] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingXDatum] = None,
  /**
   * An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.
   * 
   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
   **/
  var `impute` : Option[ImputeParams] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
   * 
   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
   **/
  var `axis` : Option[Axis] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingXType] = None
)  
{  }
object SharedEncodingX {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "stack", "aggregate", "title", "impute", "axis", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFont (UnionType)

sealed trait OverlayMarkDefFont 
   case class OverlayMarkDefFontAsString(value: String) extends OverlayMarkDefFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickBand (UnionType)

sealed trait AxisTickBand 
   // AxisTickBandAsString is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingRadiusTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringDatumDefTextDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait FieldOrDatumDefWithConditionStringDatumDefTextDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGridAlign (UnionType)

sealed trait LegendConfigGridAlign 
   // LayoutAlign is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientLabelLimit (UnionType)

sealed trait LegendConfigGradientLabelLimit 
   case class LegendConfigGradientLabelLimitAsNumber(value: JsNumber) extends LegendConfigGradientLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigParallel (UnionType)

sealed trait ProjectionConfigParallel 
   case class ProjectionConfigParallelAsNumber(value: JsNumber) extends ProjectionConfigParallel
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Baseline (EnumType)

sealed trait Baseline extends TextBaseline { val payload: JsValue }
   case object BaselineTop extends Baseline { val payload = JsString("top") }
   case object BaselineMiddle extends Baseline { val payload = JsString("middle") }
   case object BaselineBottom extends Baseline { val payload = JsString("bottom") }

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefTextExprRef (StructType)

case class ConditionalParameterValueDefTextExprRef(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalParameterValueDefTextExprRefValue
) extends ConditionalValueDefTextExprRef 
{  }
object ConditionalParameterValueDefTextExprRef {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// ProjectionParallel (UnionType)

sealed trait ProjectionParallel 
   case class ProjectionParallelAsNumber(value: JsNumber) extends ProjectionParallel
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait LineConfigInnerRadius 
   case class LineConfigInnerRadiusAsNumber(value: JsNumber) extends LineConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigAnchor (UnionType)

sealed trait TitleConfigAnchor 
   // TitleAnchor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeConfig (StructType)
/**
 * An object hash that defines default range arrays or schemes for using with scales. For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
 **/
case class RangeConfig(
  /**
   * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for diverging quantitative ramps.
   **/
  var `diverging` : Option[RangeConfigDiverging] = None,
  /**
   * Array of [symbol](https://vega.github.io/vega/docs/marks/symbol/) names or paths for the default shape palette.
   **/
  var `symbol` : Option[Seq[String]] = None,
  /**
   * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data.
   **/
  var `ordinal` : Option[RangeConfigOrdinal] = None,
  /**
   * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for categorical data.
   **/
  var `category` : Option[RangeConfigCategory] = None,
  /**
   * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential quantitative ramps.
   **/
  var `ramp` : Option[RangeConfigRamp] = None,
  /**
   * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for quantitative heatmaps.
   **/
  var `heatmap` : Option[RangeConfigHeatmap] = None,

  /**
   * optional parameters for RangeConfig
   */
  var optionalFields: Map[String,RangeConfigOptional]
)  
{  }
object RangeConfig {
  val definedFields = Set("ramp", "heatmap", "diverging", "category", "symbol", "ordinal") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientOpacity (UnionType)

sealed trait LegendConfigGradientOpacity 
   case class LegendConfigGradientOpacityAsNumber(value: JsNumber) extends LegendConfigGradientOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelColor (UnionType)
/**
 * The color of the tick label, can be in hex color code or regular color name.
 **/
sealed trait AxisLabelColor 
   case object AxisLabelColorAsNull extends AxisLabelColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecWidth (UnionType)
/**
 * The width of a visualization.
 * 
 * - For a plot with a continuous x-field, width should be a number.
 * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on width, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait FacetedUnitSpecWidth 
   case class FacetedUnitSpecWidthAsNumber(value: JsNumber) extends FacetedUnitSpecWidth
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class TickConfigFillOpacityAsNumber(value: JsNumber) extends TickConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TooltipContentContent (EnumType)

sealed trait TooltipContentContent  { val payload: JsValue }
   case object TooltipContentContentEncoding extends TooltipContentContent { val payload = JsString("encoding") }
   case object TooltipContentContentData extends TooltipContentContent { val payload = JsString("data") }

////////////////////////////////////////////////////////////////////////

// StringFieldDef (StructType)

case class StringFieldDef(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[StringFieldDefFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[StringFieldDefBandPosition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[StringFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[StringFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object StringFieldDef {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "aggregate", "title", "formatType", "field") 
}

////////////////////////////////////////////////////////////////////////

// Legend (ConstantType)

case class Legend() extends LegendBinding

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumber (StructType)

case class ConditionalPredicateValueDefNumber(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : JsNumber
) extends ConditionalValueDefNumber 
{  }
object ConditionalPredicateValueDefNumber {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingUrlBin 
   case class SharedEncodingUrlBinAsBool(value: Boolean) extends SharedEncodingUrlBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingUrlBinAsNull extends SharedEncodingUrlBin

////////////////////////////////////////////////////////////////////////

// ValueDefNumber (StructType)
/**
 * Definition object for a constant value (primitive value or gradient definition) of an encoding channel.
 **/
case class ValueDefNumber(
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : JsNumber
) extends FacetedEncodingYError with FacetedEncodingYError2 with EncodingXError with EncodingYError with OffsetDef with EncodingXError2 with FacetedEncodingXError with FacetedEncodingXError2 with EncodingYError2 
{  }
object ValueDefNumber {
  val definedFields = Set("value") 
}

////////////////////////////////////////////////////////////////////////

// PositionDatumDefBase (StructType)

case class PositionDatumDefBase(
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[PositionDatumDefBaseDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[PositionDatumDefBaseBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[PositionDatumDefBaseStack] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends PolarDef 
{  }
object PositionDatumDefBase {
  val definedFields = Set("type", "scale", "datum", "bandPosition", "stack", "title") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelHConcatSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFontWeight (UnionType)

sealed trait MarkDefFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAriaRole (UnionType)

sealed trait RectConfigAriaRole 
   case class RectConfigAriaRoleAsString(value: String) extends RectConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NamedData (StructType)

case class NamedData(
  /**
   * An object that specifies the format for parsing the data.
   **/
  var `format` : Option[DataFormat] = None,
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : String
) extends DataSource 
{  }
object NamedData {
  val definedFields = Set("format", "name") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingTextBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderLabelFontStyle (UnionType)
/**
 * The font style of the header label.
 **/
sealed trait HeaderLabelFontStyle 
   case class HeaderLabelFontStyleAsString(value: String) extends HeaderLabelFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait FacetSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait AreaConfigInnerRadius 
   case class AreaConfigInnerRadiusAsNumber(value: JsNumber) extends AreaConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainDashOffset (UnionType)

sealed trait AxisConfigDomainDashOffset 
   case class AxisConfigDomainDashOffsetAsNumber(value: JsNumber) extends AxisConfigDomainDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickBandAsString (EnumType)
/**
 * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of a band (default) or at the band `"extent"`s to indicate intervals
 **/
sealed trait AxisConfigTickBandAsString extends AxisConfigTickBand { val payload: JsValue }
   case object AxisConfigTickBandAsStringCenter extends AxisConfigTickBandAsString { val payload = JsString("center") }
   case object AxisConfigTickBandAsStringExtent extends AxisConfigTickBandAsString { val payload = JsString("extent") }

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleLimit (UnionType)

sealed trait LegendConfigTitleLimit 
   // LegendConfigTitleLimitAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigLimit (UnionType)

sealed trait TitleConfigLimit 
   // TitleConfigLimitAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHref (StructType)

case class SharedEncodingHref(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[SharedEncodingHrefFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingHrefBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingHrefCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingHrefBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingHrefValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingHrefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object SharedEncodingHref {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisStringAsObject1Value (UnionType)

sealed trait ConditionalAxisStringAsObject1Value 
   case class ConditionalAxisStringAsObject1ValueAsString(value: String) extends ConditionalAxisStringAsObject1Value
   case object ConditionalAxisStringAsObject1ValueAsNull extends ConditionalAxisStringAsObject1Value

////////////////////////////////////////////////////////////////////////

// TitleParamsAria (UnionType)

sealed trait TitleParamsAria 
   case class TitleParamsAriaAsBool(value: Boolean) extends TitleParamsAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpec (StructType)

case class TopLevelUnitSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks and to `latitude` and `"longitude"` channels for other marks.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.
   **/
  var `params` : Option[Seq[TopLevelUnitSpecParamsElement]] = None,
  /**
   * The height of a visualization.
   * 
   * - For a plot with a continuous y-field, height should be a number.
   * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on height, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `height` : Option[TopLevelUnitSpecHeight] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelUnitSpecPadding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelUnitSpecTitle] = None,
  /**
   * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   **/
  var `mark` : AnyMark,
  /**
   * An object defining the view background's fill and stroke.
   * 
   * __Default value:__ none (transparent)
   **/
  var `view` : Option[ViewBackground] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelUnitSpecBackground] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[TopLevelUnitSpecCenter] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[TopLevelUnitSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * A key-value mapping between encoding channels and definition of fields.
   **/
  var `encoding` : Option[FacetedEncoding] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelUnitSpecBounds] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[TopLevelUnitSpecSpacing] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelUnitSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None,
  /**
   * The width of a visualization.
   * 
   * - For a plot with a continuous x-field, width should be a number.
   * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on width, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `width` : Option[TopLevelUnitSpecWidth] = None
) extends TopLevelSpec 
{  }
object TopLevelUnitSpec {
  val definedFields = Set("projection", "spacing", "data", "padding", "encoding", "config", "view", "usermeta", "autosize", "height", "datasets", "transform", "align", "center", "$schema", "params", "description", "title", "mark", "width", "resolve", "bounds", "background", "name") 
}

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait LayerRepeatSpecBounds  { val payload: JsValue }
   case object LayerRepeatSpecBoundsFull extends LayerRepeatSpecBounds { val payload = JsString("full") }
   case object LayerRepeatSpecBoundsFlush extends LayerRepeatSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// UnitSpecWithFrameWidth (UnionType)
/**
 * The width of a visualization.
 * 
 * - For a plot with a continuous x-field, width should be a number.
 * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on width, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait UnitSpecWithFrameWidth 
   case class UnitSpecWithFrameWidthAsNumber(value: JsNumber) extends UnitSpecWithFrameWidth
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldLTPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldLTPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigSize (UnionType)

sealed trait ProjectionConfigSize 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBandDefBorders (UnionType)

sealed trait ErrorBandDefBorders 
   case class ErrorBandDefBordersAsBool(value: Boolean) extends ErrorBandDefBorders
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeOpacity (UnionType)

sealed trait TickConfigStrokeOpacity 
   // TickConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisGridColor (UnionType)
/**
 * Color of gridlines.
 * 
 * __Default value:__ `"lightGray"`.
 **/
sealed trait AxisGridColor 
   case object AxisGridColorAsNull extends AxisGridColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleFontWeight (UnionType)

sealed trait TitleConfigSubtitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigCornerRadiusBottomLeft (UnionType)

sealed trait AreaConfigCornerRadiusBottomLeft 
   case class AreaConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends AreaConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionRadius (UnionType)

sealed trait ProjectionRadius 
   case class ProjectionRadiusAsNumber(value: JsNumber) extends ProjectionRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StackTransformOffset (EnumType)
/**
 * Mode for stacking marks. One of `"zero"` (default), `"center"`, or `"normalize"`. The `"zero"` offset will stack starting at `0`. The `"center"` offset will center the stacks. The `"normalize"` offset will compute percentage values for each stack point, with output values in the range `[0,1]`.
 * 
 * __Default value:__ `"zero"`
 **/
sealed trait StackTransformOffset  { val payload: JsValue }
   case object StackTransformOffsetZero extends StackTransformOffset { val payload = JsString("zero") }
   case object StackTransformOffsetCenter extends StackTransformOffset { val payload = JsString("center") }
   case object StackTransformOffsetNormalize extends StackTransformOffset { val payload = JsString("normalize") }

////////////////////////////////////////////////////////////////////////

// GraticuleGenerator (StructType)

case class GraticuleGenerator(
  /**
   * Generate graticule GeoJSON data for geographic reference lines.
   **/
  var `graticule` : GraticuleGeneratorGraticule,
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : Option[String] = None
) extends Generator 
{  }
object GraticuleGenerator {
  val definedFields = Set("graticule", "name") 
}

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeDashOffset (UnionType)

sealed trait TickConfigStrokeDashOffset 
   case class TickConfigStrokeDashOffsetAsNumber(value: JsNumber) extends TickConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue 
   // Gradient is defined elsewhere
   case class ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValueAsString(value: String) extends ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue
   case object ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValueAsNull extends ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait MarkConfigTheta2 
   case class MarkConfigTheta2AsNumber(value: JsNumber) extends MarkConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait MarkConfigOpacity 
   case class MarkConfigOpacityAsNumber(value: JsNumber) extends MarkConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleLimit (UnionType)

sealed trait AxisTitleLimit 
   // AxisTitleLimitAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontWeightAsObject1Condition (UnionType)

sealed trait ConditionalAxisLabelFontWeightAsObject1Condition 
   // ConditionalPredicateValueDefFontWeightNullExprRef is defined elsewhere
   case class ConditionalAxisLabelFontWeightAsObject1ConditionAsArrayOfConditionalPredicateValueDefFontWeightNullExprRef(value: Seq[ConditionalPredicateValueDefFontWeightNullExprRef]) extends ConditionalAxisLabelFontWeightAsObject1Condition

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecParamsElement (UnionType)

sealed trait TopLevelFacetSpecParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Cursor (EnumType)
/**
 * The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
 **/
sealed trait Cursor extends LineConfigCursor with AreaConfigCursor with TickConfigCursor with MarkDefCursor with OverlayMarkDefCursor with MarkConfigCursor with RectConfigCursor with BarConfigCursor { val payload: JsValue }
   case object CursorAuto extends Cursor { val payload = JsString("auto") }
   case object CursorDefault extends Cursor { val payload = JsString("default") }
   case object CursorNone extends Cursor { val payload = JsString("none") }
   case object CursorContextMenu extends Cursor { val payload = JsString("context-menu") }
   case object CursorHelp extends Cursor { val payload = JsString("help") }
   case object CursorPointer extends Cursor { val payload = JsString("pointer") }
   case object CursorProgress extends Cursor { val payload = JsString("progress") }
   case object CursorWait extends Cursor { val payload = JsString("wait") }
   case object CursorCell extends Cursor { val payload = JsString("cell") }
   case object CursorCrosshair extends Cursor { val payload = JsString("crosshair") }
   case object CursorText extends Cursor { val payload = JsString("text") }
   case object CursorVerticalText extends Cursor { val payload = JsString("vertical-text") }
   case object CursorAlias extends Cursor { val payload = JsString("alias") }
   case object CursorCopy extends Cursor { val payload = JsString("copy") }
   case object CursorMove extends Cursor { val payload = JsString("move") }
   case object CursorNoDrop extends Cursor { val payload = JsString("no-drop") }
   case object CursorNotAllowed extends Cursor { val payload = JsString("not-allowed") }
   case object CursorEResize extends Cursor { val payload = JsString("e-resize") }
   case object CursorNResize extends Cursor { val payload = JsString("n-resize") }
   case object CursorNeResize extends Cursor { val payload = JsString("ne-resize") }
   case object CursorNwResize extends Cursor { val payload = JsString("nw-resize") }
   case object CursorSResize extends Cursor { val payload = JsString("s-resize") }
   case object CursorSeResize extends Cursor { val payload = JsString("se-resize") }
   case object CursorSwResize extends Cursor { val payload = JsString("sw-resize") }
   case object CursorWResize extends Cursor { val payload = JsString("w-resize") }
   case object CursorEwResize extends Cursor { val payload = JsString("ew-resize") }
   case object CursorNsResize extends Cursor { val payload = JsString("ns-resize") }
   case object CursorNeswResize extends Cursor { val payload = JsString("nesw-resize") }
   case object CursorNwseResize extends Cursor { val payload = JsString("nwse-resize") }
   case object CursorColResize extends Cursor { val payload = JsString("col-resize") }
   case object CursorRowResize extends Cursor { val payload = JsString("row-resize") }
   case object CursorAllScroll extends Cursor { val payload = JsString("all-scroll") }
   case object CursorZoomIn extends Cursor { val payload = JsString("zoom-in") }
   case object CursorZoomOut extends Cursor { val payload = JsString("zoom-out") }
   case object CursorGrab extends Cursor { val payload = JsString("grab") }
   case object CursorGrabbing extends Cursor { val payload = JsString("grabbing") }

////////////////////////////////////////////////////////////////////////

// MarkConfigEndAngle (UnionType)

sealed trait MarkConfigEndAngle 
   case class MarkConfigEndAngleAsNumber(value: JsNumber) extends MarkConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionStringFieldDefTextValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ValueDefWithConditionStringFieldDefTextValue 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleOpacity (UnionType)

sealed trait AxisTitleOpacity 
   case class AxisTitleOpacityAsNumber(value: JsNumber) extends AxisTitleOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingTooltip (UnionType)
/**
 * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
 **/
sealed trait FacetedEncodingTooltip 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere
   case class FacetedEncodingTooltipAsArrayOfStringFieldDef(value: Seq[StringFieldDef]) extends FacetedEncodingTooltip
   case object FacetedEncodingTooltipAsNull extends FacetedEncodingTooltip

////////////////////////////////////////////////////////////////////////

// MarkDefYOffset (UnionType)
/**
 * Offset for y-position.
 **/
sealed trait MarkDefYOffset 
   case class MarkDefYOffsetAsNumber(value: JsNumber) extends MarkDefYOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffsetBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingYOffsetBin 
   case class SharedEncodingYOffsetBinAsBool(value: Boolean) extends SharedEncodingYOffsetBin
   // BinParams is defined elsewhere
   case object SharedEncodingYOffsetBinAsNull extends SharedEncodingYOffsetBin

////////////////////////////////////////////////////////////////////////

// RepeatMapping (StructType)

case class RepeatMapping(
  /**
   * An array of fields to be repeated horizontally.
   **/
  var `column` : Option[Seq[String]] = None,
  /**
   * An array of fields to be repeated vertically.
   **/
  var `row` : Option[Seq[String]] = None
) extends TopLevelRepeatSpecAsObject1Repeat with NonLayerRepeatSpecRepeat 
{  }
object RepeatMapping {
  val definedFields = Set("column", "row") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigCornerRadiusBottomRight (UnionType)

sealed trait RectConfigCornerRadiusBottomRight 
   case class RectConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends RectConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendOrient (EnumType)
/**
 * The orientation of the legend, which determines how the legend is positioned within the scene. One of `"left"`, `"right"`, `"top"`, `"bottom"`, `"top-left"`, `"top-right"`, `"bottom-left"`, `"bottom-right"`, `"none"`.
 * 
 * __Default value:__ `"right"`
 **/
sealed trait LegendOrient  { val payload: JsValue }
   case object LegendOrientNone extends LegendOrient { val payload = JsString("none") }
   case object LegendOrientLeft extends LegendOrient { val payload = JsString("left") }
   case object LegendOrientRight extends LegendOrient { val payload = JsString("right") }
   case object LegendOrientTop extends LegendOrient { val payload = JsString("top") }
   case object LegendOrientBottom extends LegendOrient { val payload = JsString("bottom") }
   case object LegendOrientTopLeft extends LegendOrient { val payload = JsString("top-left") }
   case object LegendOrientTopRight extends LegendOrient { val payload = JsString("top-right") }
   case object LegendOrientBottomLeft extends LegendOrient { val payload = JsString("bottom-left") }
   case object LegendOrientBottomRight extends LegendOrient { val payload = JsString("bottom-right") }

////////////////////////////////////////////////////////////////////////

// ScaleConfigMaxStrokeWidth (ConstrainedType)
/**
 * Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.
 * 
 * __Default value:__ `4`
 **/
case class ScaleConfigMaxStrokeWidth(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleConfigQuantizeCount (ConstrainedType)
/**
 * Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.
 * 
 * __Default value:__ `4`
 **/
case class ScaleConfigQuantizeCount(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeOffset (UnionType)

sealed trait MarkDefStrokeOffset 
   case class MarkDefStrokeOffsetAsNumber(value: JsNumber) extends MarkDefStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RelativeBandSize (StructType)

case class RelativeBandSize(
  /**
   * The relative band size.  For example `0.5` means half of the band scale's band width.
   **/
  var `band` : JsNumber
) extends MarkDefHeight with MarkDefDiscreteBandSize with MarkDefWidth with BarConfigDiscreteBandSize with RectConfigDiscreteBandSize 
{  }
object RelativeBandSize {
  val definedFields = Set("band") 
}

////////////////////////////////////////////////////////////////////////

// ShapeDef (UnionType)
/**
 * Shape of the mark.
 * 
 * 1. For `point` marks the supported values include:   - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.   - the line symbol `"stroke"`   - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * 2. For `geoshape` marks it should be a field definition of the geojson data
 * 
 * __Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape` property. (`"circle"` if unset.)
 **/
sealed trait ShapeDef 
   // FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNull is defined elsewhere
   // FieldOrDatumDefWithConditionDatumDefStringNull is defined elsewhere
   // ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNull is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelAlign (UnionType)
/**
 * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
 **/
sealed trait HeaderConfigLabelAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefGradientStringNullExprRef (UnionType)

sealed trait ConditionalValueDefGradientStringNullExprRef extends FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullCondition with SharedEncodingStrokeCondition with SharedEncodingColorCondition with ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition with SharedEncodingFillCondition with FieldOrDatumDefWithConditionDatumDefGradientStringNullCondition
   // ConditionalPredicateValueDefGradientStringNullExprRef is defined elsewhere
   // ConditionalParameterValueDefGradientStringNullExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait StringFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigGridDash (UnionType)

sealed trait AxisConfigGridDash 
   case class AxisConfigGridDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisConfigGridDash
   // ExprRef is defined elsewhere
   // ConditionalAxisNumberArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefRadius2Offset (UnionType)
/**
 * Offset for radius2.
 **/
sealed trait OverlayMarkDefRadius2Offset 
   case class OverlayMarkDefRadius2OffsetAsNumber(value: JsNumber) extends OverlayMarkDefRadius2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// UnitSpecWithFrameHeight (UnionType)
/**
 * The height of a visualization.
 * 
 * - For a plot with a continuous y-field, height should be a number.
 * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on height, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait UnitSpecWithFrameHeight 
   case class UnitSpecWithFrameHeightAsNumber(value: JsNumber) extends UnitSpecWithFrameHeight
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingFillTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait FacetSpecCenter 
   case class FacetSpecCenterAsBool(value: Boolean) extends FacetSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefAlignNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefAlignNullExprRef extends ConditionalAxisLabelAlignAsObject2Condition with ConditionalAxisLabelAlignAsObject1Condition
   // ConditionalPredicateValueDefAlignNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefAlignNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Config (StructType)
/**
 * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
 **/
case class Config(
  /**
   * Config for temporal axes.
   **/
  var `axisTemporal` : Option[AxisConfig] = None,
  /**
   * Rect-Specific Config
   **/
  var `rect` : Option[RectConfig] = None,
  /**
   * Mark Config
   **/
  var `mark` : Option[MarkConfig] = None,
  /**
   * Config for y-quantitative axes.
   **/
  var `axisYQuantitative` : Option[AxisConfig] = None,
  /**
   * Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single).
   **/
  var `view` : Option[ViewConfig] = None,
  /**
   * Box Config
   **/
  var `boxplot` : Option[BoxPlotConfig] = None,
  /**
   * Config for x-axes with "point" scales.
   **/
  var `axisXPoint` : Option[AxisConfig] = None,
  /**
   * Area-Specific Config
   **/
  var `area` : Option[AreaConfig] = None,
  /**
   * Config for axes with "band" scales.
   **/
  var `axisBand` : Option[AxisConfig] = None,
  /**
   * Point-Specific Config
   **/
  var `point` : Option[MarkConfig] = None,
  /**
   * Defines how Vega-Lite generates title for fields. There are three possible styles:
   * - `"verbal"` (Default) - displays function in a verbal style (e.g., "Sum of field", "Year-month of date", "field (binned)").
   * - `"function"` - displays function using parentheses and capitalized texts (e.g., "SUM(field)", "YEARMONTH(date)", "BIN(field)").
   * - `"plain"` - displays only the field name without functions (e.g., "field", "date", "field").
   **/
  var `fieldTitle` : Option[ConfigFieldTitle] = None,
  /**
   * Circle-Specific Config
   **/
  var `circle` : Option[MarkConfig] = None,
  /**
   * Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config).
   **/
  var `projection` : Option[ProjectionConfig] = None,
  /**
   * An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config).
   **/
  var `style` : Option[StyleConfigIndex] = None,
  /**
   * Line-Specific Config
   **/
  var `line` : Option[LineConfig] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[ConfigBackground] = None,
  /**
   * Image-specific Config
   **/
  var `image` : Option[RectConfig] = None,
  /**
   * Header configuration, which determines default properties for non-row/column facet [headers](https://vega.github.io/vega-lite/docs/header.html).
   * 
   * For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
   **/
  var `headerFacet` : Option[HeaderConfig] = None,
  /**
   * Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
   **/
  var `scale` : Option[ScaleConfig] = None,
  /**
   * A delimiter, such as a newline character, upon which to break text strings into multiple lines. This property provides a global default for text marks, which is overridden by mark or style config settings, and by the lineBreak mark encoding channel. If signal-valued, either string or regular expression (regexp) values are valid.
   **/
  var `lineBreak` : Option[ConfigLineBreak] = None,
  /**
   * Allow the `formatType` property for text marks and guides to accept a custom formatter function [registered as a Vega expression](https://vega.github.io/vega-lite/usage/compile.html#format-type).
   **/
  var `customFormatTypes` : Option[Boolean] = None,
  /**
   * Trail-Specific Config
   **/
  var `trail` : Option[LineConfig] = None,
  /**
   * Config for axes with "point" scales.
   **/
  var `axisPoint` : Option[AxisConfig] = None,
  /**
   * Header configuration, which determines default properties for column [headers](https://vega.github.io/vega-lite/docs/header.html).
   * 
   * For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
   **/
  var `headerColumn` : Option[HeaderConfig] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[ConfigParamsElement]] = None,
  /**
   * Default configuration for all concatenation and repeat view composition operators (`concat`, `hconcat`, `vconcat`, and `repeat`)
   **/
  var `concat` : Option[CompositionConfig] = None,
  /**
   * Config for axes with "point" or "band" scales.
   **/
  var `axisDiscrete` : Option[AxisConfig] = None,
  /**
   * Config for y-axis along the right edge of the chart.
   **/
  var `axisRight` : Option[AxisConfig] = None,
  /**
   * Rule-Specific Config
   **/
  var `rule` : Option[MarkConfig] = None,
  /**
   * ErrorBand Config
   **/
  var `errorband` : Option[ErrorBandConfig] = None,
  /**
   * Text-Specific Config
   **/
  var `text` : Option[MarkConfig] = None,
  /**
   * Config for x-temporal axes.
   **/
  var `axisXTemporal` : Option[AxisConfig] = None,
  /**
   * Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config).
   **/
  var `legend` : Option[LegendConfig] = None,
  /**
   * Tick-Specific Config
   **/
  var `tick` : Option[TickConfig] = None,
  /**
   * Geoshape-Specific Config
   **/
  var `geoshape` : Option[MarkConfig] = None,
  /**
   * Config for x-axes with "point" or "band" scales.
   **/
  var `axisXDiscrete` : Option[AxisConfig] = None,
  /**
   * Default axis and legend title for count fields.
   * 
   * __Default value:__ `'Count of Records`.
   **/
  var `countTitle` : Option[String] = None,
  /**
   * Square-Specific Config
   **/
  var `square` : Option[MarkConfig] = None,
  /**
   * Locale definitions for string parsing and formatting of number and date values. The locale object should contain `number` and/or `time` properties with [locale definitions](https://vega.github.io/vega/docs/api/locale/). Locale definitions provided in the config block may be overridden by the View constructor locale option.
   **/
  var `locale` : Option[Locale] = None,
  /**
   * ErrorBar Config
   **/
  var `errorbar` : Option[ErrorBarConfig] = None,
  /**
   * X-axis specific config.
   **/
  var `axisX` : Option[AxisConfig] = None,
  /**
   * Arc-specific Config
   **/
  var `arc` : Option[RectConfig] = None,
  /**
   * Default font for all text marks, titles, and labels.
   **/
  var `font` : Option[String] = None,
  /**
   * Config for y-axes with "band" scales.
   **/
  var `axisYBand` : Option[AxisConfig] = None,
  /**
   * Config for x-axis along the top edge of the chart.
   **/
  var `axisTop` : Option[AxisConfig] = None,
  /**
   * Config for quantitative axes.
   **/
  var `axisQuantitative` : Option[AxisConfig] = None,
  /**
   * Config for x-quantitative axes.
   **/
  var `axisXQuantitative` : Option[AxisConfig] = None,
  /**
   * An object hash that defines default range arrays or schemes for using with scales. For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
   **/
  var `range` : Option[RangeConfig] = None,
  /**
   * An object hash for defining default properties for each type of selections.
   **/
  var `selection` : Option[SelectionConfig] = None,
  /**
   * Config for y-axes with "point" scales.
   **/
  var `axisYPoint` : Option[AxisConfig] = None,
  /**
   * Header configuration, which determines default properties for row [headers](https://vega.github.io/vega-lite/docs/header.html).
   * 
   * For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
   **/
  var `headerRow` : Option[HeaderConfig] = None,
  /**
   * Config for x-axis along the bottom edge of the chart.
   **/
  var `axisBottom` : Option[AxisConfig] = None,
  /**
   * Config for y-axes with "point" or "band" scales.
   **/
  var `axisYDiscrete` : Option[AxisConfig] = None,
  /**
   * Config for y-temporal axes.
   **/
  var `axisYTemporal` : Option[AxisConfig] = None,
  /**
   * Config for y-axis along the left edge of the chart.
   **/
  var `axisLeft` : Option[AxisConfig] = None,
  /**
   * Bar-Specific Config
   **/
  var `bar` : Option[BarConfig] = None,
  /**
   * Y-axis specific config.
   **/
  var `axisY` : Option[AxisConfig] = None,
  /**
   * Default time format for raw time values (without time units) in text marks, legend labels and header labels.
   * 
   * __Default value:__ `"%b %d, %Y"` __Note:__ Axes automatically determine the format for each label automatically so this config does not affect axes.
   **/
  var `timeFormat` : Option[String] = None,
  /**
   * Header configuration, which determines default properties for all [headers](https://vega.github.io/vega-lite/docs/header.html).
   * 
   * For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
   **/
  var `header` : Option[HeaderConfig] = None,
  /**
   * Default configuration for the `facet` view composition operator
   **/
  var `facet` : Option[CompositionConfig] = None,
  /**
   * A boolean flag indicating if ARIA default attributes should be included for marks and guides (SVG output only). If false, the `"aria-hidden"` attribute will be set for all guides, removing them from the ARIA accessibility tree and Vega-Lite will not generate default descriptions for marks.
   * 
   * __Default value:__ `true`.
   **/
  var `aria` : Option[Boolean] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[ConfigPadding] = None,
  /**
   * Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config).
   **/
  var `title` : Option[TitleConfig] = None,
  /**
   * Axis configuration, which determines default properties for all `x` and `y` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config).
   **/
  var `axis` : Option[AxisConfig] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[ConfigAutosize] = None,
  /**
   * Config for x-axes with "band" scales.
   **/
  var `axisXBand` : Option[AxisConfig] = None,
  /**
   * D3 Number format for guide labels and text marks. For example `"s"` for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).
   **/
  var `numberFormat` : Option[String] = None
)  
{  }
object Config {
  val definedFields = Set("axisYBand", "bar", "padding", "axisYPoint", "view", "aria", "numberFormat", "background", "axis", "axisBottom", "concat", "axisQuantitative", "projection", "header", "axisYDiscrete", "arc", "fieldTitle", "font", "axisYTemporal", "axisYQuantitative", "timeFormat", "errorband", "axisTop", "text", "lineBreak", "axisXDiscrete", "countTitle", "scale", "point", "rule", "axisXBand", "range", "axisPoint", "autosize", "locale", "area", "legend", "errorbar", "axisTemporal", "rect", "axisXPoint", "trail", "circle", "axisX", "image", "headerColumn", "tick", "headerRow", "headerFacet", "axisXQuantitative", "axisRight", "params", "title", "mark", "line", "axisXTemporal", "style", "boxplot", "facet", "selection", "axisDiscrete", "geoshape", "axisBand", "customFormatTypes", "axisLeft", "square", "axisY") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsFontWeight (UnionType)

sealed trait TitleParamsFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LatLongFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class LatLongFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// BarConfigDescription (UnionType)

sealed trait BarConfigDescription 
   case class BarConfigDescriptionAsString(value: String) extends BarConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class MarkConfigAngleAsNumber(value: JsNumber) extends MarkConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OrderFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait OrderFieldDefBin 
   case class OrderFieldDefBinAsBool(value: Boolean) extends OrderFieldDefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object OrderFieldDefBinAsNull extends OrderFieldDefBin

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeJoin (UnionType)

sealed trait RectConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait AreaConfigShape 
   case class AreaConfigShapeAsString(value: String) extends AreaConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait MarkDefBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingUrlValue 
   case class SharedEncodingUrlValueAsString(value: String) extends SharedEncodingUrlValue
   case object SharedEncodingUrlValueAsNull extends SharedEncodingUrlValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkDefRadius2 
   case class MarkDefRadius2AsNumber(value: JsNumber) extends MarkDefRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigWidth (UnionType)

sealed trait MarkConfigWidth 
   case class MarkConfigWidthAsNumber(value: JsNumber) extends MarkConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait PositionFieldDefBin 
   case class PositionFieldDefBinAsBool(value: Boolean) extends PositionFieldDefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object PositionFieldDefBinAsNull extends PositionFieldDefBin

////////////////////////////////////////////////////////////////////////

// TitleOrient (EnumType)
/**
 * Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)
 **/
sealed trait TitleOrient extends TitleConfigOrient with TitleParamsOrient { val payload: JsValue }
   case object TitleOrientNone extends TitleOrient { val payload = JsString("none") }
   case object TitleOrientLeft extends TitleOrient { val payload = JsString("left") }
   case object TitleOrientRight extends TitleOrient { val payload = JsString("right") }
   case object TitleOrientTop extends TitleOrient { val payload = JsString("top") }
   case object TitleOrientBottom extends TitleOrient { val payload = JsString("bottom") }

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigExtent (UnionType)
/**
 * The extent of the whiskers. Available options include:
 * - `"min-max"`: min and max are the lower and upper whiskers respectively.
 * - A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
 * 
 * __Default value:__ `1.5`.
 **/
sealed trait BoxPlotConfigExtent 
   // MinMax is defined elsewhere
   case class BoxPlotConfigExtentAsNumber(value: JsNumber) extends BoxPlotConfigExtent

////////////////////////////////////////////////////////////////////////

// BinParamsDivide (ConstrainedType)
/**
 * Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.
 * 
 * __Default value:__ `[5, 2]`
 **/
case class BinParamsDivide(value: Seq[JsNumber]) 
{ assert(value.size >= 2)
  assert(value.size <= 1) }

////////////////////////////////////////////////////////////////////////

// AxisTitleLineHeight (UnionType)

sealed trait AxisTitleLineHeight 
   case class AxisTitleLineHeightAsNumber(value: JsNumber) extends AxisTitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleLimit (UnionType)

sealed trait AxisConfigTitleLimit 
   // AxisConfigTitleLimitAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class RectConfigFillOpacityAsNumber(value: JsNumber) extends RectConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldLTEPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldLTEPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeOpacity (UnionType)

sealed trait BarConfigStrokeOpacity 
   // BarConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingXDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadiusEnd (UnionType)
/**
 * - For vertical bars, top-left and top-right corner radius.
 * 
 * - For horizontal bars, top-right and bottom-right corner radius.
 **/
sealed trait BarConfigCornerRadiusEnd 
   case class BarConfigCornerRadiusEndAsNumber(value: JsNumber) extends BarConfigCornerRadiusEnd
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait HeaderFormat 
   case class HeaderFormatAsString(value: String) extends HeaderFormat
   case class HeaderFormatAsDictOfAny(value: Map[String,JsValue]) extends HeaderFormat

////////////////////////////////////////////////////////////////////////

// MarkDefLineHeight (UnionType)

sealed trait MarkDefLineHeight 
   case class MarkDefLineHeightAsNumber(value: JsNumber) extends MarkDefLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingStrokeDashBin 
   case class SharedEncodingStrokeDashBinAsBool(value: Boolean) extends SharedEncodingStrokeDashBin
   // BinParams is defined elsewhere
   case object SharedEncodingStrokeDashBinAsNull extends SharedEncodingStrokeDashBin

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefNumberExprRef (UnionType)

sealed trait ConditionalValueDefNumberExprRef extends FieldOrDatumDefWithConditionDatumDefNumberCondition with ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition with SharedEncodingSizeCondition with SharedEncodingFillOpacityCondition with SharedEncodingStrokeWidthCondition with SharedEncodingStrokeDashCondition with SharedEncodingAngleCondition with FieldOrDatumDefWithConditionMarkPropFieldDefNumberCondition with SharedEncodingOpacityCondition with SharedEncodingStrokeOpacityCondition
   // ConditionalPredicateValueDefNumberExprRef is defined elsewhere
   // ConditionalParameterValueDefNumberExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeWidth (UnionType)

sealed trait BarConfigStrokeWidth 
   // BarConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigEllipsis (UnionType)

sealed trait RectConfigEllipsis 
   case class RectConfigEllipsisAsString(value: String) extends RectConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelVConcatSpecBounds  { val payload: JsValue }
   case object TopLevelVConcatSpecBoundsFull extends TopLevelVConcatSpecBounds { val payload = JsString("full") }
   case object TopLevelVConcatSpecBoundsFlush extends TopLevelVConcatSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// RectConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait RectConfigSize 
   case class RectConfigSizeAsNumber(value: JsNumber) extends RectConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickMinStep (UnionType)
/**
 * The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.
 **/
sealed trait AxisTickMinStep 
   case class AxisTickMinStepAsNumber(value: JsNumber) extends AxisTickMinStep
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait MarkConfigTooltip 
   case class MarkConfigTooltipAsString(value: String) extends MarkConfigTooltip
   case object MarkConfigTooltipAsNull extends MarkConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class MarkConfigTooltipAsBool(value: Boolean) extends MarkConfigTooltip
   case class MarkConfigTooltipAsNumber(value: JsNumber) extends MarkConfigTooltip

////////////////////////////////////////////////////////////////////////

// AxisGridWidth (UnionType)

sealed trait AxisGridWidth 
   // AxisGridWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldRangePredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldRangePredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait MarkDefRadius 
   case class MarkDefRadiusAsNumber(value: JsNumber) extends MarkDefRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfig (StructType)
/**
 * Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).
 **/
case class ScaleConfig(
  /**
   * Default minimum opacity for mapping a field to opacity.
   * 
   * __Default value:__ `0.3`
   **/
  var `minOpacity` : Option[ScaleConfigMinOpacity] = None,
  /**
   * Default inner padding for `x` and `y` band scales with nested `xOffset` and `yOffset` encoding.
   * 
   * __Default value:__ `0.2`
   **/
  var `bandWithNestedOffsetPaddingInner` : Option[ScaleConfigBandWithNestedOffsetPaddingInner] = None,
  /**
   * Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.
   * 
   * __Default value:__ `4`
   **/
  var `quantizeCount` : Option[ScaleConfigQuantizeCount] = None,
  /**
   * If true, values that exceed the data domain are clamped to either the minimum or maximum range value
   **/
  var `clamp` : Option[ScaleConfigClamp] = None,
  /**
   * The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.
   * 
   * __Default value:__ `2`
   **/
  var `minBandSize` : Option[ScaleConfigMinBandSize] = None,
  /**
   * Default inner padding for `x` and `y` band-ordinal scales of `"bar"` marks.
   * 
   * __Default value:__ `0.1`
   **/
  var `barBandPaddingInner` : Option[ScaleConfigBarBandPaddingInner] = None,
  /**
   * Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.
   * 
   * __Default value:__ `4`
   **/
  var `quantileCount` : Option[ScaleConfigQuantileCount] = None,
  /**
   * Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.
   * 
   * This is equivalent to setting `domain` to `"unaggregate"` for aggregated _quantitative_ fields by default.
   * 
   * This property only works with aggregate functions that produce values within the raw data domain (`"mean"`, `"average"`, `"median"`, `"q1"`, `"q3"`, `"min"`, `"max"`). For other aggregations that produce values outside of the raw data domain (e.g. `"count"`, `"sum"`), this property is ignored.
   * 
   * __Default value:__ `false`
   **/
  var `useUnaggregatedDomain` : Option[Boolean] = None,
  /**
   * The default max value for mapping quantitative fields to bar's size/bandSize.
   * 
   * If undefined (default), we will use the axis's size (width or height) - 1.
   **/
  var `maxBandSize` : Option[ScaleConfigMaxBandSize] = None,
  /**
   * If true, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid. (Only available for `x`, `y`, and `size` scales.)
   **/
  var `round` : Option[ScaleConfigRound] = None,
  /**
   * Default inner padding for `x` and `y` band-ordinal scales of `"rect"` marks.
   * 
   * __Default value:__ `0`
   **/
  var `rectBandPaddingInner` : Option[ScaleConfigRectBandPaddingInner] = None,
  /**
   * Default max value for point size scale.
   **/
  var `maxSize` : Option[ScaleConfigMaxSize] = None,
  /**
   * Default minimum value for point size scale with zero=false.
   * 
   * __Default value:__ `9`
   **/
  var `minSize` : Option[ScaleConfigMinSize] = None,
  /**
   * Default inner padding for `x` and `y` band scales.
   * 
   * __Default value:__
   * - `nestedOffsetPaddingInner` for x/y scales with nested x/y offset scales.
   * - `barBandPaddingInner` for bar marks (`0.1` by default)
   * - `rectBandPaddingInner` for rect and other marks (`0` by default)
   **/
  var `bandPaddingInner` : Option[ScaleConfigBandPaddingInner] = None,
  /**
   * The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false
   * 
   * __Default value:__ `8`
   **/
  var `minFontSize` : Option[ScaleConfigMinFontSize] = None,
  /**
   * Default max opacity for mapping a field to opacity.
   * 
   * __Default value:__ `0.8`
   **/
  var `maxOpacity` : Option[ScaleConfigMaxOpacity] = None,
  /**
   * Default padding inner for xOffset/yOffset's band scales.
   * 
   * __Default Value:__ `0`
   **/
  var `offsetBandPaddingInner` : Option[ScaleConfigOffsetBandPaddingInner] = None,
  /**
   * Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.
   * 
   * __Default value:__ `1`
   **/
  var `minStrokeWidth` : Option[ScaleConfigMinStrokeWidth] = None,
  /**
   * Default outer padding for `x` and `y` band scales with nested `xOffset` and `yOffset` encoding.
   * 
   * __Default value:__ `0.2`
   **/
  var `bandWithNestedOffsetPaddingOuter` : Option[ScaleConfigBandWithNestedOffsetPaddingOuter] = None,
  /**
   * Default outer padding for `x` and `y` point-ordinal scales.
   * 
   * __Default value:__ `0.5` (which makes _width/height = number of unique values * step_)
   **/
  var `pointPadding` : Option[ScaleConfigPointPadding] = None,
  /**
   * Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.
   * 
   * __Default value:__ `4`
   **/
  var `maxStrokeWidth` : Option[ScaleConfigMaxStrokeWidth] = None,
  /**
   * The default max value for mapping quantitative fields to text's size/fontSize.
   * 
   * __Default value:__ `40`
   **/
  var `maxFontSize` : Option[ScaleConfigMaxFontSize] = None,
  /**
   * Reverse x-scale by default (useful for right-to-left charts).
   **/
  var `xReverse` : Option[ScaleConfigXReverse] = None,
  /**
   * Default padding outer for xOffset/yOffset's band scales.
   * 
   * __Default Value:__ `0`
   **/
  var `offsetBandPaddingOuter` : Option[ScaleConfigOffsetBandPaddingOuter] = None,
  /**
   * Default outer padding for `x` and `y` band scales.
   * 
   * __Default value:__ `paddingInner/2` (which makes _width/height = number of unique values * step_)
   **/
  var `bandPaddingOuter` : Option[ScaleConfigBandPaddingOuter] = None,
  /**
   * Default padding for continuous x/y scales.
   * 
   * __Default:__ The bar width for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.
   **/
  var `continuousPadding` : Option[ScaleConfigContinuousPadding] = None
)  
{  }
object ScaleConfig {
  val definedFields = Set("offsetBandPaddingOuter", "rectBandPaddingInner", "maxSize", "maxStrokeWidth", "bandPaddingInner", "minStrokeWidth", "clamp", "bandWithNestedOffsetPaddingOuter", "bandPaddingOuter", "barBandPaddingInner", "round", "minBandSize", "maxBandSize", "quantileCount", "maxFontSize", "maxOpacity", "minFontSize", "pointPadding", "minOpacity", "minSize", "useUnaggregatedDomain", "bandWithNestedOffsetPaddingInner", "continuousPadding", "quantizeCount", "offsetBandPaddingInner", "xReverse") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleLimitAsNumber (ConstrainedType)
/**
 * Maximum allowed pixel width of legend titles.
 * 
 * __Default value:__ `180`.
 **/
case class LegendConfigTitleLimitAsNumber(value: JsNumber) extends LegendConfigTitleLimit
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject1TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefAsObject1TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingStrokeWidthDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickCount (UnionType)
/**
 * The desired number of tick values for quantitative legends.
 **/
sealed trait TickCount extends LegendConfigTickCount
   case class TickCountAsNumber(value: JsNumber) extends TickCount
   // TimeInterval is defined elsewhere
   // TimeIntervalStep is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelPadding (UnionType)
/**
 * The padding, in pixel, between facet header's label and the plot.
 * 
 * __Default value:__ `10`
 **/
sealed trait HeaderConfigLabelPadding 
   case class HeaderConfigLabelPaddingAsNumber(value: JsNumber) extends HeaderConfigLabelPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffsetType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingYOffsetType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// JoinAggregateFieldDef (StructType)

case class JoinAggregateFieldDef(
  /**
   * The output name for the join aggregate operation.
   **/
  var `as` : String,
  /**
   * The data field for which to compute the aggregate function. This can be omitted for functions that do not operate over a field such as `"count"`.
   **/
  var `field` : Option[String] = None,
  /**
   * The aggregation operation to apply (e.g., `"sum"`, `"average"` or `"count"`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
   **/
  var `op` : AggregateOp
)  
{  }
object JoinAggregateFieldDef {
  val definedFields = Set("as", "field", "op") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleLineHeight (UnionType)

sealed trait LegendConfigTitleLineHeight 
   case class LegendConfigTitleLineHeightAsNumber(value: JsNumber) extends LegendConfigTitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelFacetSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LogicalOrPredicate (StructType)

case class LogicalOrPredicate(
  var `or` : Seq[PredicateComposition]
) extends PredicateComposition 
{  }
object LogicalOrPredicate {
  val definedFields = Set("or") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait MarkDefStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object MarkDefStrokeAsNull extends MarkDefStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SchemeParams (StructType)

case class SchemeParams(
  /**
   * The number of colors to use in the scheme. This can be useful for scale types such as `"quantize"`, which use the length of the scale range to determine the number of discrete bins for the scale domain.
   **/
  var `count` : Option[JsNumber] = None,
  /**
   * The extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.
   **/
  var `extent` : Option[Seq[JsNumber]] = None,
  /**
   * A color scheme name for ordinal scales (e.g., `"category10"` or `"blues"`).
   * 
   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
   **/
  var `name` : String
) extends ScaleScheme 
{  }
object SchemeParams {
  val definedFields = Set("count", "extent", "name") 
}

////////////////////////////////////////////////////////////////////////

// Vector7String (ConstrainedType)
/**
 * The full names of the weekdays, starting with Sunday.
 **/
case class Vector7String(value: Seq[String]) 
{ assert(value.size >= 7)
  assert(value.size <= 7) }

////////////////////////////////////////////////////////////////////////

// AxisGridDashOffset (UnionType)

sealed trait AxisGridDashOffset 
   case class AxisGridDashOffsetAsNumber(value: JsNumber) extends AxisGridDashOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Spacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait TopLevelRepeatSpecAsObject1Spacing 
   case class TopLevelRepeatSpecAsObject1SpacingAsNumber(value: JsNumber) extends TopLevelRepeatSpecAsObject1Spacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitudeType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingLongitudeType 
   // Quantitative is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigDescription (UnionType)

sealed trait LineConfigDescription 
   case class LineConfigDescriptionAsString(value: String) extends LineConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolSizeAsNumber (ConstrainedType)
/**
 * The size of the legend symbol, in pixels.
 * 
 * __Default value:__ `100`.
 **/
case class LegendConfigSymbolSizeAsNumber(value: JsNumber) extends LegendConfigSymbolSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberAsObject1 (StructType)

case class ConditionalAxisNumberAsObject1(
  var `condition` : ConditionalAxisNumberAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalAxisNumberAsObject1Value
) extends ConditionalAxisNumber 
{  }
object ConditionalAxisNumberAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// HeaderLabelFontWeight (UnionType)
/**
 * The font weight of the header label.
 **/
sealed trait HeaderLabelFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberAsObject2 (StructType)

case class ConditionalAxisNumberAsObject2(
  var `condition` : ConditionalAxisNumberAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisNumber 
{  }
object ConditionalAxisNumberAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// TickConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait TickConfigX2 
   case class TickConfigX2AsNumber(value: JsNumber) extends TickConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleNice (UnionType)
/**
 * Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.
 * 
 * For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.
 * 
 * For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{"interval": "month", "step": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.
 * 
 * __Default value:__ `true` for unbinned _quantitative_ fields without explicit domain bounds; `false` otherwise.
 **/
sealed trait ScaleNice 
   // ExprRef is defined elsewhere
   case class ScaleNiceAsBool(value: Boolean) extends ScaleNice
   // TimeInterval is defined elsewhere
   // TimeIntervalStep is defined elsewhere
   case class ScaleNiceAsNumber(value: JsNumber) extends ScaleNice

////////////////////////////////////////////////////////////////////////

// MarkConfigDx (UnionType)

sealed trait MarkConfigDx 
   case class MarkConfigDxAsNumber(value: JsNumber) extends MarkConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigRule (UnionType)

sealed trait BoxPlotConfigRule 
   case class BoxPlotConfigRuleAsBool(value: Boolean) extends BoxPlotConfigRule
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait TickConfigShape 
   case class TickConfigShapeAsString(value: String) extends TickConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingStrokeWidthBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ViewConfigDiscreteWidth (UnionType)
/**
 * The default width when the plot has non-arc marks and either a discrete x-field or no x-field. The width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step.
 * 
 * __Default value:__ a step size based on `config.view.step`.
 **/
sealed trait ViewConfigDiscreteWidth 
   case class ViewConfigDiscreteWidthAsNumber(value: JsNumber) extends ViewConfigDiscreteWidth
   // ViewConfigDiscreteWidthAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LookupData (StructType)

case class LookupData(
  /**
   * Secondary data source to lookup in.
   **/
  var `data` : Data,
  /**
   * Fields in foreign data or selection to lookup. If not specified, the entire object is queried.
   **/
  var `fields` : Option[Seq[String]] = None,
  /**
   * Key in data to lookup.
   **/
  var `key` : String
) extends LookupTransformFrom 
{  }
object LookupData {
  val definedFields = Set("data", "fields", "key") 
}

////////////////////////////////////////////////////////////////////////

// LegendResolveMap (StructType)

case class LegendResolveMap(
  var `size` : Option[ResolveMode] = None,
  var `strokeOpacity` : Option[ResolveMode] = None,
  var `fillOpacity` : Option[ResolveMode] = None,
  var `color` : Option[ResolveMode] = None,
  var `fill` : Option[ResolveMode] = None,
  var `strokeDash` : Option[ResolveMode] = None,
  var `strokeWidth` : Option[ResolveMode] = None,
  var `angle` : Option[ResolveMode] = None,
  var `stroke` : Option[ResolveMode] = None,
  var `shape` : Option[ResolveMode] = None,
  var `opacity` : Option[ResolveMode] = None
)  
{  }
object LegendResolveMap {
  val definedFields = Set("strokeWidth", "size", "strokeDash", "strokeOpacity", "stroke", "shape", "angle", "fill", "opacity", "fillOpacity", "color") 
}

////////////////////////////////////////////////////////////////////////

// AxisGridDash (UnionType)

sealed trait AxisGridDash 
   case class AxisGridDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisGridDash
   // ExprRef is defined elsewhere
   // ConditionalAxisNumberArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigDy (UnionType)

sealed trait MarkConfigDy 
   case class MarkConfigDyAsNumber(value: JsNumber) extends MarkConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisString (UnionType)

sealed trait ConditionalAxisString extends AxisLabelFont with AxisConfigLabelFont
   // ConditionalAxisStringAsObject1 is defined elsewhere
   // ConditionalAxisStringAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigHref (UnionType)

sealed trait MarkConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigAria (UnionType)

sealed trait AreaConfigAria 
   case class AreaConfigAriaAsBool(value: Boolean) extends AreaConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCursor (UnionType)

sealed trait MarkConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait BarConfigShape 
   case class BarConfigShapeAsString(value: String) extends BarConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SphereGeneratorSphere (UnionType)
/**
 * Generate sphere GeoJSON data for the full globe.
 **/
sealed trait SphereGeneratorSphere 
   // True is defined elsewhere
   case object SphereGeneratorSphereAsEmptyObject extends SphereGeneratorSphere

////////////////////////////////////////////////////////////////////////

// HeaderTitleFontWeight (UnionType)
/**
 * Font weight of the header title. This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
 **/
sealed trait HeaderTitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelOffsetAsNumber (ConstrainedType)
/**
 * The offset of the legend label.
 * 
 * __Default value:__ `4`.
 **/
case class LegendConfigLabelOffsetAsNumber(value: JsNumber) extends LegendConfigLabelOffset
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfig (StructType)
/**
 * Axis configuration, which determines default properties for all `x` and `y` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config).
 **/
case class AxisConfig(
  var `labelOpacity` : Option[AxisConfigLabelOpacity] = None,
  var `domainCap` : Option[AxisConfigDomainCap] = None,
  var `domainColor` : Option[AxisConfigDomainColor] = None,
  /**
   * A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
   * 
   * __Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style `"foo"` has higher precedence).
   **/
  var `style` : Option[AxisConfigStyle] = None,
  /**
   * A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
   * 
   * __Default value:__ `true`
   **/
  var `domain` : Option[Boolean] = None,
  /**
   * The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.
   * 
   * __Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)
   **/
  var `offset` : Option[AxisConfigOffset] = None,
  var `gridOpacity` : Option[AxisConfigGridOpacity] = None,
  var `labelFontSize` : Option[AxisConfigLabelFontSize] = None,
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[AxisConfigFormat] = None,
  var `gridWidth` : Option[AxisConfigGridWidth] = None,
  /**
   * A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale's range.
   * 
   * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, an object-valued interval specifier of the form `{"interval": "month", "step": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.
   * 
   * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.
   **/
  var `tickCount` : Option[AxisConfigTickCount] = None,
  var `gridCap` : Option[AxisConfigGridCap] = None,
  var `labelAngle` : Option[AxisConfigLabelAngle] = None,
  var `domainOpacity` : Option[AxisConfigDomainOpacity] = None,
  var `description` : Option[AxisConfigDescription] = None,
  var `titleFont` : Option[AxisConfigTitleFont] = None,
  var `titleFontStyle` : Option[AxisConfigTitleFontStyle] = None,
  var `tickDashOffset` : Option[AxisConfigTickDashOffset] = None,
  var `labelColor` : Option[AxisConfigLabelColor] = None,
  var `domainDashOffset` : Option[AxisConfigDomainDashOffset] = None,
  var `labelFontWeight` : Option[AxisConfigLabelFontWeight] = None,
  var `gridDash` : Option[AxisConfigGridDash] = None,
  var `minExtent` : Option[AxisConfigMinExtent] = None,
  var `titleLineHeight` : Option[AxisConfigTitleLineHeight] = None,
  var `labelLineHeight` : Option[AxisConfigLabelLineHeight] = None,
  var `tickCap` : Option[AxisConfigTickCap] = None,
  var `titleX` : Option[AxisConfigTitleX] = None,
  var `bandPosition` : Option[AxisConfigBandPosition] = None,
  /**
   * Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `"bandPosition": 1` and an axis `"padding"` value of `0`.
   **/
  var `tickExtra` : Option[Boolean] = None,
  /**
   * A boolean flag indicating if grid lines should be included as part of the axis
   * 
   * __Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.
   **/
  var `grid` : Option[Boolean] = None,
  var `tickBand` : Option[AxisConfigTickBand] = None,
  var `titlePadding` : Option[AxisConfigTitlePadding] = None,
  /**
   * The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.
   **/
  var `tickMinStep` : Option[AxisConfigTickMinStep] = None,
  var `titleY` : Option[AxisConfigTitleY] = None,
  /**
   * A boolean flag indicating if labels should be included as part of the axis.
   * 
   * __Default value:__ `true`.
   **/
  var `labels` : Option[Boolean] = None,
  /**
   * Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.
   * 
   * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.
   **/
  var `labelFlush` : Option[AxisConfigLabelFlush] = None,
  /**
   * A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.
   * 
   * __Default value:__ `0` (behind the marks).
   **/
  var `zindex` : Option[AxisConfigZindex] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  var `labelLimit` : Option[AxisConfigLabelLimit] = None,
  var `gridDashOffset` : Option[AxisConfigGridDashOffset] = None,
  var `titleAnchor` : Option[AxisConfigTitleAnchor] = None,
  var `titleColor` : Option[AxisConfigTitleColor] = None,
  /**
   * The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
   * 
   * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
   **/
  var `labelOverlap` : Option[AxisConfigLabelOverlap] = None,
  var `translate` : Option[AxisConfigTranslate] = None,
  var `labelFlushOffset` : Option[AxisConfigLabelFlushOffset] = None,
  var `domainWidth` : Option[AxisConfigDomainWidth] = None,
  /**
   * Boolean flag indicating if pixel position values should be rounded to the nearest integer.
   * 
   * __Default value:__ `true`
   **/
  var `tickRound` : Option[Boolean] = None,
  var `labelOffset` : Option[AxisConfigLabelOffset] = None,
  /**
   * Boolean value that determines whether the axis should include ticks.
   * 
   * __Default value:__ `true`
   **/
  var `ticks` : Option[Boolean] = None,
  /**
   * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).
   * 
   * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
   **/
  var `orient` : Option[AxisConfigOrient] = None,
  var `domainDash` : Option[AxisConfigDomainDash] = None,
  var `labelAlign` : Option[AxisConfigLabelAlign] = None,
  /**
   * Disable axis by default.
   **/
  var `disable` : Option[Boolean] = None,
  /**
   * Explicitly set the visible axis tick values.
   **/
  var `values` : Option[AxisConfigValues] = None,
  /**
   * The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.
   * 
   * __Default value__: `0`
   **/
  var `position` : Option[AxisConfigPosition] = None,
  var `titleAngle` : Option[AxisConfigTitleAngle] = None,
  var `labelPadding` : Option[AxisConfigLabelPadding] = None,
  var `aria` : Option[AxisConfigAria] = None,
  /**
   * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
   * 
   * __Note:__ The label text and value can be assessed via the `label` and `value` properties of the axis's backing `datum` object.
   **/
  var `labelExpr` : Option[String] = None,
  var `tickWidth` : Option[AxisConfigTickWidth] = None,
  var `tickOffset` : Option[AxisConfigTickOffset] = None,
  var `maxExtent` : Option[AxisConfigMaxExtent] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  var `tickDash` : Option[AxisConfigTickDash] = None,
  var `labelBound` : Option[AxisConfigLabelBound] = None,
  var `gridColor` : Option[AxisConfigGridColor] = None,
  var `titleLimit` : Option[AxisConfigTitleLimit] = None,
  var `labelFont` : Option[AxisConfigLabelFont] = None,
  var `labelFontStyle` : Option[AxisConfigLabelFontStyle] = None,
  var `titleOpacity` : Option[AxisConfigTitleOpacity] = None,
  var `titleAlign` : Option[AxisConfigTitleAlign] = None,
  var `labelSeparation` : Option[AxisConfigLabelSeparation] = None,
  var `titleBaseline` : Option[AxisConfigTitleBaseline] = None,
  var `tickColor` : Option[AxisConfigTickColor] = None,
  var `titleFontSize` : Option[AxisConfigTitleFontSize] = None,
  var `titleFontWeight` : Option[AxisConfigTitleFontWeight] = None,
  var `tickSize` : Option[AxisConfigTickSize] = None,
  var `tickOpacity` : Option[AxisConfigTickOpacity] = None,
  var `labelBaseline` : Option[AxisConfigLabelBaseline] = None
)  
{  }
object AxisConfig {
  val definedFields = Set("labelBaseline", "titleBaseline", "titleFont", "labelFontStyle", "domainDash", "tickWidth", "tickMinStep", "labelAngle", "domainCap", "minExtent", "titlePadding", "labelBound", "labelFontWeight", "labelFont", "titleFontWeight", "labelPadding", "tickCount", "maxExtent", "titleLimit", "titleFontStyle", "tickRound", "labels", "gridCap", "labelOpacity", "grid", "disable", "tickOffset", "domainColor", "tickCap", "labelExpr", "domainDashOffset", "tickOpacity", "bandPosition", "titleColor", "tickDash", "labelFlushOffset", "format", "titleAnchor", "position", "labelSeparation", "aria", "zindex", "domain", "ticks", "tickDashOffset", "description", "labelFontSize", "title", "titleAngle", "titleOpacity", "labelAlign", "style", "gridDashOffset", "labelOverlap", "gridOpacity", "labelLimit", "gridDash", "labelFlush", "tickSize", "orient", "formatType", "tickExtra", "gridWidth", "labelOffset", "translate", "titleY", "tickColor", "values", "gridColor", "labelColor", "titleAlign", "domainOpacity", "titleFontSize", "titleX", "domainWidth", "titleLineHeight", "labelLineHeight", "offset", "tickBand") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalStringFieldDef (UnionType)

sealed trait ConditionalStringFieldDef extends SharedEncodingTextCondition with ValueDefWithConditionStringFieldDefTextCondition
   // ConditionalPredicateStringFieldDef is defined elsewhere
   // ConditionalParameterStringFieldDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingStrokeOpacityDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFont (UnionType)

sealed trait AxisConfigLabelFont 
   case class AxisConfigLabelFontAsString(value: String) extends AxisConfigLabelFont
   // ExprRef is defined elsewhere
   // ConditionalAxisString is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitlePadding (UnionType)

sealed trait TitleConfigSubtitlePadding 
   case class TitleConfigSubtitlePaddingAsNumber(value: JsNumber) extends TitleConfigSubtitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait AxisFormat 
   case class AxisFormatAsString(value: String) extends AxisFormat
   case class AxisFormatAsDictOfAny(value: Map[String,JsValue]) extends AxisFormat

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeDash (UnionType)

sealed trait AreaConfigStrokeDash 
   case class AreaConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends AreaConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleBase (UnionType)
/**
 * The logarithm base of the `log` scale (default `10`).
 **/
sealed trait ScaleBase 
   case class ScaleBaseAsNumber(value: JsNumber) extends ScaleBase
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait NonLayerRepeatSpecSpacing 
   case class NonLayerRepeatSpecSpacingAsNumber(value: JsNumber) extends NonLayerRepeatSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontWeight (UnionType)

sealed trait ConditionalAxisLabelFontWeight extends AxisLabelFontWeight with AxisConfigLabelFontWeight
   // ConditionalAxisLabelFontWeightAsObject1 is defined elsewhere
   // ConditionalAxisLabelFontWeightAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigAriaRole (UnionType)

sealed trait TickConfigAriaRole 
   case class TickConfigAriaRoleAsString(value: String) extends TickConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsOrient (UnionType)

sealed trait TitleParamsOrient 
   // TitleOrient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigAriaRoleDescription (UnionType)

sealed trait LineConfigAriaRoleDescription 
   case class LineConfigAriaRoleDescriptionAsString(value: String) extends LineConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class BarConfigAngleAsNumber(value: JsNumber) extends BarConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// EncodingSortField (StructType)
/**
 * A sort definition for sorting a discrete scale in an encoding field definition.
 **/
case class EncodingSortField(
  /**
   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.
   * 
   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.
   **/
  var `field` : Option[Field] = None,
  /**
   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`). An aggregation is required when there are multiple values of the sort field for each encoded data field. The input data objects will be aggregated, grouped by the encoded data field.
   * 
   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).
   * 
   * __Default value:__ `"sum"` for stacked plots. Otherwise, `"min"`.
   **/
  var `op` : Option[NonArgAggregateOp] = None,
  /**
   * The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
   **/
  var `order` : Option[SortOrder] = None
) extends FacetFieldDefSort with FacetEncodingFieldDefSort with Sort with RowColumnEncodingFieldDefSort 
{  }
object EncodingSortField {
  val definedFields = Set("field", "op", "order") 
}

////////////////////////////////////////////////////////////////////////

// GradientStop (StructType)

case class GradientStop(
  /**
   * The color value at this point in the gradient.
   **/
  var `color` : Color,
  /**
   * The offset fraction for the color stop, indicating its position within the gradient.
   **/
  var `offset` : JsNumber
)  
{  }
object GradientStop {
  val definedFields = Set("color", "offset") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2 (StructType)

case class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2BandPosition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape 
{  }
object ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2 {
  val definedFields = Set("type", "test", "scale", "datum", "bandPosition", "legend", "title") 
}

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigWithoutType (StructType)
/**
 * The default definition for a [`point`](https://vega.github.io/vega-lite/docs/parameter.html#select) selection. All properties and transformations  for a point selection definition (except `type`) may be specified here.
 * 
 * For instance, setting `point` to `{"on": "dblclick"}` populates point selections on double-click by default.
 **/
case class PointSelectionConfigWithoutType(
  /**
   * When true, an invisible voronoi diagram is computed to accelerate discrete selection. The data value _nearest_ the mouse cursor is added to the selection.
   * 
   * __Default value:__ `false`, which means that data values must be interacted with directly (e.g., clicked on) to be added to the selection.
   * 
   * __See also:__ [`nearest` examples](https://vega.github.io/vega-lite/docs/selection.html#nearest) documentation.
   **/
  var `nearest` : Option[Boolean] = None,
  /**
   * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
   * 
   * __Default value:__ `dblclick`.
   * 
   * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
   **/
  var `clear` : Option[PointSelectionConfigWithoutTypeClear] = None,
  /**
   * Controls whether data values should be toggled (inserted or removed from a point selection) or only ever inserted into multi selections.
   * 
   * One of:
   * - `true` -- the default behavior, which corresponds to `"event.shiftKey"`.  As a result, data values are toggled when the user interacts with the shift-key pressed.
   * - `false` -- disables toggling behaviour; as the user interacts, data values are only inserted into the multi selection and never removed.
   * - A [Vega expression](https://vega.github.io/vega/docs/expressions/) which is re-evaluated as the user interacts. If the expression evaluates to `true`, the data value is toggled into or out of the multi selection. If the expression evaluates to `false`, the multi selection is first clear, and the data value is then inserted. For example, setting the value to the Vega expression `"true"` will toggle data values without the user pressing the shift-key.
   * 
   * __Default value:__ `true`
   * 
   * __See also:__ [`toggle` examples](https://vega.github.io/vega-lite/docs/selection.html#toggle) in the documentation.
   **/
  var `toggle` : Option[PointSelectionConfigWithoutTypeToggle] = None,
  /**
   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
   * 
   * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
   **/
  var `on` : Option[PointSelectionConfigWithoutTypeOn] = None,
  /**
   * An array of field names whose values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `fields` : Option[Seq[String]] = None,
  /**
   * With layered and multi-view displays, a strategy that determines how selections' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.
   * 
   * One of:
   * - `"global"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.
   * - `"union"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.
   * - `"intersect"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.
   * 
   * __Default value:__ `global`.
   * 
   * __See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation.
   **/
  var `resolve` : Option[SelectionResolution] = None,
  /**
   * An array of encoding channels. The corresponding data field values must match for a data tuple to fall within the selection.
   * 
   * __See also:__ The [projection with `encodings` and `fields` section](https://vega.github.io/vega-lite/docs/selection.html#project) in the documentation.
   **/
  var `encodings` : Option[Seq[SingleDefUnitChannel]] = None
)  
{  }
object PointSelectionConfigWithoutType {
  val definedFields = Set("clear", "nearest", "encodings", "fields", "on", "resolve", "toggle") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1 (StructType)

case class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[TypeForShape] = None
) extends ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape 
{  }
object ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1 {
  val definedFields = Set("bin", "type", "test", "bandPosition", "legend", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// CalculateTransform (StructType)

case class CalculateTransform(
  /**
   * The field for storing the computed formula value.
   **/
  var `as` : String,
  /**
   * A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable `datum` to refer to the current data object.
   **/
  var `calculate` : String
) extends Transform 
{  }
object CalculateTransform {
  val definedFields = Set("as", "calculate") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait OverlayMarkDefTheta2 
   case class OverlayMarkDefTheta2AsNumber(value: JsNumber) extends OverlayMarkDefTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderLabelAlign (UnionType)
/**
 * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
 **/
sealed trait HeaderLabelAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// CompositeMark (UnionType)

sealed trait CompositeMark extends AnyMark
   // BoxPlot is defined elsewhere
   // ErrorBar is defined elsewhere
   // ErrorBand is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefGradientStringNullExprRef (StructType)

case class ConditionalParameterValueDefGradientStringNullExprRef(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalParameterValueDefGradientStringNullExprRefValue
) extends ConditionalValueDefGradientStringNullExprRef 
{  }
object ConditionalParameterValueDefGradientStringNullExprRef {
  val definedFields = Set("empty", "param", "value") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainOpacity (UnionType)

sealed trait AxisConfigDomainOpacity 
   case class AxisConfigDomainOpacityAsNumber(value: JsNumber) extends AxisConfigDomainOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXError2 (StructType)

case class SharedEncodingXError2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingXError2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingXError2TimeUnit] = None
)  
{  }
object SharedEncodingXError2 {
  val definedFields = Set("bin", "timeUnit", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigDiscreteBandSize (ConstrainedType)
/**
 * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
 **/
sealed trait BarConfigDiscreteBandSize 
   case class BarConfigDiscreteBandSizeAsNumber(value: JsNumber) extends BarConfigDiscreteBandSize
   // RelativeBandSize is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelOffset (UnionType)

sealed trait LegendConfigLabelOffset 
   // LegendConfigLabelOffsetAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LogicalNotPredicate (StructType)

case class LogicalNotPredicate(
  var `not` : PredicateComposition
) extends PredicateComposition 
{  }
object LogicalNotPredicate {
  val definedFields = Set("not") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait RectConfigTheta2 
   case class RectConfigTheta2AsNumber(value: JsNumber) extends RectConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingColorTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefSmooth (UnionType)

sealed trait MarkDefSmooth 
   case class MarkDefSmoothAsBool(value: Boolean) extends MarkDefSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefEllipsis (UnionType)

sealed trait OverlayMarkDefEllipsis 
   case class OverlayMarkDefEllipsisAsString(value: String) extends OverlayMarkDefEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigFill (UnionType)
/**
 * The fill color.
 * 
 * __Default value:__ `undefined`
 **/
sealed trait ViewConfigFill 
   // Color is defined elsewhere
   case object ViewConfigFillAsNull extends ViewConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SortField (StructType)
/**
 * A sort definition for transform
 **/
case class SortField(
  /**
   * The name of the field to sort.
   **/
  var `field` : String,
  /**
   * Whether to sort the field in ascending or descending order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).
   **/
  var `order` : Option[SortOrder] = None
)  
{  }
object SortField {
  val definedFields = Set("field", "order") 
}

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeMiterLimit (UnionType)

sealed trait ViewConfigStrokeMiterLimit 
   case class ViewConfigStrokeMiterLimitAsNumber(value: JsNumber) extends ViewConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefGradientStringNullExprRef (StructType)

case class ConditionalPredicateValueDefGradientStringNullExprRef(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalPredicateValueDefGradientStringNullExprRefValue
) extends ConditionalValueDefGradientStringNullExprRef 
{  }
object ConditionalPredicateValueDefGradientStringNullExprRef {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigWidth (UnionType)

sealed trait LineConfigWidth 
   case class LineConfigWidthAsNumber(value: JsNumber) extends LineConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class ViewConfigFillOpacityAsNumber(value: JsNumber) extends ViewConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontStyleNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefFontStyleNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[String] = None
) extends ConditionalPredicateValueDefFontStyleNullExprRef 
{  }
object ConditionalPredicateValueDefFontStyleNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontStyleNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefFontStyleNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefFontStyleNullExprRef 
{  }
object ConditionalPredicateValueDefFontStyleNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingLongitude2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigLineBreak (UnionType)

sealed trait AreaConfigLineBreak 
   case class AreaConfigLineBreakAsString(value: String) extends AreaConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingHrefCondition 
   // ConditionalValueDefStringExprRef is defined elsewhere
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class SharedEncodingHrefConditionAsArrayOfConditionalValueDefStringExprRef(value: Seq[ConditionalValueDefStringExprRef]) extends SharedEncodingHrefCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   case class SharedEncodingHrefConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends SharedEncodingHrefCondition

////////////////////////////////////////////////////////////////////////

// FieldDefWithoutScaleBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldDefWithoutScaleBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait AreaConfigInvalid  { val payload: JsValue }
   case object AreaConfigInvalidFilter extends AreaConfigInvalid { val payload = JsString("filter") }
   case object AreaConfigInvalidUndefined extends AreaConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCornerRadius (UnionType)

sealed trait OverlayMarkDefCornerRadius 
   case class OverlayMarkDefCornerRadiusAsNumber(value: JsNumber) extends OverlayMarkDefCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// UrlData (StructType)

case class UrlData(
  /**
   * An object that specifies the format for parsing the data.
   **/
  var `format` : Option[DataFormat] = None,
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : Option[String] = None,
  /**
   * An URL from which to load the data set. Use the `format.type` property to ensure the loaded data is correctly parsed.
   **/
  var `url` : String
) extends DataSource 
{  }
object UrlData {
  val definedFields = Set("format", "name", "url") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCornerRadiusBottomRight (UnionType)

sealed trait OverlayMarkDefCornerRadiusBottomRight 
   case class OverlayMarkDefCornerRadiusBottomRightAsNumber(value: JsNumber) extends OverlayMarkDefCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelAlign (UnionType)

sealed trait AxisConfigLabelAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefTextBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionStringFieldDefTextBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderLabelBaseline (UnionType)
/**
 * The vertical text baseline for the header labels. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 **/
sealed trait HeaderLabelBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientLabelOffset (UnionType)

sealed trait LegendConfigGradientLabelOffset 
   case class LegendConfigGradientLabelOffsetAsNumber(value: JsNumber) extends LegendConfigGradientLabelOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeDash (UnionType)

sealed trait ViewBackgroundStrokeDash 
   case class ViewBackgroundStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends ViewBackgroundStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOneOfPredicate (StructType)

case class FieldOneOfPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * A set of values that the `field`'s value should be a member of, for a data item included in the filtered data.
   **/
  var `oneOf` : FieldOneOfPredicateOneOf,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldOneOfPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldOneOfPredicate {
  val definedFields = Set("field", "oneOf", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// Encoding (StructType)
/**
 * A key-value mapping between encoding channels and definition of fields.
 **/
case class Encoding(
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[PositionDef] = None,
  /**
   * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   **/
  var `longitude2` : Option[Position2Def] = None,
  /**
   * The URL of an image mark.
   **/
  var `url` : Option[EncodingUrl] = None,
  /**
   * Fill opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity` property.
   **/
  var `fillOpacity` : Option[NumericMarkPropDef] = None,
  /**
   * Text of the `text` mark.
   **/
  var `text` : Option[TextDef] = None,
  /**
   * A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.
   **/
  var `key` : Option[FieldDefWithoutScale] = None,
  /**
   * The inner radius in pixels of arc marks.
   **/
  var `radius2` : Option[Position2Def] = None,
  /**
   * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `yError2` : Option[EncodingYError2] = None,
  /**
   * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `yError` : Option[EncodingYError] = None,
  /**
   * Offset of y-position of the marks
   **/
  var `yOffset` : Option[OffsetDef] = None,
  /**
   * Offset of x-position of the marks
   **/
  var `xOffset` : Option[OffsetDef] = None,
  /**
   * Size of the mark.
   * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
   * - For `"bar"` and `"tick"` – the bar and tick's size.
   * - For `"text"` – the text's font size.
   * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of line with varying size)
   **/
  var `size` : Option[NumericMarkPropDef] = None,
  /**
   * Latitude position of geographically projected marks.
   **/
  var `latitude` : Option[LatLongDef] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[PositionDef] = None,
  /**
   * Stroke opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity` property.
   **/
  var `strokeOpacity` : Option[NumericMarkPropDef] = None,
  /**
   * A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `"aria-label"` attribute will be set to this description.
   **/
  var `description` : Option[EncodingDescription] = None,
  /**
   * Rotation angle of point and text marks.
   **/
  var `angle` : Option[NumericMarkPropDef] = None,
  /**
   * Stroke color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.
   **/
  var `stroke` : Option[ColorDef] = None,
  /**
   * Color of the marks – either fill or stroke color based on  the `filled` property of mark definition. By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`, `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.
   * 
   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified. 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
   **/
  var `color` : Option[ColorDef] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[Position2Def] = None,
  /**
   * The outer radius in pixels of arc marks.
   **/
  var `radius` : Option[PolarDef] = None,
  /**
   * Longitude position of geographically projected marks.
   **/
  var `longitude` : Option[LatLongDef] = None,
  /**
   * Order of the marks.
   * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
   * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
   * - Otherwise, this `order` channel encodes layer order of the marks.
   * 
   * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
   **/
  var `order` : Option[EncodingOrder] = None,
  /**
   * Fill color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.
   **/
  var `fill` : Option[ColorDef] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[PolarDef] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[Position2Def] = None,
  /**
   * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `xError` : Option[EncodingXError] = None,
  /**
   * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
   **/
  var `tooltip` : Option[EncodingTooltip] = None,
  /**
   * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   **/
  var `latitude2` : Option[Position2Def] = None,
  /**
   * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
   **/
  var `detail` : Option[EncodingDetail] = None,
  /**
   * Shape of the mark.
   * 
   * 1. For `point` marks the supported values include:   - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.   - the line symbol `"stroke"`   - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
   * 
   * 2. For `geoshape` marks it should be a field definition of the geojson data
   * 
   * __Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape` property. (`"circle"` if unset.)
   **/
  var `shape` : Option[ShapeDef] = None,
  /**
   * Opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity` property.
   **/
  var `opacity` : Option[NumericMarkPropDef] = None,
  /**
   * A URL to load upon mouse click.
   **/
  var `href` : Option[EncodingHref] = None,
  /**
   * Stroke dash of the marks.
   * 
   * __Default value:__ `[1,0]` (No dash).
   **/
  var `strokeDash` : Option[NumericArrayMarkPropDef] = None,
  /**
   * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `xError2` : Option[EncodingXError2] = None,
  /**
   * Stroke width of the marks.
   * 
   * __Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth` property.
   **/
  var `strokeWidth` : Option[NumericMarkPropDef] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[Position2Def] = None
)  
{  }
object Encoding {
  val definedFields = Set("longitude", "url", "key", "longitude2", "size", "theta", "strokeDash", "xOffset", "theta2", "xError", "stroke", "shape", "y2", "angle", "latitude2", "x2", "strokeWidth", "href", "detail", "yError2", "text", "y", "opacity", "fillOpacity", "color", "strokeOpacity", "description", "radius2", "order", "yOffset", "latitude", "tooltip", "radius", "x", "xError2", "yError", "fill") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingAngleCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingAngleConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingAngleCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject1BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalParameterMarkPropFieldOrDatumDefAsObject1BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Align (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait TopLevelRepeatSpecAsObject2Align 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisDescription (UnionType)

sealed trait AxisDescription 
   case class AxisDescriptionAsString(value: String) extends AxisDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LatLongDef (UnionType)
/**
 * Latitude position of geographically projected marks.
 **/
sealed trait LatLongDef 
   // LatLongFieldDef is defined elsewhere
   // DatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AllSortString (UnionType)

sealed trait AllSortString extends Sort
   // SortOrder is defined elsewhere
   // SortByChannel is defined elsewhere
   // SortByChannelDesc is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait LineConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object LineConfigStrokeAsNull extends LineConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAriaRole (UnionType)

sealed trait OverlayMarkDefAriaRole 
   case class OverlayMarkDefAriaRoleAsString(value: String) extends OverlayMarkDefAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigFillOpacity (UnionType)

sealed trait BarConfigFillOpacity 
   // BarConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RepeatRef (StructType)
/**
 * Reference to a repeated value.
 **/
case class RepeatRef(
  var `repeat` : RepeatRefRepeat
) extends SharedEncodingStrokeWidthDatum with SharedEncodingStrokeDatum with SharedEncodingY2Datum with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with SharedEncodingRadius2Datum with ScaleDatumDefDatum with DatumDefDatum with SharedEncodingAngleDatum with SharedEncodingStrokeOpacityDatum with ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum with Field with SharedEncodingSizeDatum with SharedEncodingOpacityDatum with PositionDatumDefDatum with FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with SharedEncodingLongitude2Datum with SharedEncodingLatitudeDatum with SharedEncodingStrokeDashDatum with SharedEncodingYOffsetDatum with ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum with SharedEncodingRadiusDatum with SharedEncodingLatitude2Datum with FieldOrDatumDefWithConditionStringDatumDefTextDatum with SharedEncodingXDatum with SharedEncodingThetaDatum with SharedEncodingFillOpacityDatum with SharedEncodingX2Datum with PositionDatumDefBaseDatum with FieldOrDatumDefWithConditionDatumDefNumberDatum with SharedEncodingYDatum with SharedEncodingFillDatum with SharedEncodingXOffsetDatum with SharedEncodingTheta2Datum with SharedEncodingTextDatum with SharedEncodingColorDatum with SharedEncodingLongitudeDatum with SharedEncodingShapeDatum with FieldOrDatumDefWithConditionDatumDefStringNullDatum 
{  }
object RepeatRef {
  val definedFields = Set("repeat") 
}

////////////////////////////////////////////////////////////////////////

// ViewBackgroundOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait ViewBackgroundOpacity 
   case class ViewBackgroundOpacityAsNumber(value: JsNumber) extends ViewBackgroundOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMinSize (ConstrainedType)
/**
 * Default minimum value for point size scale with zero=false.
 * 
 * __Default value:__ `9`
 **/
case class ScaleConfigMinSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingThetaBin 
   case class SharedEncodingThetaBinAsBool(value: Boolean) extends SharedEncodingThetaBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingThetaBinAsNull extends SharedEncodingThetaBin

////////////////////////////////////////////////////////////////////////

// TickConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait TickConfigY2 
   case class TickConfigY2AsNumber(value: JsNumber) extends TickConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OffsetDef (UnionType)
/**
 * Offset of x-position of the marks
 **/
sealed trait OffsetDef 
   // ScaleFieldDef is defined elsewhere
   // ScaleDatumDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait AxisConfigFormat 
   case class AxisConfigFormatAsString(value: String) extends AxisConfigFormat
   case class AxisConfigFormatAsDictOfAny(value: Map[String,JsValue]) extends AxisConfigFormat

////////////////////////////////////////////////////////////////////////

// AxisLabelAngle (UnionType)

sealed trait AxisLabelAngle 
   // AxisLabelAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigTickCount (UnionType)

sealed trait LegendConfigTickCount 
   // TickCount is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EncodingYError2 (UnionType)
/**
 * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait EncodingYError2 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeDash (UnionType)

sealed trait MarkConfigStrokeDash 
   case class MarkConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends MarkConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigEllipsis (UnionType)

sealed trait BarConfigEllipsis 
   case class BarConfigEllipsisAsString(value: String) extends BarConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolOpacity (UnionType)

sealed trait LegendConfigSymbolOpacity 
   case class LegendConfigSymbolOpacityAsNumber(value: JsNumber) extends LegendConfigSymbolOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleFont (UnionType)
/**
 * Font of the header title. (e.g., `"Helvetica Neue"`).
 **/
sealed trait HeaderTitleFont 
   case class HeaderTitleFontAsString(value: String) extends HeaderTitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BindDirectElement (UnionType)
/**
 * An input element that exposes a _value_ property and supports the [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) interface, or a CSS selector string to such an element. When the element updates and dispatches an event, the _value_ property will be used as the new, bound signal value. When the signal updates independent of the element, the _value_ property will be set to the signal value and a new event will be dispatched on the element.
 **/
sealed trait BindDirectElement 
   case class BindDirectElementAsString(value: String) extends BindDirectElement
   case object BindDirectElementAsEmptyObject extends BindDirectElement

////////////////////////////////////////////////////////////////////////

// AxisTickWidth (UnionType)

sealed trait AxisTickWidth 
   // AxisTickWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecRepeat (UnionType)
/**
 * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
 **/
sealed trait NonLayerRepeatSpecRepeat 
   case class NonLayerRepeatSpecRepeatAsArrayOfString(value: Seq[String]) extends NonLayerRepeatSpecRepeat
   // RepeatMapping is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkDefInnerRadius 
   case class MarkDefInnerRadiusAsNumber(value: JsNumber) extends MarkDefInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigScale (UnionType)
/**
 * The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.
 **/
sealed trait ProjectionConfigScale 
   case class ProjectionConfigScaleAsNumber(value: JsNumber) extends ProjectionConfigScale
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EncodingOrder (UnionType)
/**
 * Order of the marks.
 * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
 * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
 * - Otherwise, this `order` channel encodes layer order of the marks.
 * 
 * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
 **/
sealed trait EncodingOrder 
   // OrderFieldDef is defined elsewhere
   case class EncodingOrderAsArrayOfOrderFieldDef(value: Seq[OrderFieldDef]) extends EncodingOrder
   // OrderValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefThickness (ConstrainedType)
/**
 * Thickness of the tick mark.
 * 
 * __Default value:__  `1`
 **/
case class MarkDefThickness(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ErrorBandConfigBand (UnionType)

sealed trait ErrorBandConfigBand 
   case class ErrorBandConfigBandAsBool(value: Boolean) extends ErrorBandConfigBand
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigAria (UnionType)

sealed trait LineConfigAria 
   case class LineConfigAriaAsBool(value: Boolean) extends LineConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDef (StructType)

case class MarkDef(
  /**
   * Offset for x2-position.
   **/
  var `x2Offset` : Option[MarkDefX2Offset] = None,
  var `cornerRadiusBottomRight` : Option[MarkDefCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[MarkDefFillOpacity] = None,
  var `strokeMiterLimit` : Option[MarkDefStrokeMiterLimit] = None,
  var `dir` : Option[MarkDefDir] = None,
  /**
   * Offset for theta2.
   **/
  var `theta2Offset` : Option[MarkDefTheta2Offset] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[MarkDefTooltip] = None,
  var `cornerRadiusTopRight` : Option[MarkDefCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[MarkDefOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[MarkDefX] = None,
  /**
   * The default size of the bars on continuous scales.
   * 
   * __Default value:__ `5`
   **/
  var `continuousBandSize` : Option[MarkDefContinuousBandSize] = None,
  /**
   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
   * 
   * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
   * 
   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
   * 
   * - If this property is `false`, no points would be automatically added to line or area marks.
   * 
   * __Default value:__ `false`.
   **/
  var `point` : Option[MarkDefPoint] = None,
  var `dy` : Option[MarkDefDy] = None,
  /**
   * Offset for x-position.
   **/
  var `xOffset` : Option[MarkDefXOffset] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[MarkDefSize] = None,
  var `smooth` : Option[MarkDefSmooth] = None,
  var `url` : Option[MarkDefUrl] = None,
  /**
   * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.
   * 
   * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).
   **/
  var `style` : Option[MarkDefStyle] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[MarkDefY] = None,
  /**
   * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.
   * 
   * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.
   * 
   * - If this value is `false`, no lines would be automatically added to area marks.
   * 
   * __Default value:__ `false`.
   **/
  var `line` : Option[MarkDefLine] = None,
  var `strokeOpacity` : Option[MarkDefStrokeOpacity] = None,
  var `ellipsis` : Option[MarkDefEllipsis] = None,
  var `description` : Option[MarkDefDescription] = None,
  var `angle` : Option[MarkDefAngle] = None,
  var `lineBreak` : Option[MarkDefLineBreak] = None,
  var `tension` : Option[MarkDefTension] = None,
  var `cornerRadiusTopLeft` : Option[MarkDefCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[MarkDefStroke] = None,
  var `strokeDashOffset` : Option[MarkDefStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[MarkDefAlign] = None,
  var `ariaRole` : Option[MarkDefAriaRole] = None,
  var `strokeCap` : Option[MarkDefStrokeCap] = None,
  var `strokeJoin` : Option[MarkDefStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[MarkDefBaseline] = None,
  var `ariaRoleDescription` : Option[MarkDefAriaRoleDescription] = None,
  var `aspect` : Option[MarkDefAspect] = None,
  /**
   * Height of the marks.  One of:
   * 
   * - A number representing a fixed pixel height.
   * 
   * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band
   **/
  var `height` : Option[MarkDefHeight] = None,
  var `fontStyle` : Option[MarkDefFontStyle] = None,
  /**
   * The width of the ticks.
   * 
   * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).
   **/
  var `bandSize` : Option[MarkDefBandSize] = None,
  var `text` : Option[MarkDefText] = None,
  /**
   * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
   * 
   * __Default value:__ `1`
   **/
  var `binSpacing` : Option[MarkDefBinSpacing] = None,
  var `cornerRadius` : Option[MarkDefCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[MarkDefColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[MarkDefX2] = None,
  var `padAngle` : Option[MarkDefPadAngle] = None,
  var `cursor` : Option[MarkDefCursor] = None,
  /**
   * Thickness of the tick mark.
   * 
   * __Default value:__  `1`
   **/
  var `thickness` : Option[MarkDefThickness] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[MarkDefRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `font` : Option[MarkDefFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[MarkDefRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[MarkDefInvalid] = None,
  /**
   * Offset for radius2.
   **/
  var `radius2Offset` : Option[MarkDefRadius2Offset] = None,
  var `lineHeight` : Option[MarkDefLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[MarkDefOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[MarkDefFill] = None,
  var `interpolate` : Option[MarkDefInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[MarkDefTheta] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[MarkDefInnerRadius] = None,
  var `fontSize` : Option[MarkDefFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[MarkDefY2] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
   **/
  var `discreteBandSize` : Option[MarkDefDiscreteBandSize] = None,
  var `shape` : Option[MarkDefShape] = None,
  var `aria` : Option[MarkDefAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[MarkDefOpacity] = None,
  /**
   * Offset for radius.
   **/
  var `radiusOffset` : Option[MarkDefRadiusOffset] = None,
  var `dx` : Option[MarkDefDx] = None,
  var `cornerRadiusBottomLeft` : Option[MarkDefCornerRadiusBottomLeft] = None,
  /**
   * - For vertical bars, top-left and top-right corner radius.
   * 
   * - For horizontal bars, top-right and bottom-right corner radius.
   **/
  var `cornerRadiusEnd` : Option[MarkDefCornerRadiusEnd] = None,
  /**
   * The mark type. This could a primitive mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`) or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
   **/
  var `type` : Mark,
  /**
   * Whether a mark be clipped to the enclosing group’s width and height.
   **/
  var `clip` : Option[Boolean] = None,
  var `href` : Option[MarkDefHref] = None,
  var `strokeDash` : Option[MarkDefStrokeDash] = None,
  var `strokeOffset` : Option[MarkDefStrokeOffset] = None,
  var `limit` : Option[MarkDefLimit] = None,
  /**
   * Offset for y2-position.
   **/
  var `y2Offset` : Option[MarkDefY2Offset] = None,
  /**
   * Offset for theta.
   **/
  var `thetaOffset` : Option[MarkDefThetaOffset] = None,
  /**
   * Width of the marks.  One of:
   * 
   * - A number representing a fixed pixel width.
   * 
   * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band.
   **/
  var `width` : Option[MarkDefWidth] = None,
  var `fontWeight` : Option[MarkDefFontWeight] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  /**
   * Offset for y-position.
   **/
  var `yOffset` : Option[MarkDefYOffset] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[MarkDefBlend] = None,
  var `strokeWidth` : Option[MarkDefStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[MarkDefTheta2] = None
) extends AnyMark 
{  }
object MarkDef {
  val definedFields = Set("padAngle", "strokeDashOffset", "cornerRadiusBottomLeft", "dy", "ellipsis", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "type", "text", "y", "lineBreak", "fontStyle", "cornerRadiusEnd", "outerRadius", "url", "strokeCap", "point", "ariaRole", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta2Offset", "thetaOffset", "strokeOffset", "dir", "x2Offset", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "radiusOffset", "cornerRadiusTopRight", "strokeOpacity", "clip", "description", "radius2", "order", "yOffset", "bandSize", "dx", "width", "cornerRadiusBottomRight", "line", "xOffset", "cursor", "blend", "style", "height", "theta2", "continuousBandSize", "orient", "baseline", "radius2Offset", "tension", "y2Offset", "align", "thickness", "stroke", "discreteBandSize", "shape", "lineHeight", "interpolate", "binSpacing", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class ViewConfigStrokeOpacityAsNumber(value: JsNumber) extends ViewConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigCornerRadiusTopLeft (UnionType)

sealed trait LineConfigCornerRadiusTopLeft 
   case class LineConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends LineConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleRangeAsArrayElement (UnionType)

sealed trait ScaleRangeAsArrayElement 
   case class ScaleRangeAsArrayElementAsNumber(value: JsNumber) extends ScaleRangeAsArrayElement
   case class ScaleRangeAsArrayElementAsString(value: String) extends ScaleRangeAsArrayElement
   case class ScaleRangeAsArrayElementAsArrayOfNumber(value: Seq[JsNumber]) extends ScaleRangeAsArrayElement
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Padding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelRepeatSpecAsObject1Padding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigEllipsis (UnionType)

sealed trait TickConfigEllipsis 
   case class TickConfigEllipsisAsString(value: String) extends TickConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigCornerRadiusBottomRight (UnionType)

sealed trait TickConfigCornerRadiusBottomRight 
   case class TickConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends TickConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigUrl (UnionType)

sealed trait TickConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelColor (UnionType)
/**
 * The color of the legend label, can be in hex color code or regular color name.
 **/
sealed trait LegendConfigLabelColor 
   case object LegendConfigLabelColorAsNull extends LegendConfigLabelColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldRange (StructType)

case class FieldRange(
  var `field` : String
) extends ScaleRange 
{  }
object FieldRange {
  val definedFields = Set("field") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefTextExprRef (UnionType)

sealed trait ConditionalValueDefTextExprRef extends FieldOrDatumDefWithConditionStringFieldDefTextCondition with SharedEncodingTextCondition with FieldOrDatumDefWithConditionStringDatumDefTextCondition with ValueDefWithConditionStringFieldDefTextCondition
   // ConditionalPredicateValueDefTextExprRef is defined elsewhere
   // ConditionalParameterValueDefTextExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelLimit (UnionType)
/**
 * The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
 * 
 * __Default value:__ `0`, indicating no limit
 **/
sealed trait HeaderConfigLabelLimit 
   case class HeaderConfigLabelLimitAsNumber(value: JsNumber) extends HeaderConfigLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleFontSizeAsNumber (ConstrainedType)
/**
 * Font size in pixels for subtitle text.
 **/
case class TitleParamsSubtitleFontSizeAsNumber(value: JsNumber) extends TitleParamsSubtitleFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigOrient (UnionType)
/**
 * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).
 * 
 * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
 **/
sealed trait AxisConfigOrient 
   // AxisOrient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeMiterLimit (UnionType)

sealed trait MarkConfigStrokeMiterLimit 
   case class MarkConfigStrokeMiterLimitAsNumber(value: JsNumber) extends MarkConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// QuantileTransformAs (ConstrainedType)
/**
 * The output field names for the probability and quantile values.
 * 
 * __Default value:__ `["prob", "value"]`
 **/
case class QuantileTransformAs(value: Seq[String]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelFacetSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXErrorBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingXErrorBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigLimit (UnionType)

sealed trait LineConfigLimit 
   case class LineConfigLimitAsNumber(value: JsNumber) extends LineConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MergedStream (StructType)

case class MergedStream(
  var `marktype` : Option[MarkType] = None,
  var `filter` : Option[MergedStreamFilter] = None,
  var `merge` : Seq[Stream],
  var `markname` : Option[String] = None,
  var `consume` : Option[Boolean] = None,
  var `debounce` : Option[JsNumber] = None,
  var `between` : Option[Seq[Stream]] = None,
  var `throttle` : Option[JsNumber] = None
) extends Stream 
{  }
object MergedStream {
  val definedFields = Set("marktype", "merge", "throttle", "debounce", "markname", "between", "filter", "consume") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class AreaConfigAngleAsNumber(value: JsNumber) extends AreaConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SelectionInit (UnionType)

sealed trait SelectionInit extends TopLevelSelectionParameterValue with SelectionParameterValue
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFillOpacity (UnionType)

sealed trait AreaConfigFillOpacity 
   // AreaConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait FacetFieldDefBin 
   case class FacetFieldDefBinAsBool(value: Boolean) extends FacetFieldDefBin
   // BinParams is defined elsewhere
   case object FacetFieldDefBinAsNull extends FacetFieldDefBin

////////////////////////////////////////////////////////////////////////

// UriReference (ConstrainedType)
/**
 * A URI
 **/
case class UriReference(value: Uri) extends LineConfigHref with MarkConfigUrl with TickConfigHref with OverlayMarkDefHref with BarConfigHref with RectConfigUrl with AreaConfigUrl with TickConfigUrl with MarkConfigHref with MarkDefHref with MarkDefUrl with LineConfigUrl with AreaConfigHref with RectConfigHref with BarConfigUrl with OverlayMarkDefUrl
{  }

////////////////////////////////////////////////////////////////////////

// SharedEncoding (StructType)
/**
 * A shared key-value mapping between encoding channels and definition of fields in the underlying layers.
 **/
case class SharedEncoding(
  var `x` : Option[SharedEncodingX] = None,
  var `longitude2` : Option[SharedEncodingLongitude2] = None,
  var `url` : Option[SharedEncodingUrl] = None,
  var `fillOpacity` : Option[SharedEncodingFillOpacity] = None,
  var `text` : Option[SharedEncodingText] = None,
  var `key` : Option[SharedEncodingKey] = None,
  var `radius2` : Option[SharedEncodingRadius2] = None,
  var `yError2` : Option[SharedEncodingYError2] = None,
  var `yError` : Option[SharedEncodingYError] = None,
  var `yOffset` : Option[SharedEncodingYOffset] = None,
  var `xOffset` : Option[SharedEncodingXOffset] = None,
  var `size` : Option[SharedEncodingSize] = None,
  var `latitude` : Option[SharedEncodingLatitude] = None,
  var `y` : Option[SharedEncodingY] = None,
  var `strokeOpacity` : Option[SharedEncodingStrokeOpacity] = None,
  var `description` : Option[SharedEncodingDescription] = None,
  var `angle` : Option[SharedEncodingAngle] = None,
  var `stroke` : Option[SharedEncodingStroke] = None,
  var `color` : Option[SharedEncodingColor] = None,
  var `x2` : Option[SharedEncodingX2] = None,
  var `radius` : Option[SharedEncodingRadius] = None,
  var `longitude` : Option[SharedEncodingLongitude] = None,
  /**
   * Order of the marks.
   * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
   * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
   * - Otherwise, this `order` channel encodes layer order of the marks.
   * 
   * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
   **/
  var `order` : Option[SharedEncodingOrder] = None,
  var `fill` : Option[SharedEncodingFill] = None,
  var `theta` : Option[SharedEncodingTheta] = None,
  var `y2` : Option[SharedEncodingY2] = None,
  var `xError` : Option[SharedEncodingXError] = None,
  /**
   * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
   **/
  var `tooltip` : Option[SharedEncodingTooltip] = None,
  var `latitude2` : Option[SharedEncodingLatitude2] = None,
  /**
   * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
   **/
  var `detail` : Option[SharedEncodingDetail] = None,
  var `shape` : Option[SharedEncodingShape] = None,
  var `opacity` : Option[SharedEncodingOpacity] = None,
  var `href` : Option[SharedEncodingHref] = None,
  var `strokeDash` : Option[SharedEncodingStrokeDash] = None,
  var `xError2` : Option[SharedEncodingXError2] = None,
  var `strokeWidth` : Option[SharedEncodingStrokeWidth] = None,
  var `theta2` : Option[SharedEncodingTheta2] = None
)  
{  }
object SharedEncoding {
  val definedFields = Set("longitude", "url", "key", "longitude2", "size", "theta", "strokeDash", "xOffset", "theta2", "xError", "stroke", "shape", "y2", "angle", "latitude2", "x2", "strokeWidth", "href", "detail", "yError2", "text", "y", "opacity", "fillOpacity", "color", "strokeOpacity", "description", "radius2", "order", "yOffset", "latitude", "tooltip", "radius", "x", "xError2", "yError", "fill") 
}

////////////////////////////////////////////////////////////////////////

// Orient (EnumType)
/**
 * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
 **/
sealed trait Orient extends LegendConfigTitleOrient { val payload: JsValue }
   case object OrientLeft extends Orient { val payload = JsString("left") }
   case object OrientRight extends Orient { val payload = JsString("right") }
   case object OrientTop extends Orient { val payload = JsString("top") }
   case object OrientBottom extends Orient { val payload = JsString("bottom") }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeMiterLimit (UnionType)

sealed trait OverlayMarkDefStrokeMiterLimit 
   case class OverlayMarkDefStrokeMiterLimitAsNumber(value: JsNumber) extends OverlayMarkDefStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefTextTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionStringFieldDefTextTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleAngle (ConstrainedType)
/**
 * The rotation angle of the header title.
 * 
 * __Default value:__ `0`.
 **/
case class HeaderConfigTitleAngle(value: JsNumber) 
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// AreaConfigLine (UnionType)
/**
 * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.
 * 
 * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.
 * 
 * - If this value is `false`, no lines would be automatically added to area marks.
 * 
 * __Default value:__ `false`.
 **/
sealed trait AreaConfigLine 
   case class AreaConfigLineAsBool(value: Boolean) extends AreaConfigLine
   // OverlayMarkDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait BarConfigInvalid  { val payload: JsValue }
   case object BarConfigInvalidFilter extends BarConfigInvalid { val payload = JsString("filter") }
   case object BarConfigInvalidUndefined extends BarConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// HeaderLabelFontSize (ConstrainedType)
/**
 * The font size of the header label, in pixels.
 **/
sealed trait HeaderLabelFontSize 
   case class HeaderLabelFontSizeAsNumber(value: JsNumber) extends HeaderLabelFontSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OrderFieldDef (StructType)

case class OrderFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[OrderFieldDefBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[OrderFieldDefBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[OrderFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The sort order. One of `"ascending"` (default) or `"descending"`.
   **/
  var `sort` : Option[SortOrder] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends FacetedEncodingOrder with SharedEncodingOrder with EncodingOrder 
{  }
object OrderFieldDef {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "aggregate", "title", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// DensityTransformExtent (ConstrainedType)
/**
 * A [min, max] domain from which to sample the distribution. If unspecified, the extent will be determined by the observed minimum and maximum values of the density value field.
 **/
case class DensityTransformExtent(value: Seq[JsNumber]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// AreaConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait AreaConfigSize 
   case class AreaConfigSizeAsNumber(value: JsNumber) extends AreaConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotDefTicks (UnionType)

sealed trait BoxPlotDefTicks 
   case class BoxPlotDefTicksAsBool(value: Boolean) extends BoxPlotDefTicks
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScalePadding (ConstrainedType)
/**
 * For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the `zero`, `nice`, `domainMin`, and `domainMax` properties.
 * 
 * For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.
 * 
 * For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.
 * 
 * __Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`. For _band and point_ scales, see `paddingInner` and `paddingOuter`. By default, Vega-Lite sets padding such that _width/height = number of unique values * step_.
 **/
sealed trait ScalePadding 
   case class ScalePaddingAsNumber(value: JsNumber) extends ScalePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngle (StructType)

case class SharedEncodingAngle(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingAngleDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingAngleBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingAngleCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingAngleBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingAngleValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingAngleTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingAngleType] = None
)  
{  }
object SharedEncodingAngle {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigInterpolate (UnionType)

sealed trait RectConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumberExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalPredicateValueDefNumberExprRefValue 
   case class ConditionalPredicateValueDefNumberExprRefValueAsNumber(value: JsNumber) extends ConditionalPredicateValueDefNumberExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StackTransformAsAsArray (ConstrainedType)

case class StackTransformAsAsArray(value: Seq[String]) extends StackTransformAs
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// AreaConfigUrl (UnionType)

sealed trait AreaConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigLineHeight (UnionType)

sealed trait AreaConfigLineHeight 
   case class AreaConfigLineHeightAsNumber(value: JsNumber) extends AreaConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleFontSizeAsNumber (ConstrainedType)
/**
 * Font size of the title.
 **/
case class AxisTitleFontSizeAsNumber(value: JsNumber) extends AxisTitleFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// CsvDataFormatType (EnumType)
/**
 * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
 * 
 * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
 **/
sealed trait CsvDataFormatType  { val payload: JsValue }
   case object CsvDataFormatTypeCsv extends CsvDataFormatType { val payload = JsString("csv") }
   case object CsvDataFormatTypeTsv extends CsvDataFormatType { val payload = JsString("tsv") }

////////////////////////////////////////////////////////////////////////

// BarConfigTension (UnionType)

sealed trait BarConfigTension 
   case class BarConfigTensionAsNumber(value: JsNumber) extends BarConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleDomainMin (UnionType)
/**
 * Sets the minimum value in the scale domain, overriding the domain property. This property is only intended for use with scales having continuous domains.
 **/
sealed trait ScaleDomainMin 
   case class ScaleDomainMinAsNumber(value: JsNumber) extends ScaleDomainMin
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingText (StructType)

case class SharedEncodingText(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[SharedEncodingTextFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingTextDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingTextBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingTextCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingTextBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingTextValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingTextTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingTextType] = None
)  
{  }
object SharedEncodingText {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject1 (StructType)

case class EventStreamAsObject1(
  var `source` : Option[EventStreamAsObject1Source] = None,
  var `marktype` : Option[MarkType] = None,
  var `filter` : Option[EventStreamAsObject1Filter] = None,
  var `markname` : Option[String] = None,
  var `consume` : Option[Boolean] = None,
  var `type` : EventType,
  var `debounce` : Option[JsNumber] = None,
  var `between` : Option[Seq[Stream]] = None,
  var `throttle` : Option[JsNumber] = None
) extends EventStream 
{  }
object EventStreamAsObject1 {
  val definedFields = Set("marktype", "type", "throttle", "debounce", "between", "source", "markname", "filter", "consume") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingSizeValue 
   case class SharedEncodingSizeValueAsNumber(value: JsNumber) extends SharedEncodingSizeValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject2 (StructType)

case class EventStreamAsObject2(
  var `source` : EventStreamAsObject2Source,
  var `marktype` : Option[MarkType] = None,
  var `filter` : Option[EventStreamAsObject2Filter] = None,
  var `markname` : Option[String] = None,
  var `consume` : Option[Boolean] = None,
  var `type` : WindowEventType,
  var `debounce` : Option[JsNumber] = None,
  var `between` : Option[Seq[Stream]] = None,
  var `throttle` : Option[JsNumber] = None
) extends EventStream 
{  }
object EventStreamAsObject2 {
  val definedFields = Set("marktype", "type", "throttle", "debounce", "between", "source", "markname", "filter", "consume") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelPadding (UnionType)

sealed trait AxisConfigLabelPadding 
   case class AxisConfigLabelPaddingAsNumber(value: JsNumber) extends AxisConfigLabelPadding
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfig (StructType)
/**
 * Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config).
 **/
case class ProjectionConfig(
  var `fraction` : Option[ProjectionConfigFraction] = None,
  var `extent` : Option[ProjectionConfigExtent] = None,
  var `center` : Option[ProjectionConfigCenter] = None,
  /**
   * The projection’s scale (zoom) factor, overriding automatic fitting. The default scale is projection-specific. The scale factor corresponds linearly to the distance between projected points; however, scale factor values are not equivalent across projections.
   **/
  var `scale` : Option[ProjectionConfigScale] = None,
  var `fit` : Option[ProjectionConfigFit] = None,
  var `reflectX` : Option[ProjectionConfigReflectX] = None,
  var `rotate` : Option[ProjectionConfigRotate] = None,
  var `clipAngle` : Option[ProjectionConfigClipAngle] = None,
  var `lobes` : Option[ProjectionConfigLobes] = None,
  var `parallels` : Option[ProjectionConfigParallels] = None,
  /**
   * The projection’s translation offset as a two-element array `[tx, ty]`.
   **/
  var `translate` : Option[ProjectionConfigTranslate] = None,
  /**
   * The cartographic projection to use. This value is case-insensitive, for example `"albers"` and `"Albers"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).
   * 
   * __Default value:__ `equalEarth`
   **/
  var `type` : Option[ProjectionConfigType] = None,
  var `spacing` : Option[ProjectionConfigSpacing] = None,
  var `clipExtent` : Option[ProjectionConfigClipExtent] = None,
  var `coefficient` : Option[ProjectionConfigCoefficient] = None,
  var `precision` : Option[ProjectionConfigPrecision] = None,
  var `size` : Option[ProjectionConfigSize] = None,
  var `reflectY` : Option[ProjectionConfigReflectY] = None,
  var `radius` : Option[ProjectionConfigRadius] = None,
  var `tilt` : Option[ProjectionConfigTilt] = None,
  var `pointRadius` : Option[ProjectionConfigPointRadius] = None,
  var `ratio` : Option[ProjectionConfigRatio] = None,
  var `parallel` : Option[ProjectionConfigParallel] = None,
  var `distance` : Option[ProjectionConfigDistance] = None
)  
{  }
object ProjectionConfig {
  val definedFields = Set("ratio", "reflectX", "clipAngle", "distance", "precision", "scale", "fit", "clipExtent", "rotate", "lobes", "reflectY", "parallels", "translate", "center", "fraction", "type", "spacing", "size", "extent", "coefficient", "pointRadius", "parallel", "radius", "tilt") 
}

////////////////////////////////////////////////////////////////////////

// MultiTimeUnit (UnionType)

sealed trait MultiTimeUnit extends TimeUnit
   // LocalMultiTimeUnit is defined elsewhere
   // UtcMultiTimeUnit is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeTransform (StructType)

case class ImputeTransform(
  /**
   * The imputation method to use for the field value of imputed data objects. One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
   * 
   * __Default value:__  `"value"`
   **/
  var `method` : Option[ImputeMethod] = None,
  /**
   * The data field for which the missing values should be imputed.
   **/
  var `impute` : String,
  /**
   * A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.
   * 
   * __Default value:__:  `[null, null]` indicating that the window includes all objects.
   **/
  var `frame` : Option[ImputeTransformFrame] = None,
  /**
   * A key field that uniquely identifies data objects within a group. Missing key values (those occurring in the data but not in the current group) will be imputed.
   **/
  var `key` : String,
  /**
   * The field value to use when the imputation `method` is `"value"`.
   **/
  var `value` : Option[JsValue] = None,
  /**
   * An optional array of fields by which to group the values. Imputation will then be performed on a per-group basis.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * Defines the key values that should be considered for imputation. An array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).
   * 
   * If provided, this will be used in addition to the key values observed within the input data. If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.
   * 
   * If there is no impute grouping, this property _must_ be specified.
   **/
  var `keyvals` : Option[ImputeTransformKeyvals] = None
) extends Transform 
{  }
object ImputeTransform {
  val definedFields = Set("keyvals", "key", "method", "frame", "groupby", "impute", "value") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacity (StructType)

case class SharedEncodingStrokeOpacity(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingStrokeOpacityDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingStrokeOpacityBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingStrokeOpacityCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingStrokeOpacityBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingStrokeOpacityValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingStrokeOpacityTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingStrokeOpacityType] = None
)  
{  }
object SharedEncodingStrokeOpacity {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// Width (ConstantType)

case class Width() extends MarkDefX2 with SharedEncodingRadius2Value with MarkConfigX2 with OverlayMarkDefX2 with MarkDefX with AreaConfigX2 with LineConfigX2 with LineConfigX with RectConfigX2 with RectConfigX with SharedEncodingRadiusValue with OverlayMarkDefX with SharedEncodingLongitude2Value with SharedEncodingLatitude2Value with PositionValueDefValue with BarConfigX2 with TickConfigX2 with SharedEncodingThetaValue with AreaConfigX with SharedEncodingX2Value with SharedEncodingYValue with BarConfigX with SharedEncodingTheta2Value with TickConfigX with SharedEncodingXValue with MarkConfigX with SharedEncodingY2Value

////////////////////////////////////////////////////////////////////////

// MarkConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait MarkConfigSize 
   case class MarkConfigSizeAsNumber(value: JsNumber) extends MarkConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigTension (UnionType)

sealed trait AreaConfigTension 
   case class AreaConfigTensionAsNumber(value: JsNumber) extends AreaConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SelectionParameterValue (UnionType)
/**
 * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.
 * 
 * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation.
 **/
sealed trait SelectionParameterValue 
   // SelectionInit is defined elsewhere
   case class SelectionParameterValueAsArrayOfDictOfSelectionInit(value: Seq[Map[String,SelectionInit]]) extends SelectionParameterValue
   case class SelectionParameterValueAsDictOfSelectionInitInterval(value: Map[String,SelectionInitInterval]) extends SelectionParameterValue

////////////////////////////////////////////////////////////////////////

// LegendConfigOffset (UnionType)

sealed trait LegendConfigOffset 
   case class LegendConfigOffsetAsNumber(value: JsNumber) extends LegendConfigOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait TopLevelFacetSpecSpacing 
   case class TopLevelFacetSpecSpacingAsNumber(value: JsNumber) extends TopLevelFacetSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Text (UnionType)
/**
 * Placeholder text if the `text` channel is not specified
 **/
sealed trait Text extends ConditionalPredicateValueDefTextExprRefValue with TopLevelLayerSpecTitle with LayerSpecTitle with RectConfigText with TopLevelFacetSpecTitle with TickConfigText with LineConfigText with TopLevelRepeatSpecAsObject1Title with VConcatSpecGenericSpecTitle with TitleParamsText with ConditionalParameterValueDefTextExprRefValue with OverlayMarkDefText with ValueDefWithConditionStringFieldDefTextValue with FacetSpecTitle with TopLevelHConcatSpecTitle with AreaConfigText with TopLevelConcatSpecTitle with TopLevelVConcatSpecTitle with FacetedUnitSpecTitle with MarkDefText with UnitSpecWithFrameTitle with SharedEncodingTextValue with LayerRepeatSpecTitle with TopLevelUnitSpecTitle with UnitSpecTitle with HConcatSpecGenericSpecTitle with TopLevelRepeatSpecAsObject2Title with BarConfigText with MarkConfigText with ConcatSpecGenericSpecTitle with NonLayerRepeatSpecTitle
   case class TextAsString(value: String) extends Text
   case class TextAsArrayOfString(value: Seq[String]) extends Text

////////////////////////////////////////////////////////////////////////

// ScaleDomainMid (UnionType)
/**
 * Inserts a single mid-point value into a two-element domain. The mid-point value must lie between the domain minimum and maximum values. This property can be useful for setting a midpoint for [diverging color scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise). The domainMid property is only intended for use with scales supporting continuous, piecewise domains.
 **/
sealed trait ScaleDomainMid 
   case class ScaleDomainMidAsNumber(value: JsNumber) extends ScaleDomainMid
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelSelectionParameterSelect (UnionType)
/**
 * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
 * 
 * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
 * - `"interval"` -- to select a continuous range of data values on `drag`.
 **/
sealed trait TopLevelSelectionParameterSelect 
   // SelectionType is defined elsewhere
   // PointSelectionConfig is defined elsewhere
   // IntervalSelectionConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingTheta2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkConfigEllipsis (UnionType)

sealed trait MarkConfigEllipsis 
   case class MarkConfigEllipsisAsString(value: String) extends MarkConfigEllipsis
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Diverging (EnumType)

sealed trait Diverging extends ColorScheme { val payload: JsValue }
   case object DivergingBlueorange extends Diverging { val payload = JsString("blueorange") }
   case object DivergingBlueorange3 extends Diverging { val payload = JsString("blueorange-3") }
   case object DivergingBlueorange4 extends Diverging { val payload = JsString("blueorange-4") }
   case object DivergingBlueorange5 extends Diverging { val payload = JsString("blueorange-5") }
   case object DivergingBlueorange6 extends Diverging { val payload = JsString("blueorange-6") }
   case object DivergingBlueorange7 extends Diverging { val payload = JsString("blueorange-7") }
   case object DivergingBlueorange8 extends Diverging { val payload = JsString("blueorange-8") }
   case object DivergingBlueorange9 extends Diverging { val payload = JsString("blueorange-9") }
   case object DivergingBlueorange10 extends Diverging { val payload = JsString("blueorange-10") }
   case object DivergingBlueorange11 extends Diverging { val payload = JsString("blueorange-11") }
   case object DivergingBrownbluegreen extends Diverging { val payload = JsString("brownbluegreen") }
   case object DivergingBrownbluegreen3 extends Diverging { val payload = JsString("brownbluegreen-3") }
   case object DivergingBrownbluegreen4 extends Diverging { val payload = JsString("brownbluegreen-4") }
   case object DivergingBrownbluegreen5 extends Diverging { val payload = JsString("brownbluegreen-5") }
   case object DivergingBrownbluegreen6 extends Diverging { val payload = JsString("brownbluegreen-6") }
   case object DivergingBrownbluegreen7 extends Diverging { val payload = JsString("brownbluegreen-7") }
   case object DivergingBrownbluegreen8 extends Diverging { val payload = JsString("brownbluegreen-8") }
   case object DivergingBrownbluegreen9 extends Diverging { val payload = JsString("brownbluegreen-9") }
   case object DivergingBrownbluegreen10 extends Diverging { val payload = JsString("brownbluegreen-10") }
   case object DivergingBrownbluegreen11 extends Diverging { val payload = JsString("brownbluegreen-11") }
   case object DivergingPurplegreen extends Diverging { val payload = JsString("purplegreen") }
   case object DivergingPurplegreen3 extends Diverging { val payload = JsString("purplegreen-3") }
   case object DivergingPurplegreen4 extends Diverging { val payload = JsString("purplegreen-4") }
   case object DivergingPurplegreen5 extends Diverging { val payload = JsString("purplegreen-5") }
   case object DivergingPurplegreen6 extends Diverging { val payload = JsString("purplegreen-6") }
   case object DivergingPurplegreen7 extends Diverging { val payload = JsString("purplegreen-7") }
   case object DivergingPurplegreen8 extends Diverging { val payload = JsString("purplegreen-8") }
   case object DivergingPurplegreen9 extends Diverging { val payload = JsString("purplegreen-9") }
   case object DivergingPurplegreen10 extends Diverging { val payload = JsString("purplegreen-10") }
   case object DivergingPurplegreen11 extends Diverging { val payload = JsString("purplegreen-11") }
   case object DivergingPinkyellowgreen extends Diverging { val payload = JsString("pinkyellowgreen") }
   case object DivergingPinkyellowgreen3 extends Diverging { val payload = JsString("pinkyellowgreen-3") }
   case object DivergingPinkyellowgreen4 extends Diverging { val payload = JsString("pinkyellowgreen-4") }
   case object DivergingPinkyellowgreen5 extends Diverging { val payload = JsString("pinkyellowgreen-5") }
   case object DivergingPinkyellowgreen6 extends Diverging { val payload = JsString("pinkyellowgreen-6") }
   case object DivergingPinkyellowgreen7 extends Diverging { val payload = JsString("pinkyellowgreen-7") }
   case object DivergingPinkyellowgreen8 extends Diverging { val payload = JsString("pinkyellowgreen-8") }
   case object DivergingPinkyellowgreen9 extends Diverging { val payload = JsString("pinkyellowgreen-9") }
   case object DivergingPinkyellowgreen10 extends Diverging { val payload = JsString("pinkyellowgreen-10") }
   case object DivergingPinkyellowgreen11 extends Diverging { val payload = JsString("pinkyellowgreen-11") }
   case object DivergingPurpleorange extends Diverging { val payload = JsString("purpleorange") }
   case object DivergingPurpleorange3 extends Diverging { val payload = JsString("purpleorange-3") }
   case object DivergingPurpleorange4 extends Diverging { val payload = JsString("purpleorange-4") }
   case object DivergingPurpleorange5 extends Diverging { val payload = JsString("purpleorange-5") }
   case object DivergingPurpleorange6 extends Diverging { val payload = JsString("purpleorange-6") }
   case object DivergingPurpleorange7 extends Diverging { val payload = JsString("purpleorange-7") }
   case object DivergingPurpleorange8 extends Diverging { val payload = JsString("purpleorange-8") }
   case object DivergingPurpleorange9 extends Diverging { val payload = JsString("purpleorange-9") }
   case object DivergingPurpleorange10 extends Diverging { val payload = JsString("purpleorange-10") }
   case object DivergingPurpleorange11 extends Diverging { val payload = JsString("purpleorange-11") }
   case object DivergingRedblue extends Diverging { val payload = JsString("redblue") }
   case object DivergingRedblue3 extends Diverging { val payload = JsString("redblue-3") }
   case object DivergingRedblue4 extends Diverging { val payload = JsString("redblue-4") }
   case object DivergingRedblue5 extends Diverging { val payload = JsString("redblue-5") }
   case object DivergingRedblue6 extends Diverging { val payload = JsString("redblue-6") }
   case object DivergingRedblue7 extends Diverging { val payload = JsString("redblue-7") }
   case object DivergingRedblue8 extends Diverging { val payload = JsString("redblue-8") }
   case object DivergingRedblue9 extends Diverging { val payload = JsString("redblue-9") }
   case object DivergingRedblue10 extends Diverging { val payload = JsString("redblue-10") }
   case object DivergingRedblue11 extends Diverging { val payload = JsString("redblue-11") }
   case object DivergingRedgrey extends Diverging { val payload = JsString("redgrey") }
   case object DivergingRedgrey3 extends Diverging { val payload = JsString("redgrey-3") }
   case object DivergingRedgrey4 extends Diverging { val payload = JsString("redgrey-4") }
   case object DivergingRedgrey5 extends Diverging { val payload = JsString("redgrey-5") }
   case object DivergingRedgrey6 extends Diverging { val payload = JsString("redgrey-6") }
   case object DivergingRedgrey7 extends Diverging { val payload = JsString("redgrey-7") }
   case object DivergingRedgrey8 extends Diverging { val payload = JsString("redgrey-8") }
   case object DivergingRedgrey9 extends Diverging { val payload = JsString("redgrey-9") }
   case object DivergingRedgrey10 extends Diverging { val payload = JsString("redgrey-10") }
   case object DivergingRedgrey11 extends Diverging { val payload = JsString("redgrey-11") }
   case object DivergingRedyellowblue extends Diverging { val payload = JsString("redyellowblue") }
   case object DivergingRedyellowblue3 extends Diverging { val payload = JsString("redyellowblue-3") }
   case object DivergingRedyellowblue4 extends Diverging { val payload = JsString("redyellowblue-4") }
   case object DivergingRedyellowblue5 extends Diverging { val payload = JsString("redyellowblue-5") }
   case object DivergingRedyellowblue6 extends Diverging { val payload = JsString("redyellowblue-6") }
   case object DivergingRedyellowblue7 extends Diverging { val payload = JsString("redyellowblue-7") }
   case object DivergingRedyellowblue8 extends Diverging { val payload = JsString("redyellowblue-8") }
   case object DivergingRedyellowblue9 extends Diverging { val payload = JsString("redyellowblue-9") }
   case object DivergingRedyellowblue10 extends Diverging { val payload = JsString("redyellowblue-10") }
   case object DivergingRedyellowblue11 extends Diverging { val payload = JsString("redyellowblue-11") }
   case object DivergingRedyellowgreen extends Diverging { val payload = JsString("redyellowgreen") }
   case object DivergingRedyellowgreen3 extends Diverging { val payload = JsString("redyellowgreen-3") }
   case object DivergingRedyellowgreen4 extends Diverging { val payload = JsString("redyellowgreen-4") }
   case object DivergingRedyellowgreen5 extends Diverging { val payload = JsString("redyellowgreen-5") }
   case object DivergingRedyellowgreen6 extends Diverging { val payload = JsString("redyellowgreen-6") }
   case object DivergingRedyellowgreen7 extends Diverging { val payload = JsString("redyellowgreen-7") }
   case object DivergingRedyellowgreen8 extends Diverging { val payload = JsString("redyellowgreen-8") }
   case object DivergingRedyellowgreen9 extends Diverging { val payload = JsString("redyellowgreen-9") }
   case object DivergingRedyellowgreen10 extends Diverging { val payload = JsString("redyellowgreen-10") }
   case object DivergingRedyellowgreen11 extends Diverging { val payload = JsString("redyellowgreen-11") }
   case object DivergingSpectral extends Diverging { val payload = JsString("spectral") }
   case object DivergingSpectral3 extends Diverging { val payload = JsString("spectral-3") }
   case object DivergingSpectral4 extends Diverging { val payload = JsString("spectral-4") }
   case object DivergingSpectral5 extends Diverging { val payload = JsString("spectral-5") }
   case object DivergingSpectral6 extends Diverging { val payload = JsString("spectral-6") }
   case object DivergingSpectral7 extends Diverging { val payload = JsString("spectral-7") }
   case object DivergingSpectral8 extends Diverging { val payload = JsString("spectral-8") }
   case object DivergingSpectral9 extends Diverging { val payload = JsString("spectral-9") }
   case object DivergingSpectral10 extends Diverging { val payload = JsString("spectral-10") }
   case object DivergingSpectral11 extends Diverging { val payload = JsString("spectral-11") }

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleOrient (UnionType)

sealed trait LegendConfigTitleOrient 
   // Orient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeJoin (UnionType)

sealed trait MarkDefStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RegressionTransformExtent (ConstrainedType)
/**
 * A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.
 **/
case class RegressionTransformExtent(value: Seq[JsNumber]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// SelectionParameter (StructType)

case class SelectionParameter(
  /**
   * When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection's [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.
   * 
   * Legend bindings are restricted to selections that only specify a single field or encoding.
   * 
   * Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.
   * 
   * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
   **/
  var `bind` : Option[SelectionParameterBind] = None,
  /**
   * Required. A unique name for the selection parameter. Selection names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or "$", or "_") and may not start with a digit. Reserved keywords that may not be used as parameter names are "datum", "event", "item", and "parent".
   **/
  var `name` : String,
  /**
   * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
   * 
   * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
   * - `"interval"` -- to select a continuous range of data values on `drag`.
   **/
  var `select` : SelectionParameterSelect,
  /**
   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.
   * 
   * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation.
   **/
  var `value` : Option[SelectionParameterValue] = None
) extends UnitSpecWithFrameParamsElement with FacetedUnitSpecParamsElement with UnitSpecParamsElement with TopLevelUnitSpecParamsElement 
{  }
object SelectionParameter {
  val definedFields = Set("bind", "name", "select", "value") 
}

////////////////////////////////////////////////////////////////////////

// True (ConstantType)

case class True() extends GraticuleGeneratorGraticule with BinTransformBin with SphereGeneratorSphere

////////////////////////////////////////////////////////////////////////

// FacetFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FacetFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingFill (StructType)

case class SharedEncodingFill(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingFillDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingFillBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingFillCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingFillBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingFillValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingFillTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingFillType] = None
)  
{  }
object SharedEncodingFill {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait LineConfigX 
   case class LineConfigXAsNumber(value: JsNumber) extends LineConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait TickConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait LineConfigY 
   case class LineConfigYAsNumber(value: JsNumber) extends LineConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncodingYError (UnionType)
/**
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait FacetedEncodingYError 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisStringAsObject1Condition (UnionType)

sealed trait ConditionalAxisStringAsObject1Condition 
   // ConditionalPredicateValueDefStringNullExprRef is defined elsewhere
   case class ConditionalAxisStringAsObject1ConditionAsArrayOfConditionalPredicateValueDefStringNullExprRef(value: Seq[ConditionalPredicateValueDefStringNullExprRef]) extends ConditionalAxisStringAsObject1Condition

////////////////////////////////////////////////////////////////////////

// EncodingYError (UnionType)
/**
 * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait EncodingYError 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Sort (UnionType)
/**
 * Sort order for the encoded field.
 * 
 * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
 * 
 * For discrete fields, `sort` can be one of the following:
 * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
 * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
 * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
 * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
 * - `null` indicating no sort.
 * 
 * __Default value:__ `"ascending"`
 * 
 * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
 * 
 * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
 **/
sealed trait Sort 
   // SortByEncoding is defined elsewhere
   case object SortAsNull extends Sort
   // EncodingSortField is defined elsewhere
   // AllSortString is defined elsewhere
   // SortArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait BarConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class PositionFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleConfigOffset (UnionType)

sealed trait TitleConfigOffset 
   case class TitleConfigOffsetAsNumber(value: JsNumber) extends TitleConfigOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigQuantileCount (ConstrainedType)
/**
 * Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.
 * 
 * __Default value:__ `4`
 **/
case class ScaleConfigQuantileCount(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class MarkDefFillOpacityAsNumber(value: JsNumber) extends MarkDefFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait LineConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefColorNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefColorNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Color] = None
) extends ConditionalPredicateValueDefColorNullExprRef 
{  }
object ConditionalPredicateValueDefColorNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// SelectionParameterBind (UnionType)
/**
 * When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection's [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.
 * 
 * Legend bindings are restricted to selections that only specify a single field or encoding.
 * 
 * Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.
 * 
 * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
 **/
sealed trait SelectionParameterBind 
   // Binding is defined elsewhere
   case class SelectionParameterBindAsDictOfBinding(value: Map[String,Binding]) extends SelectionParameterBind
   // LegendBinding is defined elsewhere
   // Scales is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingTextBin 
   case class SharedEncodingTextBinAsBool(value: Boolean) extends SharedEncodingTextBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingTextBinAsNull extends SharedEncodingTextBin

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefColorNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefColorNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefColorNullExprRef 
{  }
object ConditionalPredicateValueDefColorNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// AxisOrient (EnumType)

sealed trait AxisOrient extends AxisConfigOrient { val payload: JsValue }
   case object AxisOrientTop extends AxisOrient { val payload = JsString("top") }
   case object AxisOrientBottom extends AxisOrient { val payload = JsString("bottom") }
   case object AxisOrientLeft extends AxisOrient { val payload = JsString("left") }
   case object AxisOrientRight extends AxisOrient { val payload = JsString("right") }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefNumberDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefNumberDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelBound (UnionType)

sealed trait AxisLabelBound 
   case class AxisLabelBoundAsNumber(value: JsNumber) extends AxisLabelBound
   case class AxisLabelBoundAsBool(value: Boolean) extends AxisLabelBound
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigText (UnionType)

sealed trait BarConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigCornerRadiusBottomRight (UnionType)

sealed trait AreaConfigCornerRadiusBottomRight 
   case class AreaConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends AreaConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Transparent (ConstantType)

case class Transparent() extends LineConfigPoint with AreaConfigPoint with MarkDefPoint

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Spec (UnionType)
/**
 * A specification of the view that gets repeated.
 **/
sealed trait TopLevelRepeatSpecAsObject2Spec 
   // LayerSpec is defined elsewhere
   // UnitSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SphereGenerator (StructType)

case class SphereGenerator(
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : Option[String] = None,
  /**
   * Generate sphere GeoJSON data for the full globe.
   **/
  var `sphere` : SphereGeneratorSphere
) extends Generator 
{  }
object SphereGenerator {
  val definedFields = Set("name", "sphere") 
}

////////////////////////////////////////////////////////////////////////

// ImputeParamsFrameElement (UnionType)

sealed trait ImputeParamsFrameElement 
   case object ImputeParamsFrameElementAsNull extends ImputeParamsFrameElement
   case class ImputeParamsFrameElementAsNumber(value: JsNumber) extends ImputeParamsFrameElement

////////////////////////////////////////////////////////////////////////

// AreaConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait AreaConfigRadius2 
   case class AreaConfigRadius2AsNumber(value: JsNumber) extends AreaConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleBaseline (UnionType)

sealed trait AxisConfigTitleBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisColor (UnionType)

sealed trait ConditionalAxisColor extends AxisGridColor with AxisConfigTickColor with AxisLabelColor with AxisConfigLabelColor with AxisTickColor with AxisConfigGridColor
   // ConditionalAxisColorAsObject1 is defined elsewhere
   // ConditionalAxisColorAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickBand (UnionType)

sealed trait AxisConfigTickBand 
   // AxisConfigTickBandAsString is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleFont (UnionType)
/**
 * Font of the header title. (e.g., `"Helvetica Neue"`).
 **/
sealed trait HeaderConfigTitleFont 
   case class HeaderConfigTitleFontAsString(value: String) extends HeaderConfigTitleFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DomainUnionWith (StructType)

case class DomainUnionWith(
  /**
   * Customized domain values to be union with the field's values or explicitly defined domain. Should be an array of valid scale domain values.
   **/
  var `unionWith` : DomainUnionWithUnionWith
) extends ScaleDomain 
{  }
object DomainUnionWith {
  val definedFields = Set("unionWith") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefDiscreteBandSize (ConstrainedType)
/**
 * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
 **/
sealed trait MarkDefDiscreteBandSize 
   case class MarkDefDiscreteBandSizeAsNumber(value: JsNumber) extends MarkDefDiscreteBandSize
   // RelativeBandSize is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class MarkDefAngleAsNumber(value: JsNumber) extends MarkDefAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateStringFieldDefFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait ConditionalPredicateStringFieldDefFormat 
   case class ConditionalPredicateStringFieldDefFormatAsString(value: String) extends ConditionalPredicateStringFieldDefFormat
   case class ConditionalPredicateStringFieldDefFormatAsDictOfAny(value: Map[String,JsValue]) extends ConditionalPredicateStringFieldDefFormat

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffsetBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingXOffsetBin 
   case class SharedEncodingXOffsetBinAsBool(value: Boolean) extends SharedEncodingXOffsetBin
   // BinParams is defined elsewhere
   case object SharedEncodingXOffsetBinAsNull extends SharedEncodingXOffsetBin

////////////////////////////////////////////////////////////////////////

// AxisTitleFontStyle (UnionType)

sealed trait AxisTitleFontStyle 
   case class AxisTitleFontStyleAsString(value: String) extends AxisTitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LatLongFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait LatLongFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionRotate (UnionType)
/**
 * The projection's three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)
 * 
 * __Default value:__ `[0, 0, 0]`
 **/
sealed trait ProjectionRotate 
   // Vector2Number is defined elsewhere
   // Vector3Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefNumberBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionDatumDefNumberBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SelectionParameterSelect (UnionType)
/**
 * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
 * 
 * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
 * - `"interval"` -- to select a continuous range of data values on `drag`.
 **/
sealed trait SelectionParameterSelect 
   // SelectionType is defined elsewhere
   // PointSelectionConfig is defined elsewhere
   // IntervalSelectionConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigDir (UnionType)

sealed trait TickConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigHref (UnionType)

sealed trait AreaConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2ParamsElement (UnionType)

sealed trait TopLevelRepeatSpecAsObject2ParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotConfig (StructType)
/**
 * Box Config
 **/
case class BoxPlotConfig(
  /**
   * Size of the box and median tick of a box plot
   **/
  var `size` : Option[JsNumber] = None,
  /**
   * The extent of the whiskers. Available options include:
   * - `"min-max"`: min and max are the lower and upper whiskers respectively.
   * - A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
   * 
   * __Default value:__ `1.5`.
   **/
  var `extent` : Option[BoxPlotConfigExtent] = None,
  var `rule` : Option[BoxPlotConfigRule] = None,
  var `outliers` : Option[BoxPlotConfigOutliers] = None,
  var `median` : Option[BoxPlotConfigMedian] = None,
  var `ticks` : Option[BoxPlotConfigTicks] = None,
  var `box` : Option[BoxPlotConfigBox] = None
)  
{  }
object BoxPlotConfig {
  val definedFields = Set("box", "rule", "median", "outliers", "ticks", "size", "extent") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class OverlayMarkDefAngleAsNumber(value: JsNumber) extends OverlayMarkDefAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LocalSingleTimeUnit (EnumType)

sealed trait LocalSingleTimeUnit extends SingleTimeUnit { val payload: JsValue }
   case object LocalSingleTimeUnitYear extends LocalSingleTimeUnit { val payload = JsString("year") }
   case object LocalSingleTimeUnitQuarter extends LocalSingleTimeUnit { val payload = JsString("quarter") }
   case object LocalSingleTimeUnitMonth extends LocalSingleTimeUnit { val payload = JsString("month") }
   case object LocalSingleTimeUnitWeek extends LocalSingleTimeUnit { val payload = JsString("week") }
   case object LocalSingleTimeUnitDay extends LocalSingleTimeUnit { val payload = JsString("day") }
   case object LocalSingleTimeUnitDayofyear extends LocalSingleTimeUnit { val payload = JsString("dayofyear") }
   case object LocalSingleTimeUnitDate extends LocalSingleTimeUnit { val payload = JsString("date") }
   case object LocalSingleTimeUnitHours extends LocalSingleTimeUnit { val payload = JsString("hours") }
   case object LocalSingleTimeUnitMinutes extends LocalSingleTimeUnit { val payload = JsString("minutes") }
   case object LocalSingleTimeUnitSeconds extends LocalSingleTimeUnit { val payload = JsString("seconds") }
   case object LocalSingleTimeUnitMilliseconds extends LocalSingleTimeUnit { val payload = JsString("milliseconds") }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelAlign (UnionType)

sealed trait ConditionalAxisLabelAlign extends AxisConfigLabelAlign with AxisLabelAlign
   // ConditionalAxisLabelAlignAsObject1 is defined elsewhere
   // ConditionalAxisLabelAlignAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigAngle (UnionType)

sealed trait MarkConfigAngle 
   // MarkConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class AreaConfigFontSizeAsNumber(value: JsNumber) extends AreaConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateStringFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalPredicateStringFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HConcatSpecGenericSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait HConcatSpecGenericSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ColorName (EnumType)

sealed trait ColorName extends Color { val payload: JsValue }
   case object ColorNameBlack extends ColorName { val payload = JsString("black") }
   case object ColorNameSilver extends ColorName { val payload = JsString("silver") }
   case object ColorNameGray extends ColorName { val payload = JsString("gray") }
   case object ColorNameWhite extends ColorName { val payload = JsString("white") }
   case object ColorNameMaroon extends ColorName { val payload = JsString("maroon") }
   case object ColorNameRed extends ColorName { val payload = JsString("red") }
   case object ColorNamePurple extends ColorName { val payload = JsString("purple") }
   case object ColorNameFuchsia extends ColorName { val payload = JsString("fuchsia") }
   case object ColorNameGreen extends ColorName { val payload = JsString("green") }
   case object ColorNameLime extends ColorName { val payload = JsString("lime") }
   case object ColorNameOlive extends ColorName { val payload = JsString("olive") }
   case object ColorNameYellow extends ColorName { val payload = JsString("yellow") }
   case object ColorNameNavy extends ColorName { val payload = JsString("navy") }
   case object ColorNameBlue extends ColorName { val payload = JsString("blue") }
   case object ColorNameTeal extends ColorName { val payload = JsString("teal") }
   case object ColorNameAqua extends ColorName { val payload = JsString("aqua") }
   case object ColorNameOrange extends ColorName { val payload = JsString("orange") }
   case object ColorNameAliceblue extends ColorName { val payload = JsString("aliceblue") }
   case object ColorNameAntiquewhite extends ColorName { val payload = JsString("antiquewhite") }
   case object ColorNameAquamarine extends ColorName { val payload = JsString("aquamarine") }
   case object ColorNameAzure extends ColorName { val payload = JsString("azure") }
   case object ColorNameBeige extends ColorName { val payload = JsString("beige") }
   case object ColorNameBisque extends ColorName { val payload = JsString("bisque") }
   case object ColorNameBlanchedalmond extends ColorName { val payload = JsString("blanchedalmond") }
   case object ColorNameBlueviolet extends ColorName { val payload = JsString("blueviolet") }
   case object ColorNameBrown extends ColorName { val payload = JsString("brown") }
   case object ColorNameBurlywood extends ColorName { val payload = JsString("burlywood") }
   case object ColorNameCadetblue extends ColorName { val payload = JsString("cadetblue") }
   case object ColorNameChartreuse extends ColorName { val payload = JsString("chartreuse") }
   case object ColorNameChocolate extends ColorName { val payload = JsString("chocolate") }
   case object ColorNameCoral extends ColorName { val payload = JsString("coral") }
   case object ColorNameCornflowerblue extends ColorName { val payload = JsString("cornflowerblue") }
   case object ColorNameCornsilk extends ColorName { val payload = JsString("cornsilk") }
   case object ColorNameCrimson extends ColorName { val payload = JsString("crimson") }
   case object ColorNameCyan extends ColorName { val payload = JsString("cyan") }
   case object ColorNameDarkblue extends ColorName { val payload = JsString("darkblue") }
   case object ColorNameDarkcyan extends ColorName { val payload = JsString("darkcyan") }
   case object ColorNameDarkgoldenrod extends ColorName { val payload = JsString("darkgoldenrod") }
   case object ColorNameDarkgray extends ColorName { val payload = JsString("darkgray") }
   case object ColorNameDarkgreen extends ColorName { val payload = JsString("darkgreen") }
   case object ColorNameDarkgrey extends ColorName { val payload = JsString("darkgrey") }
   case object ColorNameDarkkhaki extends ColorName { val payload = JsString("darkkhaki") }
   case object ColorNameDarkmagenta extends ColorName { val payload = JsString("darkmagenta") }
   case object ColorNameDarkolivegreen extends ColorName { val payload = JsString("darkolivegreen") }
   case object ColorNameDarkorange extends ColorName { val payload = JsString("darkorange") }
   case object ColorNameDarkorchid extends ColorName { val payload = JsString("darkorchid") }
   case object ColorNameDarkred extends ColorName { val payload = JsString("darkred") }
   case object ColorNameDarksalmon extends ColorName { val payload = JsString("darksalmon") }
   case object ColorNameDarkseagreen extends ColorName { val payload = JsString("darkseagreen") }
   case object ColorNameDarkslateblue extends ColorName { val payload = JsString("darkslateblue") }
   case object ColorNameDarkslategray extends ColorName { val payload = JsString("darkslategray") }
   case object ColorNameDarkslategrey extends ColorName { val payload = JsString("darkslategrey") }
   case object ColorNameDarkturquoise extends ColorName { val payload = JsString("darkturquoise") }
   case object ColorNameDarkviolet extends ColorName { val payload = JsString("darkviolet") }
   case object ColorNameDeeppink extends ColorName { val payload = JsString("deeppink") }
   case object ColorNameDeepskyblue extends ColorName { val payload = JsString("deepskyblue") }
   case object ColorNameDimgray extends ColorName { val payload = JsString("dimgray") }
   case object ColorNameDimgrey extends ColorName { val payload = JsString("dimgrey") }
   case object ColorNameDodgerblue extends ColorName { val payload = JsString("dodgerblue") }
   case object ColorNameFirebrick extends ColorName { val payload = JsString("firebrick") }
   case object ColorNameFloralwhite extends ColorName { val payload = JsString("floralwhite") }
   case object ColorNameForestgreen extends ColorName { val payload = JsString("forestgreen") }
   case object ColorNameGainsboro extends ColorName { val payload = JsString("gainsboro") }
   case object ColorNameGhostwhite extends ColorName { val payload = JsString("ghostwhite") }
   case object ColorNameGold extends ColorName { val payload = JsString("gold") }
   case object ColorNameGoldenrod extends ColorName { val payload = JsString("goldenrod") }
   case object ColorNameGreenyellow extends ColorName { val payload = JsString("greenyellow") }
   case object ColorNameGrey extends ColorName { val payload = JsString("grey") }
   case object ColorNameHoneydew extends ColorName { val payload = JsString("honeydew") }
   case object ColorNameHotpink extends ColorName { val payload = JsString("hotpink") }
   case object ColorNameIndianred extends ColorName { val payload = JsString("indianred") }
   case object ColorNameIndigo extends ColorName { val payload = JsString("indigo") }
   case object ColorNameIvory extends ColorName { val payload = JsString("ivory") }
   case object ColorNameKhaki extends ColorName { val payload = JsString("khaki") }
   case object ColorNameLavender extends ColorName { val payload = JsString("lavender") }
   case object ColorNameLavenderblush extends ColorName { val payload = JsString("lavenderblush") }
   case object ColorNameLawngreen extends ColorName { val payload = JsString("lawngreen") }
   case object ColorNameLemonchiffon extends ColorName { val payload = JsString("lemonchiffon") }
   case object ColorNameLightblue extends ColorName { val payload = JsString("lightblue") }
   case object ColorNameLightcoral extends ColorName { val payload = JsString("lightcoral") }
   case object ColorNameLightcyan extends ColorName { val payload = JsString("lightcyan") }
   case object ColorNameLightgoldenrodyellow extends ColorName { val payload = JsString("lightgoldenrodyellow") }
   case object ColorNameLightgray extends ColorName { val payload = JsString("lightgray") }
   case object ColorNameLightgreen extends ColorName { val payload = JsString("lightgreen") }
   case object ColorNameLightgrey extends ColorName { val payload = JsString("lightgrey") }
   case object ColorNameLightpink extends ColorName { val payload = JsString("lightpink") }
   case object ColorNameLightsalmon extends ColorName { val payload = JsString("lightsalmon") }
   case object ColorNameLightseagreen extends ColorName { val payload = JsString("lightseagreen") }
   case object ColorNameLightskyblue extends ColorName { val payload = JsString("lightskyblue") }
   case object ColorNameLightslategray extends ColorName { val payload = JsString("lightslategray") }
   case object ColorNameLightslategrey extends ColorName { val payload = JsString("lightslategrey") }
   case object ColorNameLightsteelblue extends ColorName { val payload = JsString("lightsteelblue") }
   case object ColorNameLightyellow extends ColorName { val payload = JsString("lightyellow") }
   case object ColorNameLimegreen extends ColorName { val payload = JsString("limegreen") }
   case object ColorNameLinen extends ColorName { val payload = JsString("linen") }
   case object ColorNameMagenta extends ColorName { val payload = JsString("magenta") }
   case object ColorNameMediumaquamarine extends ColorName { val payload = JsString("mediumaquamarine") }
   case object ColorNameMediumblue extends ColorName { val payload = JsString("mediumblue") }
   case object ColorNameMediumorchid extends ColorName { val payload = JsString("mediumorchid") }
   case object ColorNameMediumpurple extends ColorName { val payload = JsString("mediumpurple") }
   case object ColorNameMediumseagreen extends ColorName { val payload = JsString("mediumseagreen") }
   case object ColorNameMediumslateblue extends ColorName { val payload = JsString("mediumslateblue") }
   case object ColorNameMediumspringgreen extends ColorName { val payload = JsString("mediumspringgreen") }
   case object ColorNameMediumturquoise extends ColorName { val payload = JsString("mediumturquoise") }
   case object ColorNameMediumvioletred extends ColorName { val payload = JsString("mediumvioletred") }
   case object ColorNameMidnightblue extends ColorName { val payload = JsString("midnightblue") }
   case object ColorNameMintcream extends ColorName { val payload = JsString("mintcream") }
   case object ColorNameMistyrose extends ColorName { val payload = JsString("mistyrose") }
   case object ColorNameMoccasin extends ColorName { val payload = JsString("moccasin") }
   case object ColorNameNavajowhite extends ColorName { val payload = JsString("navajowhite") }
   case object ColorNameOldlace extends ColorName { val payload = JsString("oldlace") }
   case object ColorNameOlivedrab extends ColorName { val payload = JsString("olivedrab") }
   case object ColorNameOrangered extends ColorName { val payload = JsString("orangered") }
   case object ColorNameOrchid extends ColorName { val payload = JsString("orchid") }
   case object ColorNamePalegoldenrod extends ColorName { val payload = JsString("palegoldenrod") }
   case object ColorNamePalegreen extends ColorName { val payload = JsString("palegreen") }
   case object ColorNamePaleturquoise extends ColorName { val payload = JsString("paleturquoise") }
   case object ColorNamePalevioletred extends ColorName { val payload = JsString("palevioletred") }
   case object ColorNamePapayawhip extends ColorName { val payload = JsString("papayawhip") }
   case object ColorNamePeachpuff extends ColorName { val payload = JsString("peachpuff") }
   case object ColorNamePeru extends ColorName { val payload = JsString("peru") }
   case object ColorNamePink extends ColorName { val payload = JsString("pink") }
   case object ColorNamePlum extends ColorName { val payload = JsString("plum") }
   case object ColorNamePowderblue extends ColorName { val payload = JsString("powderblue") }
   case object ColorNameRosybrown extends ColorName { val payload = JsString("rosybrown") }
   case object ColorNameRoyalblue extends ColorName { val payload = JsString("royalblue") }
   case object ColorNameSaddlebrown extends ColorName { val payload = JsString("saddlebrown") }
   case object ColorNameSalmon extends ColorName { val payload = JsString("salmon") }
   case object ColorNameSandybrown extends ColorName { val payload = JsString("sandybrown") }
   case object ColorNameSeagreen extends ColorName { val payload = JsString("seagreen") }
   case object ColorNameSeashell extends ColorName { val payload = JsString("seashell") }
   case object ColorNameSienna extends ColorName { val payload = JsString("sienna") }
   case object ColorNameSkyblue extends ColorName { val payload = JsString("skyblue") }
   case object ColorNameSlateblue extends ColorName { val payload = JsString("slateblue") }
   case object ColorNameSlategray extends ColorName { val payload = JsString("slategray") }
   case object ColorNameSlategrey extends ColorName { val payload = JsString("slategrey") }
   case object ColorNameSnow extends ColorName { val payload = JsString("snow") }
   case object ColorNameSpringgreen extends ColorName { val payload = JsString("springgreen") }
   case object ColorNameSteelblue extends ColorName { val payload = JsString("steelblue") }
   case object ColorNameTan extends ColorName { val payload = JsString("tan") }
   case object ColorNameThistle extends ColorName { val payload = JsString("thistle") }
   case object ColorNameTomato extends ColorName { val payload = JsString("tomato") }
   case object ColorNameTurquoise extends ColorName { val payload = JsString("turquoise") }
   case object ColorNameViolet extends ColorName { val payload = JsString("violet") }
   case object ColorNameWheat extends ColorName { val payload = JsString("wheat") }
   case object ColorNameWhitesmoke extends ColorName { val payload = JsString("whitesmoke") }
   case object ColorNameYellowgreen extends ColorName { val payload = JsString("yellowgreen") }
   case object ColorNameRebeccapurple extends ColorName { val payload = JsString("rebeccapurple") }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontWeightNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefFontWeightNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[FontWeight] = None
) extends ConditionalPredicateValueDefFontWeightNullExprRef 
{  }
object ConditionalPredicateValueDefFontWeightNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleFontStyle (UnionType)

sealed trait LegendConfigTitleFontStyle 
   case class LegendConfigTitleFontStyleAsString(value: String) extends LegendConfigTitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontWeightNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefFontWeightNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefFontWeightNullExprRef 
{  }
object ConditionalPredicateValueDefFontWeightNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait BarConfigRadius2 
   case class BarConfigRadius2AsNumber(value: JsNumber) extends BarConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingYBin 
   case class SharedEncodingYBinAsBool(value: Boolean) extends SharedEncodingYBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingYBinAsNull extends SharedEncodingYBin

////////////////////////////////////////////////////////////////////////

// DomainUnionWithUnionWith (UnionType)
/**
 * Customized domain values to be union with the field's values or explicitly defined domain. Should be an array of valid scale domain values.
 **/
sealed trait DomainUnionWithUnionWith 
   case class DomainUnionWithUnionWithAsArrayOfNumber(value: Seq[JsNumber]) extends DomainUnionWithUnionWith
   case class DomainUnionWithUnionWithAsArrayOfString(value: Seq[String]) extends DomainUnionWithUnionWith
   case class DomainUnionWithUnionWithAsArrayOfBool(value: Seq[Boolean]) extends DomainUnionWithUnionWith
   case class DomainUnionWithUnionWithAsArrayOfDateTime(value: Seq[DateTime]) extends DomainUnionWithUnionWith

////////////////////////////////////////////////////////////////////////

// RectConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait RectConfigOuterRadius 
   case class RectConfigOuterRadiusAsNumber(value: JsNumber) extends RectConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNull (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNull(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends ColorDef 
{  }
object FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNull {
  val definedFields = Set("bin", "type", "bandPosition", "legend", "condition", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingStrokeOpacityType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MergedStreamFilter (UnionType)

sealed trait MergedStreamFilter 
   case class MergedStreamFilterAsString(value: String) extends MergedStreamFilter
   case class MergedStreamFilterAsArrayOfString(value: Seq[String]) extends MergedStreamFilter

////////////////////////////////////////////////////////////////////////

// MarkConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait MarkConfigX2 
   case class MarkConfigX2AsNumber(value: JsNumber) extends MarkConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class RectConfigAngleAsNumber(value: JsNumber) extends RectConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigCornerRadiusBottomRight (UnionType)

sealed trait LineConfigCornerRadiusBottomRight 
   case class LineConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends LineConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigDy (UnionType)

sealed trait TickConfigDy 
   case class TickConfigDyAsNumber(value: JsNumber) extends TickConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingStrokeType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigFillOpacity (UnionType)

sealed trait MarkConfigFillOpacity 
   // MarkConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigDx (UnionType)

sealed trait TickConfigDx 
   case class TickConfigDxAsNumber(value: JsNumber) extends TickConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedEncoding (StructType)
/**
 * A key-value mapping between encoding channels and definition of fields.
 **/
case class FacetedEncoding(
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[PositionDef] = None,
  /**
   * Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   **/
  var `longitude2` : Option[Position2Def] = None,
  /**
   * The URL of an image mark.
   **/
  var `url` : Option[FacetedEncodingUrl] = None,
  /**
   * Fill opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `fillOpacity` property.
   **/
  var `fillOpacity` : Option[NumericMarkPropDef] = None,
  /**
   * A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data.
   **/
  var `key` : Option[FieldDefWithoutScale] = None,
  /**
   * The inner radius in pixels of arc marks.
   **/
  var `radius2` : Option[Position2Def] = None,
  /**
   * Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `yError2` : Option[FacetedEncodingYError2] = None,
  /**
   * Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `yError` : Option[FacetedEncodingYError] = None,
  /**
   * Offset of y-position of the marks
   **/
  var `yOffset` : Option[OffsetDef] = None,
  /**
   * Offset of x-position of the marks
   **/
  var `xOffset` : Option[OffsetDef] = None,
  /**
   * Size of the mark.
   * - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
   * - For `"bar"` and `"tick"` – the bar and tick's size.
   * - For `"text"` – the text's font size.
   * - Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of line with varying size)
   **/
  var `size` : Option[NumericMarkPropDef] = None,
  /**
   * Latitude position of geographically projected marks.
   **/
  var `latitude` : Option[LatLongDef] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[PositionDef] = None,
  /**
   * Stroke opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeOpacity` property.
   **/
  var `strokeOpacity` : Option[NumericMarkPropDef] = None,
  /**
   * A text description of this mark for ARIA accessibility (SVG output only). For SVG output the `"aria-label"` attribute will be set to this description.
   **/
  var `description` : Option[FacetedEncodingDescription] = None,
  /**
   * Rotation angle of point and text marks.
   **/
  var `angle` : Option[NumericMarkPropDef] = None,
  /**
   * Stroke color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ The `stroke` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.
   **/
  var `stroke` : Option[ColorDef] = None,
  /**
   * Text of the `text` mark.
   **/
  var `text` : Option[TextDef] = None,
  /**
   * A field definition for the vertical facet of trellis plots.
   **/
  var `row` : Option[RowColumnEncodingFieldDef] = None,
  /**
   * Color of the marks – either fill or stroke color based on  the `filled` property of mark definition. By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`, `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.
   * 
   * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified. 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
   **/
  var `color` : Option[ColorDef] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[Position2Def] = None,
  /**
   * The outer radius in pixels of arc marks.
   **/
  var `radius` : Option[PolarDef] = None,
  /**
   * Longitude position of geographically projected marks.
   **/
  var `longitude` : Option[LatLongDef] = None,
  /**
   * Order of the marks.
   * - For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).
   * - For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html). Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.
   * - Otherwise, this `order` channel encodes layer order of the marks.
   * 
   * __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
   **/
  var `order` : Option[FacetedEncodingOrder] = None,
  /**
   * Fill color of the marks. __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
   * 
   * _Note:_ The `fill` encoding has higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified.
   **/
  var `fill` : Option[ColorDef] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[PolarDef] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[Position2Def] = None,
  /**
   * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `xError` : Option[FacetedEncodingXError] = None,
  /**
   * A field definition for the horizontal facet of trellis plots.
   **/
  var `column` : Option[RowColumnEncodingFieldDef] = None,
  /**
   * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
   **/
  var `tooltip` : Option[FacetedEncodingTooltip] = None,
  /**
   * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   **/
  var `latitude2` : Option[Position2Def] = None,
  /**
   * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
   **/
  var `detail` : Option[FacetedEncodingDetail] = None,
  /**
   * Shape of the mark.
   * 
   * 1. For `point` marks the supported values include:   - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.   - the line symbol `"stroke"`   - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
   * 
   * 2. For `geoshape` marks it should be a field definition of the geojson data
   * 
   * __Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)'s `shape` property. (`"circle"` if unset.)
   **/
  var `shape` : Option[ShapeDef] = None,
  /**
   * A field definition for the (flexible) facet of trellis plots.
   * 
   * If either `row` or `column` is specified, this channel will be ignored.
   **/
  var `facet` : Option[FacetEncodingFieldDef] = None,
  /**
   * Opacity of the marks.
   * 
   * __Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `opacity` property.
   **/
  var `opacity` : Option[NumericMarkPropDef] = None,
  /**
   * A URL to load upon mouse click.
   **/
  var `href` : Option[FacetedEncodingHref] = None,
  /**
   * Stroke dash of the marks.
   * 
   * __Default value:__ `[1,0]` (No dash).
   **/
  var `strokeDash` : Option[NumericArrayMarkPropDef] = None,
  /**
   * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
   **/
  var `xError2` : Option[FacetedEncodingXError2] = None,
  /**
   * Stroke width of the marks.
   * 
   * __Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `strokeWidth` property.
   **/
  var `strokeWidth` : Option[NumericMarkPropDef] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[Position2Def] = None
)  
{  }
object FacetedEncoding {
  val definedFields = Set("longitude", "url", "key", "longitude2", "size", "row", "theta", "strokeDash", "xOffset", "stroke", "shape", "y2", "angle", "latitude2", "x2", "strokeWidth", "href", "detail", "yError2", "text", "y", "opacity", "fillOpacity", "color", "strokeOpacity", "description", "radius2", "order", "yOffset", "latitude", "theta2", "facet", "column", "xError", "tooltip", "radius", "x", "xError2", "yError", "fill") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTickCap (UnionType)

sealed trait AxisConfigTickCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Unaggregated (ConstantType)

case class Unaggregated() extends ScaleDomain

////////////////////////////////////////////////////////////////////////

// ScaleDatumDef (StructType)

case class ScaleDatumDef(
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[ScaleDatumDefDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ScaleDatumDefBandPosition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends OffsetDef 
{  }
object ScaleDatumDef {
  val definedFields = Set("type", "scale", "datum", "bandPosition", "title") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Bounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelRepeatSpecAsObject1Bounds  { val payload: JsValue }
   case object TopLevelRepeatSpecAsObject1BoundsFull extends TopLevelRepeatSpecAsObject1Bounds { val payload = JsString("full") }
   case object TopLevelRepeatSpecAsObject1BoundsFlush extends TopLevelRepeatSpecAsObject1Bounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// Quantitative (ConstantType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
case class Quantitative() extends SharedEncodingLongitudeType with SharedEncodingLatitudeType

////////////////////////////////////////////////////////////////////////

// RectConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait RectConfigTheta 
   case class RectConfigThetaAsNumber(value: JsNumber) extends RectConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigMedian (UnionType)

sealed trait BoxPlotConfigMedian 
   case class BoxPlotConfigMedianAsBool(value: Boolean) extends BoxPlotConfigMedian
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleExponent (UnionType)
/**
 * The exponent of the `pow` scale.
 **/
sealed trait ScaleExponent 
   case class ScaleExponentAsNumber(value: JsNumber) extends ScaleExponent
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerRepeatMapping (StructType)
/**
 * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
 **/
case class LayerRepeatMapping(
  /**
   * An array of fields to be repeated horizontally.
   **/
  var `column` : Option[Seq[String]] = None,
  /**
   * An array of fields to be repeated as layers.
   **/
  var `layer` : Seq[String],
  /**
   * An array of fields to be repeated vertically.
   **/
  var `row` : Option[Seq[String]] = None
)  
{  }
object LayerRepeatMapping {
  val definedFields = Set("column", "layer", "row") 
}

////////////////////////////////////////////////////////////////////////

// ProjectionConfigCoefficient (UnionType)

sealed trait ProjectionConfigCoefficient 
   case class ProjectionConfigCoefficientAsNumber(value: JsNumber) extends ProjectionConfigCoefficient
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecParamsElement (UnionType)

sealed trait TopLevelHConcatSpecParamsElement 
   // VariableParameter is defined elsewhere
   // TopLevelSelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleDomain (UnionType)
/**
 * Customized domain values in the form of constant values or dynamic values driven by a parameter.
 * 
 * 1) Constant `domain` for _quantitative_ fields can take one of the following forms:
 * 
 * - A two-element array with minimum and maximum values. To create a diverging scale, this two-element array can be combined with the `domainMid` property.
 * - An array with more than two entries, for [Piecewise quantitative scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
 * - A string value `"unaggregated"`, if the input field is aggregated, to indicate that the domain should include the raw data values prior to the aggregation.
 * 
 * 2) Constant `domain` for _temporal_ fields can be a two-element array with minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).
 * 
 * 3) Constant `domain` for _ordinal_ and _nominal_ fields can be an array that lists valid input values.
 * 
 * 4) To combine (union) specified constant domain with the field's values, `domain` can be an object with a `unionWith` property that specify constant domain to be combined. For example, `domain: {unionWith: [0, 100]}` for a quantitative scale means that the scale domain always includes `[0, 100]`, but will include other values in the fields beyond `[0, 100]`.
 * 
 * 5) Domain can also takes an object defining a field or encoding of a parameter that [interactively determines](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.
 **/
sealed trait ScaleDomain 
   case class ScaleDomainAsArrayOfScaleDomainAsArrayElement(value: Seq[ScaleDomainAsArrayElement]) extends ScaleDomain
   // DomainUnionWith is defined elsewhere
   // Unaggregated is defined elsewhere
   // ParameterExtent is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingTheta2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionTilt (UnionType)

sealed trait ProjectionTilt 
   case class ProjectionTiltAsNumber(value: JsNumber) extends ProjectionTilt
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DataSource (UnionType)

sealed trait DataSource extends Data
   // UrlData is defined elsewhere
   // InlineData is defined elsewhere
   // NamedData is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SortArray (UnionType)

sealed trait SortArray extends FacetFieldDefSort with FacetEncodingFieldDefSort with Sort with RowColumnEncodingFieldDefSort
   case class SortArrayAsArrayOfNumber(value: Seq[JsNumber]) extends SortArray
   case class SortArrayAsArrayOfString(value: Seq[String]) extends SortArray
   case class SortArrayAsArrayOfBool(value: Seq[Boolean]) extends SortArray
   case class SortArrayAsArrayOfDateTime(value: Seq[DateTime]) extends SortArray

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingShapeValue 
   case class SharedEncodingShapeValueAsString(value: String) extends SharedEncodingShapeValue
   case object SharedEncodingShapeValueAsNull extends SharedEncodingShapeValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// UtcMultiTimeUnit (EnumType)

sealed trait UtcMultiTimeUnit extends MultiTimeUnit { val payload: JsValue }
   case object UtcMultiTimeUnitUtcyearquarter extends UtcMultiTimeUnit { val payload = JsString("utcyearquarter") }
   case object UtcMultiTimeUnitUtcyearquartermonth extends UtcMultiTimeUnit { val payload = JsString("utcyearquartermonth") }
   case object UtcMultiTimeUnitUtcyearmonth extends UtcMultiTimeUnit { val payload = JsString("utcyearmonth") }
   case object UtcMultiTimeUnitUtcyearmonthdate extends UtcMultiTimeUnit { val payload = JsString("utcyearmonthdate") }
   case object UtcMultiTimeUnitUtcyearmonthdatehours extends UtcMultiTimeUnit { val payload = JsString("utcyearmonthdatehours") }
   case object UtcMultiTimeUnitUtcyearmonthdatehoursminutes extends UtcMultiTimeUnit { val payload = JsString("utcyearmonthdatehoursminutes") }
   case object UtcMultiTimeUnitUtcyearmonthdatehoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcyearmonthdatehoursminutesseconds") }
   case object UtcMultiTimeUnitUtcyearweek extends UtcMultiTimeUnit { val payload = JsString("utcyearweek") }
   case object UtcMultiTimeUnitUtcyearweekday extends UtcMultiTimeUnit { val payload = JsString("utcyearweekday") }
   case object UtcMultiTimeUnitUtcyearweekdayhours extends UtcMultiTimeUnit { val payload = JsString("utcyearweekdayhours") }
   case object UtcMultiTimeUnitUtcyearweekdayhoursminutes extends UtcMultiTimeUnit { val payload = JsString("utcyearweekdayhoursminutes") }
   case object UtcMultiTimeUnitUtcyearweekdayhoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcyearweekdayhoursminutesseconds") }
   case object UtcMultiTimeUnitUtcyeardayofyear extends UtcMultiTimeUnit { val payload = JsString("utcyeardayofyear") }
   case object UtcMultiTimeUnitUtcquartermonth extends UtcMultiTimeUnit { val payload = JsString("utcquartermonth") }
   case object UtcMultiTimeUnitUtcmonthdate extends UtcMultiTimeUnit { val payload = JsString("utcmonthdate") }
   case object UtcMultiTimeUnitUtcmonthdatehours extends UtcMultiTimeUnit { val payload = JsString("utcmonthdatehours") }
   case object UtcMultiTimeUnitUtcmonthdatehoursminutes extends UtcMultiTimeUnit { val payload = JsString("utcmonthdatehoursminutes") }
   case object UtcMultiTimeUnitUtcmonthdatehoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcmonthdatehoursminutesseconds") }
   case object UtcMultiTimeUnitUtcweekday extends UtcMultiTimeUnit { val payload = JsString("utcweekday") }
   case object UtcMultiTimeUnitUtcweeksdayhours extends UtcMultiTimeUnit { val payload = JsString("utcweeksdayhours") }
   case object UtcMultiTimeUnitUtcweekdayhoursminutes extends UtcMultiTimeUnit { val payload = JsString("utcweekdayhoursminutes") }
   case object UtcMultiTimeUnitUtcweekdayhoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcweekdayhoursminutesseconds") }
   case object UtcMultiTimeUnitUtcdayhours extends UtcMultiTimeUnit { val payload = JsString("utcdayhours") }
   case object UtcMultiTimeUnitUtcdayhoursminutes extends UtcMultiTimeUnit { val payload = JsString("utcdayhoursminutes") }
   case object UtcMultiTimeUnitUtcdayhoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcdayhoursminutesseconds") }
   case object UtcMultiTimeUnitUtchoursminutes extends UtcMultiTimeUnit { val payload = JsString("utchoursminutes") }
   case object UtcMultiTimeUnitUtchoursminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utchoursminutesseconds") }
   case object UtcMultiTimeUnitUtcminutesseconds extends UtcMultiTimeUnit { val payload = JsString("utcminutesseconds") }
   case object UtcMultiTimeUnitUtcsecondsmilliseconds extends UtcMultiTimeUnit { val payload = JsString("utcsecondsmilliseconds") }

////////////////////////////////////////////////////////////////////////

// MarkConfigInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait MarkConfigInvalid  { val payload: JsValue }
   case object MarkConfigInvalidFilter extends MarkConfigInvalid { val payload = JsString("filter") }
   case object MarkConfigInvalidUndefined extends MarkConfigInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// LineConfigHref (UnionType)

sealed trait LineConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickWidth (UnionType)

sealed trait AxisConfigTickWidth 
   // AxisConfigTickWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfig (StructType)

case class TickConfig(
  var `cornerRadiusBottomRight` : Option[TickConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[TickConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[TickConfigStrokeMiterLimit] = None,
  var `dir` : Option[TickConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[TickConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[TickConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[TickConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[TickConfigX] = None,
  var `dy` : Option[TickConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[TickConfigSize] = None,
  var `smooth` : Option[TickConfigSmooth] = None,
  var `url` : Option[TickConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[TickConfigY] = None,
  var `strokeOpacity` : Option[TickConfigStrokeOpacity] = None,
  var `ellipsis` : Option[TickConfigEllipsis] = None,
  var `description` : Option[TickConfigDescription] = None,
  var `angle` : Option[TickConfigAngle] = None,
  var `lineBreak` : Option[TickConfigLineBreak] = None,
  var `tension` : Option[TickConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[TickConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[TickConfigStroke] = None,
  var `strokeDashOffset` : Option[TickConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[TickConfigAlign] = None,
  var `ariaRole` : Option[TickConfigAriaRole] = None,
  var `strokeCap` : Option[TickConfigStrokeCap] = None,
  var `endAngle` : Option[TickConfigEndAngle] = None,
  var `strokeJoin` : Option[TickConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[TickConfigBaseline] = None,
  var `ariaRoleDescription` : Option[TickConfigAriaRoleDescription] = None,
  var `aspect` : Option[TickConfigAspect] = None,
  var `height` : Option[TickConfigHeight] = None,
  var `fontStyle` : Option[TickConfigFontStyle] = None,
  /**
   * The width of the ticks.
   * 
   * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).
   **/
  var `bandSize` : Option[TickConfigBandSize] = None,
  var `text` : Option[TickConfigText] = None,
  var `cornerRadius` : Option[TickConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[TickConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[TickConfigX2] = None,
  var `padAngle` : Option[TickConfigPadAngle] = None,
  var `cursor` : Option[TickConfigCursor] = None,
  /**
   * Thickness of the tick mark.
   * 
   * __Default value:__  `1`
   **/
  var `thickness` : Option[TickConfigThickness] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[TickConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[TickConfigStartAngle] = None,
  var `font` : Option[TickConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[TickConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[TickConfigInvalid] = None,
  var `lineHeight` : Option[TickConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[TickConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[TickConfigFill] = None,
  var `interpolate` : Option[TickConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[TickConfigTheta] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[TickConfigInnerRadius] = None,
  var `fontSize` : Option[TickConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[TickConfigY2] = None,
  var `shape` : Option[TickConfigShape] = None,
  var `aria` : Option[TickConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[TickConfigOpacity] = None,
  var `dx` : Option[TickConfigDx] = None,
  var `cornerRadiusBottomLeft` : Option[TickConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[TickConfigHref] = None,
  var `strokeDash` : Option[TickConfigStrokeDash] = None,
  var `strokeOffset` : Option[TickConfigStrokeOffset] = None,
  var `limit` : Option[TickConfigLimit] = None,
  var `width` : Option[TickConfigWidth] = None,
  var `fontWeight` : Option[TickConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[TickConfigBlend] = None,
  var `strokeWidth` : Option[TickConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[TickConfigTheta2] = None
) extends AnyMarkConfig 
{  }
object TickConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "ariaRole", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "bandSize", "dx", "cornerRadiusBottomRight", "width", "cursor", "blend", "height", "theta2", "orient", "baseline", "stroke", "align", "thickness", "shape", "lineHeight", "interpolate", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// TickConfigWidth (UnionType)

sealed trait TickConfigWidth 
   case class TickConfigWidthAsNumber(value: JsNumber) extends TickConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingY2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingY2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleRound (UnionType)
/**
 * If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.
 * 
 * __Default value:__ `false`.
 **/
sealed trait ScaleRound 
   case class ScaleRoundAsBool(value: Boolean) extends ScaleRound
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait MarkDefTheta 
   case class MarkDefThetaAsNumber(value: JsNumber) extends MarkDefTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SecondaryFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SecondaryFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class MarkConfigStrokeOpacityAsNumber(value: JsNumber) extends MarkConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingStrokeDashTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfig (StructType)
/**
 * Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single).
 **/
case class ViewConfig(
  /**
   * Default step size for x-/y- discrete fields.
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * The default height when the plot has a continuous y-field for x or latitude, or has arc marks.
   * 
   * __Default value:__ `200`
   **/
  var `continuousHeight` : Option[JsNumber] = None,
  var `fillOpacity` : Option[ViewConfigFillOpacity] = None,
  var `cornerRadius` : Option[ViewConfigCornerRadius] = None,
  var `strokeMiterLimit` : Option[ViewConfigStrokeMiterLimit] = None,
  /**
   * The fill color.
   * 
   * __Default value:__ `undefined`
   **/
  var `fill` : Option[ViewConfigFill] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[ViewConfigOpacity] = None,
  /**
   * Whether the view should be clipped.
   **/
  var `clip` : Option[Boolean] = None,
  var `strokeDash` : Option[ViewConfigStrokeDash] = None,
  var `strokeOpacity` : Option[ViewConfigStrokeOpacity] = None,
  /**
   * The default width when the plot has non-arc marks and either a discrete x-field or no x-field. The width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step.
   * 
   * __Default value:__ a step size based on `config.view.step`.
   **/
  var `discreteWidth` : Option[ViewConfigDiscreteWidth] = None,
  /**
   * The stroke color.
   * 
   * __Default value:__ `"#ddd"`
   **/
  var `stroke` : Option[ViewConfigStroke] = None,
  var `strokeDashOffset` : Option[ViewConfigStrokeDashOffset] = None,
  var `strokeCap` : Option[ViewConfigStrokeCap] = None,
  var `strokeJoin` : Option[ViewConfigStrokeJoin] = None,
  /**
   * The mouse cursor used over the view. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used.
   **/
  var `cursor` : Option[Cursor] = None,
  /**
   * The default height when the plot has non arc marks and either a discrete y-field or no y-field. The height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step.
   * 
   * __Default value:__ a step size based on `config.view.step`.
   **/
  var `discreteHeight` : Option[ViewConfigDiscreteHeight] = None,
  var `strokeWidth` : Option[ViewConfigStrokeWidth] = None,
  /**
   * The default width when the plot has a continuous field for x or longitude, or has arc marks.
   * 
   * __Default value:__ `200`
   **/
  var `continuousWidth` : Option[JsNumber] = None
)  
{  }
object ViewConfig {
  val definedFields = Set("strokeDashOffset", "strokeWidth", "strokeCap", "discreteHeight", "continuousHeight", "cursor", "continuousWidth", "stroke", "fill", "opacity", "fillOpacity", "discreteWidth", "step", "strokeJoin", "strokeDash", "strokeOpacity", "clip", "cornerRadius", "strokeMiterLimit") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingDescriptionValue 
   case class SharedEncodingDescriptionValueAsString(value: String) extends SharedEncodingDescriptionValue
   case object SharedEncodingDescriptionValueAsNull extends SharedEncodingDescriptionValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFillOpacity (UnionType)

sealed trait RectConfigFillOpacity 
   // RectConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ScaleFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigHeight (UnionType)

sealed trait LineConfigHeight 
   case class LineConfigHeightAsNumber(value: JsNumber) extends LineConfigHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigAria (UnionType)

sealed trait MarkConfigAria 
   case class MarkConfigAriaAsBool(value: Boolean) extends MarkConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait BarConfigOuterRadius 
   case class BarConfigOuterRadiusAsNumber(value: JsNumber) extends BarConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleFontSize (UnionType)

sealed trait TitleConfigSubtitleFontSize 
   // TitleConfigSubtitleFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigWidth (UnionType)

sealed trait BarConfigWidth 
   case class BarConfigWidthAsNumber(value: JsNumber) extends BarConfigWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait BarConfigTheta2 
   case class BarConfigTheta2AsNumber(value: JsNumber) extends BarConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait MarkConfigY2 
   case class MarkConfigY2AsNumber(value: JsNumber) extends MarkConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class MarkDefFontSizeAsNumber(value: JsNumber) extends MarkDefFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait SharedEncodingThetaStack 
   // StackOffset is defined elsewhere
   case object SharedEncodingThetaStackAsNull extends SharedEncodingThetaStack
   case class SharedEncodingThetaStackAsBool(value: Boolean) extends SharedEncodingThetaStack

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeJoin (UnionType)

sealed trait MarkConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleAlign (UnionType)

sealed trait AxisConfigTitleAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefLineBreak (UnionType)

sealed trait OverlayMarkDefLineBreak 
   case class OverlayMarkDefLineBreakAsString(value: String) extends OverlayMarkDefLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigLimit (UnionType)

sealed trait AreaConfigLimit 
   case class AreaConfigLimitAsNumber(value: JsNumber) extends AreaConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisGridOpacity (UnionType)

sealed trait AxisGridOpacity 
   // AxisGridOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DerivedStreamFilter (UnionType)

sealed trait DerivedStreamFilter 
   case class DerivedStreamFilterAsString(value: String) extends DerivedStreamFilter
   case class DerivedStreamFilterAsArrayOfString(value: Seq[String]) extends DerivedStreamFilter

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingColorDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeCap (UnionType)

sealed trait TickConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject1Filter (UnionType)

sealed trait EventStreamAsObject1Filter 
   case class EventStreamAsObject1FilterAsString(value: String) extends EventStreamAsObject1Filter
   case class EventStreamAsObject1FilterAsArrayOfString(value: Seq[String]) extends EventStreamAsObject1Filter

////////////////////////////////////////////////////////////////////////

// MarkDefTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait MarkDefTooltip 
   case class MarkDefTooltipAsString(value: String) extends MarkDefTooltip
   case object MarkDefTooltipAsNull extends MarkDefTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class MarkDefTooltipAsBool(value: Boolean) extends MarkDefTooltip
   case class MarkDefTooltipAsNumber(value: JsNumber) extends MarkDefTooltip

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeWidth (UnionType)

sealed trait MarkConfigStrokeWidth 
   // MarkConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SelectionInitInterval (UnionType)

sealed trait SelectionInitInterval 
   // Vector2Boolean is defined elsewhere
   // Vector2Number is defined elsewhere
   // Vector2String is defined elsewhere
   // Vector2DateTime is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingStrokeDashCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingStrokeDashConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingStrokeDashCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BinExtent (UnionType)
/**
 * A two-element (`[min, max]`) array indicating the range of desired bin values.
 **/
sealed trait BinExtent 
   // BinExtentAsArray is defined elsewhere
   // ParameterExtent is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefTextExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalParameterValueDefTextExprRefValue 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelOffset (UnionType)

sealed trait AxisLabelOffset 
   case class AxisLabelOffsetAsNumber(value: JsNumber) extends AxisLabelOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeWidthType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingStrokeWidthType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SingleDefUnitChannel (EnumType)

sealed trait SingleDefUnitChannel  { val payload: JsValue }
   case object SingleDefUnitChannelX extends SingleDefUnitChannel { val payload = JsString("x") }
   case object SingleDefUnitChannelY extends SingleDefUnitChannel { val payload = JsString("y") }
   case object SingleDefUnitChannelXOffset extends SingleDefUnitChannel { val payload = JsString("xOffset") }
   case object SingleDefUnitChannelYOffset extends SingleDefUnitChannel { val payload = JsString("yOffset") }
   case object SingleDefUnitChannelX2 extends SingleDefUnitChannel { val payload = JsString("x2") }
   case object SingleDefUnitChannelY2 extends SingleDefUnitChannel { val payload = JsString("y2") }
   case object SingleDefUnitChannelLongitude extends SingleDefUnitChannel { val payload = JsString("longitude") }
   case object SingleDefUnitChannelLatitude extends SingleDefUnitChannel { val payload = JsString("latitude") }
   case object SingleDefUnitChannelLongitude2 extends SingleDefUnitChannel { val payload = JsString("longitude2") }
   case object SingleDefUnitChannelLatitude2 extends SingleDefUnitChannel { val payload = JsString("latitude2") }
   case object SingleDefUnitChannelTheta extends SingleDefUnitChannel { val payload = JsString("theta") }
   case object SingleDefUnitChannelTheta2 extends SingleDefUnitChannel { val payload = JsString("theta2") }
   case object SingleDefUnitChannelRadius extends SingleDefUnitChannel { val payload = JsString("radius") }
   case object SingleDefUnitChannelRadius2 extends SingleDefUnitChannel { val payload = JsString("radius2") }
   case object SingleDefUnitChannelColor extends SingleDefUnitChannel { val payload = JsString("color") }
   case object SingleDefUnitChannelFill extends SingleDefUnitChannel { val payload = JsString("fill") }
   case object SingleDefUnitChannelStroke extends SingleDefUnitChannel { val payload = JsString("stroke") }
   case object SingleDefUnitChannelOpacity extends SingleDefUnitChannel { val payload = JsString("opacity") }
   case object SingleDefUnitChannelFillOpacity extends SingleDefUnitChannel { val payload = JsString("fillOpacity") }
   case object SingleDefUnitChannelStrokeOpacity extends SingleDefUnitChannel { val payload = JsString("strokeOpacity") }
   case object SingleDefUnitChannelStrokeWidth extends SingleDefUnitChannel { val payload = JsString("strokeWidth") }
   case object SingleDefUnitChannelStrokeDash extends SingleDefUnitChannel { val payload = JsString("strokeDash") }
   case object SingleDefUnitChannelSize extends SingleDefUnitChannel { val payload = JsString("size") }
   case object SingleDefUnitChannelAngle extends SingleDefUnitChannel { val payload = JsString("angle") }
   case object SingleDefUnitChannelShape extends SingleDefUnitChannel { val payload = JsString("shape") }
   case object SingleDefUnitChannelKey extends SingleDefUnitChannel { val payload = JsString("key") }
   case object SingleDefUnitChannelText extends SingleDefUnitChannel { val payload = JsString("text") }
   case object SingleDefUnitChannelHref extends SingleDefUnitChannel { val payload = JsString("href") }
   case object SingleDefUnitChannelUrl extends SingleDefUnitChannel { val payload = JsString("url") }
   case object SingleDefUnitChannelDescription extends SingleDefUnitChannel { val payload = JsString("description") }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFontWeight (UnionType)

sealed trait AxisConfigLabelFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelFontWeight is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffsetDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingYOffsetDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigCornerRadius (UnionType)

sealed trait AreaConfigCornerRadius 
   case class AreaConfigCornerRadiusAsNumber(value: JsNumber) extends AreaConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Parity (ConstantType)

case class Parity() extends LabelOverlap

////////////////////////////////////////////////////////////////////////

// AxisLabelLineHeight (UnionType)

sealed trait AxisLabelLineHeight 
   case class AxisLabelLineHeightAsNumber(value: JsNumber) extends AxisLabelLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Binding (UnionType)
/**
 * Binds the parameter to an external input element such as a slider, selection list or radio button group.
 **/
sealed trait Binding extends TopLevelSelectionParameterBind with SelectionParameterBind
   // BindCheckbox is defined elsewhere
   // BindRadioSelect is defined elsewhere
   // BindInput is defined elsewhere
   // BindRange is defined elsewhere
   // BindDirect is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigPadAngle (UnionType)

sealed trait LineConfigPadAngle 
   case class LineConfigPadAngleAsNumber(value: JsNumber) extends LineConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleRangeMin (UnionType)
/**
 * Sets the minimum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges.
 **/
sealed trait ScaleRangeMin 
   case class ScaleRangeMinAsNumber(value: JsNumber) extends ScaleRangeMin
   case class ScaleRangeMinAsString(value: String) extends ScaleRangeMin
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelSelectionParameterBind (UnionType)
/**
 * When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection's [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.
 * 
 * Legend bindings are restricted to selections that only specify a single field or encoding.
 * 
 * Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.
 * 
 * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
 **/
sealed trait TopLevelSelectionParameterBind 
   // Binding is defined elsewhere
   case class TopLevelSelectionParameterBindAsDictOfBinding(value: Map[String,Binding]) extends TopLevelSelectionParameterBind
   // LegendBinding is defined elsewhere
   // Scales is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigBinSpacing (ConstrainedType)
/**
 * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
 * 
 * __Default value:__ `1`
 **/
case class BarConfigBinSpacing(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ViewConfigCornerRadius (UnionType)

sealed trait ViewConfigCornerRadius 
   case class ViewConfigCornerRadiusAsNumber(value: JsNumber) extends ViewConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RowColBoolean (StructType)

case class RowColBoolean(
  var `column` : Option[Boolean] = None,
  var `row` : Option[Boolean] = None
) extends ConcatSpecGenericSpecCenter with FacetedUnitSpecCenter with FacetSpecCenter with FacetEncodingFieldDefCenter with TopLevelUnitSpecCenter with TopLevelRepeatSpecAsObject1Center with TopLevelFacetSpecCenter with TopLevelConcatSpecCenter with NonLayerRepeatSpecCenter with LayerRepeatSpecCenter with TopLevelRepeatSpecAsObject2Center 
{  }
object RowColBoolean {
  val definedFields = Set("column", "row") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingStrokeOpacityBin 
   case class SharedEncodingStrokeOpacityBinAsBool(value: Boolean) extends SharedEncodingStrokeOpacityBin
   // BinParams is defined elsewhere
   case object SharedEncodingStrokeOpacityBinAsNull extends SharedEncodingStrokeOpacityBin

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingStrokeOpacityCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingStrokeOpacityConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingStrokeOpacityCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelOverlap (UnionType)
/**
 * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used. If set to `"greedy"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).
 * 
 * __Default value:__ `"greedy"` for `log scales otherwise `true`.
 **/
sealed trait LegendConfigLabelOverlap 
   // LabelOverlap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigMinExtent (UnionType)

sealed trait AxisConfigMinExtent 
   case class AxisConfigMinExtentAsNumber(value: JsNumber) extends AxisConfigMinExtent
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelAlignAsObject2Condition (UnionType)

sealed trait ConditionalAxisLabelAlignAsObject2Condition 
   // ConditionalPredicateValueDefAlignNullExprRef is defined elsewhere
   case class ConditionalAxisLabelAlignAsObject2ConditionAsArrayOfConditionalPredicateValueDefAlignNullExprRef(value: Seq[ConditionalPredicateValueDefAlignNullExprRef]) extends ConditionalAxisLabelAlignAsObject2Condition

////////////////////////////////////////////////////////////////////////

// AreaConfigStartAngle (UnionType)

sealed trait AreaConfigStartAngle 
   case class AreaConfigStartAngleAsNumber(value: JsNumber) extends AreaConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelPadding (UnionType)

sealed trait AxisLabelPadding 
   case class AxisLabelPaddingAsNumber(value: JsNumber) extends AxisLabelPadding
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickWidthAsNumber (ConstrainedType)
/**
 * The width, in pixels, of ticks.
 * 
 * __Default value:__ `1`
 **/
case class AxisTickWidthAsNumber(value: JsNumber) extends AxisTickWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleFontSize (UnionType)

sealed trait AxisConfigTitleFontSize 
   // AxisConfigTitleFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullCondition 
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullCondition

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefBlend (UnionType)

sealed trait OverlayMarkDefBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Mark (EnumType)
/**
 * All types of primitive marks.
 **/
sealed trait Mark extends AnyMark { val payload: JsValue }
   case object MarkArc extends Mark { val payload = JsString("arc") }
   case object MarkArea extends Mark { val payload = JsString("area") }
   case object MarkBar extends Mark { val payload = JsString("bar") }
   case object MarkImage extends Mark { val payload = JsString("image") }
   case object MarkLine extends Mark { val payload = JsString("line") }
   case object MarkPoint extends Mark { val payload = JsString("point") }
   case object MarkRect extends Mark { val payload = JsString("rect") }
   case object MarkRule extends Mark { val payload = JsString("rule") }
   case object MarkText extends Mark { val payload = JsString("text") }
   case object MarkTick extends Mark { val payload = JsString("tick") }
   case object MarkTrail extends Mark { val payload = JsString("trail") }
   case object MarkCircle extends Mark { val payload = JsString("circle") }
   case object MarkSquare extends Mark { val payload = JsString("square") }
   case object MarkGeoshape extends Mark { val payload = JsString("geoshape") }

////////////////////////////////////////////////////////////////////////

// Step (StructType)

case class Step(
  /**
   * Whether to apply the step to position scale or offset scale when there are both `x` and `xOffset` or both `y` and `yOffset` encodings.
   **/
  var `for` : Option[StepFor] = None,
  /**
   * The size (width/height) per discrete step.
   **/
  var `step` : JsNumber
) extends TopLevelUnitSpecWidth with UnitSpecWithFrameHeight with TopLevelLayerSpecHeight with FacetedUnitSpecHeight with UnitSpecWithFrameWidth with LayerSpecHeight with FacetedUnitSpecWidth with TopLevelLayerSpecWidth with LayerSpecWidth with TopLevelUnitSpecHeight 
{  }
object Step {
  val definedFields = Set("for", "step") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class OverlayMarkDefFillOpacityAsNumber(value: JsNumber) extends OverlayMarkDefFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigWithoutTypeZoom (UnionType)

sealed trait IntervalSelectionConfigWithoutTypeZoom 
   case class IntervalSelectionConfigWithoutTypeZoomAsString(value: String) extends IntervalSelectionConfigWithoutTypeZoom
   case class IntervalSelectionConfigWithoutTypeZoomAsBool(value: Boolean) extends IntervalSelectionConfigWithoutTypeZoom

////////////////////////////////////////////////////////////////////////

// MarkDefInterpolate (UnionType)

sealed trait MarkDefInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFontSizeAsNumber (ConstrainedType)
/**
 * The font size of the label, in pixels.
 **/
case class AxisConfigLabelFontSizeAsNumber(value: JsNumber) extends AxisConfigLabelFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolOffset (UnionType)

sealed trait LegendConfigSymbolOffset 
   case class LegendConfigSymbolOffsetAsNumber(value: JsNumber) extends LegendConfigSymbolOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefTheta2Offset (UnionType)
/**
 * Offset for theta2.
 **/
sealed trait OverlayMarkDefTheta2Offset 
   case class OverlayMarkDefTheta2OffsetAsNumber(value: JsNumber) extends OverlayMarkDefTheta2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontStyle (UnionType)

sealed trait ConditionalAxisLabelFontStyle extends AxisLabelFontStyle with AxisConfigLabelFontStyle
   // ConditionalAxisLabelFontStyleAsObject1 is defined elsewhere
   // ConditionalAxisLabelFontStyleAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait FacetedUnitSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeDashOffset (UnionType)

sealed trait BarConfigStrokeDashOffset 
   case class BarConfigStrokeDashOffsetAsNumber(value: JsNumber) extends BarConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SelectionResolution (EnumType)
/**
 * With layered and multi-view displays, a strategy that determines how selections' data queries are resolved when applied in a filter transform, conditional encoding rule, or scale domain.
 * 
 * One of:
 * - `"global"` -- only one brush exists for the entire SPLOM. When the user begins to drag, any previous brushes are cleared, and a new one is constructed.
 * - `"union"` -- each cell contains its own brush, and points are highlighted if they lie within _any_ of these individual brushes.
 * - `"intersect"` -- each cell contains its own brush, and points are highlighted only if they fall within _all_ of these individual brushes.
 * 
 * __Default value:__ `global`.
 * 
 * __See also:__ [`resolve` examples](https://vega.github.io/vega-lite/docs/selection.html#resolve) in the documentation.
 **/
sealed trait SelectionResolution  { val payload: JsValue }
   case object SelectionResolutionGlobal extends SelectionResolution { val payload = JsString("global") }
   case object SelectionResolutionUnion extends SelectionResolution { val payload = JsString("union") }
   case object SelectionResolutionIntersect extends SelectionResolution { val payload = JsString("intersect") }

////////////////////////////////////////////////////////////////////////

// ProjectionConfigReflectX (UnionType)

sealed trait ProjectionConfigReflectX 
   case class ProjectionConfigReflectXAsBool(value: Boolean) extends ProjectionConfigReflectX
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickCap (UnionType)

sealed trait AxisTickCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigReflectY (UnionType)

sealed trait ProjectionConfigReflectY 
   case class ProjectionConfigReflectYAsBool(value: Boolean) extends ProjectionConfigReflectY
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberAsObject1Value (UnionType)

sealed trait ConditionalAxisNumberAsObject1Value 
   case class ConditionalAxisNumberAsObject1ValueAsNumber(value: JsNumber) extends ConditionalAxisNumberAsObject1Value
   case object ConditionalAxisNumberAsObject1ValueAsNull extends ConditionalAxisNumberAsObject1Value

////////////////////////////////////////////////////////////////////////

// MarkDefOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait MarkDefOpacity 
   case class MarkDefOpacityAsNumber(value: JsNumber) extends MarkDefOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleAlign (UnionType)

sealed trait AxisTitleAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelFontSize (ConstrainedType)
/**
 * The font size of the header label, in pixels.
 **/
sealed trait HeaderConfigLabelFontSize 
   case class HeaderConfigLabelFontSizeAsNumber(value: JsNumber) extends HeaderConfigLabelFontSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsOffset (UnionType)

sealed trait TitleParamsOffset 
   case class TitleParamsOffsetAsNumber(value: JsNumber) extends TitleParamsOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait SharedEncodingXStack 
   // StackOffset is defined elsewhere
   case object SharedEncodingXStackAsNull extends SharedEncodingXStack
   case class SharedEncodingXStackAsBool(value: Boolean) extends SharedEncodingXStack

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class OverlayMarkDefStrokeOpacityAsNumber(value: JsNumber) extends OverlayMarkDefStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringDatumDefTextCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionStringDatumDefTextCondition 
   // ConditionalValueDefTextExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionStringDatumDefTextConditionAsArrayOfConditionalValueDefTextExprRef(value: Seq[ConditionalValueDefTextExprRef]) extends FieldOrDatumDefWithConditionStringDatumDefTextCondition

////////////////////////////////////////////////////////////////////////

// ErrorBandDef (StructType)

case class ErrorBandDef(
  /**
   * The extent of the band. Available options include:
   * - `"ci"`: Extend the band to the confidence interval of the mean.
   * - `"stderr"`: The size of band are set to the value of standard error, extending from the mean.
   * - `"stdev"`: The size of band are set to the value of standard deviation, extending from the mean.
   * - `"iqr"`: Extend the band to the q1 and q3.
   * 
   * __Default value:__ `"stderr"`.
   **/
  var `extent` : Option[ErrorBarExtent] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[ErrorBandDefColor] = None,
  var `borders` : Option[ErrorBandDefBorders] = None,
  /**
   * The line interpolation method for the error band. One of the following:
   * - `"linear"`: piecewise linear segments, as in a polyline.
   * - `"linear-closed"`: close the linear segments to form a polygon.
   * - `"step"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.
   * - `"step-before"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.
   * - `"step-after"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.
   * - `"basis"`: a B-spline, with control point duplication on the ends.
   * - `"basis-open"`: an open B-spline; may not intersect the start or end.
   * - `"basis-closed"`: a closed B-spline, as in a loop.
   * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
   * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
   * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
   * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
   * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
   **/
  var `interpolate` : Option[Interpolate] = None,
  /**
   * Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The opacity (value between [0,1]) of the mark.
   **/
  var `opacity` : Option[ErrorBandDefOpacity] = None,
  /**
   * The tension parameter for the interpolation type of the error band.
   **/
  var `tension` : Option[ErrorBandDefTension] = None,
  var `band` : Option[ErrorBandDefBand] = None,
  /**
   * The mark type. This could a primitive mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`) or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
   **/
  var `type` : ErrorBand,
  /**
   * Whether a composite mark be clipped to the enclosing group’s width and height.
   **/
  var `clip` : Option[Boolean] = None
) extends CompositeMarkDef 
{  }
object ErrorBandDef {
  val definedFields = Set("type", "borders", "extent", "band", "clip", "orient", "tension", "interpolate", "opacity", "color") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterStringFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalParameterStringFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCornerRadiusBottomRight (UnionType)

sealed trait MarkConfigCornerRadiusBottomRight 
   case class MarkConfigCornerRadiusBottomRightAsNumber(value: JsNumber) extends MarkConfigCornerRadiusBottomRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait TickConfigOpacity 
   case class TickConfigOpacityAsNumber(value: JsNumber) extends TickConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigText (UnionType)

sealed trait TickConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingY2 (StructType)

case class SharedEncodingY2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingY2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingY2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingY2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingY2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingY2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefContinuousBandSize (ConstrainedType)
/**
 * The default size of the bars on continuous scales.
 * 
 * __Default value:__ `5`
 **/
case class MarkDefContinuousBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ExprRef (StructType)

case class ExprRef(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends SharedEncodingStrokeWidthDatum with HeaderConfigLabelPadding with LegendConfigTitleLineHeight with MarkDefStroke with SharedEncodingStrokeWidthValue with TitleParamsLimit with AxisGridDashOffset with FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum with LineConfigDescription with HeaderLabelFontWeight with OverlayMarkDefHeight with ScaleAlign with BarConfigX2 with TickConfigX2 with ScaleNice with MarkConfigDx with TickConfigShape with LineConfigEllipsis with AxisGridDash with AxisConfigLabelColor with LegendConfigFillColor with HeaderTitleFontStyle with MarkConfigDy with MarkConfigHref with AxisConfigGridCap with AreaConfigAria with MarkConfigCursor with MarkDefUrl with BarConfigShape with LegendConfigSymbolDashOffset with LineConfigAriaRole with OverlayMarkDefDir with HeaderTitleFontWeight with LegendConfigColumns with RectConfigFontSize with BarConfigY2 with OverlayMarkDefStrokeDash with BarConfigAlign with OverlayMarkDefCornerRadiusBottomLeft with TickConfigAlign with OverlayMarkDefBaseline with SharedEncodingStrokeOpacityDatum with SharedEncodingStrokeOpacityValue with AxisConfigLabelFont with LegendConfigStrokeDash with TitleConfigSubtitlePadding with AreaConfigStrokeDash with ScaleBase with LegendConfigLabelPadding with TickConfigAriaRole with TitleParamsOrient with BarConfigTooltip with LineConfigAriaRoleDescription with LegendConfigLabelBaseline with BarConfigStartAngle with AxisConfigLabelOverlap with BarConfigLineBreak with OverlayMarkDefTheta2 with HeaderLabelAlign with AreaConfigStrokeOpacity with AxisLabelOverlap with TitleConfigDy with TitleConfigDx with AxisConfigDomainOpacity with LegendConfigLabelOffset with RectConfigTheta2 with MarkDefSmooth with BarConfigOpacity with OverlayMarkDefEllipsis with ViewConfigFill with ViewConfigStrokeMiterLimit with LineConfigWidth with AreaConfigLineBreak with MarkDefCornerRadiusEnd with OverlayMarkDefCornerRadius with OverlayMarkDefCornerRadiusBottomRight with AxisConfigLabelAlign with TickConfigStrokeWidth with ProjectionCenter with LineConfigRadius with MarkConfigColor with HeaderLabelBaseline with LegendConfigGradientLabelOffset with ViewBackgroundStrokeDash with MarkDefCornerRadiusBottomLeft with AxisDescription with RectConfigDescription with LineConfigStroke with OverlayMarkDefAriaRole with BarConfigFillOpacity with AreaConfigDescription with AxisGridCap with ViewBackgroundOpacity with MarkConfigSmooth with TickConfigY2 with TitleConfigFontSize with BarConfigStrokeJoin with DatumDefDatum with AxisLabelAngle with LegendConfigTickCount with MarkConfigStrokeDash with AxisConfigGridWidth with LineConfigCursor with BarConfigEllipsis with LegendConfigSymbolOpacity with HeaderTitleFont with AxisTickWidth with ScaleConfigBandWithNestedOffsetPaddingOuter with MarkDefInnerRadius with ProjectionConfigScale with MarkDefWidth with TopLevelHConcatSpecBackground with LineConfigAria with LineConfigFontWeight with RectConfigAria with LineConfigCornerRadiusTopLeft with ScaleRangeAsArrayElement with TopLevelRepeatSpecAsObject1Padding with TickConfigEllipsis with TickConfigCornerRadiusBottomRight with TickConfigUrl with MarkDefDescription with LegendConfigLabelColor with RectConfigStrokeOpacity with ScaleConfigOffsetBandPaddingOuter with HeaderConfigLabelLimit with AxisConfigOrient with TickConfigHref with MarkConfigStrokeMiterLimit with AxisTranslate with ViewBackgroundStrokeDashOffset with TopLevelFacetSpecPadding with RectConfigAspect with LineConfigLimit with TopLevelConcatSpecBackground with AxisConfigTitleFontStyle with BarConfigAspect with AreaConfigFillOpacity with HeaderTitleLimit with ViewBackgroundCornerRadius with OverlayMarkDefStrokeWidth with OverlayMarkDefStrokeMiterLimit with SharedEncodingLatitude2Datum with AxisConfigDomainWidth with TickConfigBaseline with ScaleConfigXReverse with HeaderLabelFontSize with MarkConfigShape with AreaConfigSize with ScalePadding with OverlayMarkDefAngle with RectConfigInterpolate with MarkConfigPadAngle with ConditionalPredicateValueDefNumberExprRefValue with LineConfigTension with BarConfigTheta with AreaConfigUrl with AreaConfigLineHeight with BarConfigFont with TopLevelRepeatSpecAsObject2Background with HeaderConfigLabelFontStyle with BarConfigTension with ScaleDomainMin with LegendConfigLabelAlign with ViewBackgroundStrokeWidth with AreaConfigOpacity with SharedEncodingSizeValue with AxisConfigLabelPadding with MarkConfigSize with AreaConfigTension with LegendConfigOffset with ScaleDomainMid with SharedEncodingX2Value with OverlayMarkDefSmooth with RectConfigLineHeight with ScaleZero with MarkConfigEllipsis with LineConfigStrokeOffset with MarkConfigBlend with BarConfigCornerRadiusBottomLeft with AreaConfigAriaRoleDescription with OverlayMarkDefAspect with LegendConfigTitleOrient with AreaConfigCornerRadiusTopLeft with MarkDefStrokeJoin with ScaleDatumDefDatum with ProjectionConfigTranslate with MarkDefStrokeMiterLimit with LineConfigX with TickConfigColor with LineConfigY with BarConfigColor with LineConfigTheta with TitleConfigOffset with BarConfigDir with LineConfigBaseline with RectConfigLimit with RectConfigStrokeDash with RectConfigEndAngle with TitleParamsSubtitleFont with HeaderConfigTitleFontSize with RectConfigHeight with FieldOrDatumDefWithConditionDatumDefNumberDatum with AxisLabelBound with RectConfigStrokeOffset with BarConfigText with AreaConfigCornerRadiusBottomRight with MarkDefCursor with ProjectionConfigTilt with MarkDefLimit with AreaConfigRadius2 with AxisConfigTitleBaseline with AxisConfigTickBand with HeaderConfigTitleFont with AxisConfigTitleX with OverlayMarkDefXOffset with AxisConfigTitleY with TickConfigTheta with ProjectionExtent with AreaConfigTooltip with AxisTitleFontStyle with ProjectionRotate with TickConfigDir with AreaConfigHref with MarkConfigAngle with ProjectionParallels with HeaderLabelColor with LegendConfigTitleFontStyle with BarConfigRadius2 with RectConfigOuterRadius with TopLevelLayerSpecBackground with BarConfigDx with MarkConfigX2 with BarConfigDy with RectConfigSmooth with LineConfigCornerRadiusBottomRight with ProjectionSpacing with TickConfigDy with MarkConfigFillOpacity with TickConfigDx with MarkDefTheta2 with MarkDefFill with ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum with LineConfigRadius2 with LineConfigStartAngle with AxisConfigTickCap with TopLevelLayerSpecPadding with AxisConfigLabelOpacity with OverlayMarkDefDy with SharedEncodingLongitude2Value with OverlayMarkDefDx with RectConfigBaseline with RectConfigTheta with LegendConfigRowPadding with OverlayMarkDefFontSize with ScaleExponent with ProjectionConfigCoefficient with ScaleDomain with ProjectionTilt with ConfigBackground with BarConfigCornerRadius with AxisLabelOpacity with SharedEncodingShapeValue with ProjectionRatio with LegendConfigGradientLength with TitleConfigSubtitleFont with AxisBandPosition with SharedEncodingShapeDatum with LineConfigHref with AxisConfigTickWidth with ProjectionConfigPointRadius with TickConfigWidth with TitleConfigSubtitleColor with ScaleRound with MarkDefTheta with TitleParamsAngle with ProjectionCoefficient with ProjectionPointRadius with SharedEncodingDescriptionValue with OverlayMarkDefAriaRoleDescription with RectConfigFillOpacity with LineConfigHeight with MarkDefText with MarkConfigAria with BarConfigOuterRadius with AxisConfigDomainColor with TitleConfigSubtitleFontSize with BarConfigWidth with BarConfigTheta2 with MarkConfigY2 with MarkConfigCornerRadiusBottomLeft with TickConfigFont with MarkConfigStrokeJoin with ProjectionConfigRotate with ScaleInterpolate with AxisTitleColor with StringValueDefWithConditionValue with AxisConfigTitleAlign with MarkDefLineBreak with TickConfigX with OverlayMarkDefLineBreak with TickConfigY with AreaConfigLimit with AxisGridOpacity with AreaConfigCornerRadiusTopRight with TopLevelVConcatSpecBackground with SharedEncodingColorDatum with TickConfigStrokeCap with MarkDefTooltip with OverlayMarkDefEndAngle with LegendConfigSymbolStrokeColor with MarkConfigStrokeWidth with LegendConfigGradientStrokeWidth with AxisTickOpacity with ConditionalParameterValueDefTextExprRefValue with AxisLabelOffset with BarConfigHeight with OverlayMarkDefWidth with OrderValueDefValue with AxisConfigLabelFontWeight with SharedEncodingYOffsetDatum with AreaConfigCornerRadius with TickConfigEndAngle with AxisLabelLineHeight with ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum with LineConfigPadAngle with ScaleRangeMin with ViewConfigCornerRadius with RectConfigStrokeWidth with LegendConfigLabelFontWeight with TickConfigCornerRadiusBottomLeft with LegendConfigLabelOverlap with AxisConfigMinExtent with OverlayMarkDefStrokeJoin with AreaConfigStartAngle with AxisLabelPadding with HeaderTitleLineHeight with LegendConfigTitleFont with AxisConfigTitleFontSize with AreaConfigStrokeMiterLimit with OverlayMarkDefBlend with MarkDefInterpolate with LegendConfigSymbolOffset with OverlayMarkDefTheta2Offset with ProjectionConfigRadius with AxisConfigBandPosition with OverlayMarkDefFontStyle with BarConfigStrokeDashOffset with ProjectionConfigReflectX with AxisTickCap with ProjectionConfigReflectY with OverlayMarkDefFillOpacity with ConfigPadding with MarkDefOpacity with AxisTitleAlign with HeaderConfigLabelFontSize with TitleParamsOffset with MarkDefAriaRole with AxisLabelFontStyle with AreaConfigStroke with RectConfigWidth with AxisConfigTitleColor with ProjectionReflectX with ProjectionReflectY with MarkConfigCornerRadiusBottomRight with ScaleScheme with TickConfigOpacity with TickConfigText with HeaderConfigLabelFontWeight with AxisLabelLimit with OverlayMarkDefAlign with MarkConfigRadius2 with LineConfigSize with HeaderConfigTitleAlign with RectConfigPadAngle with AxisConfigOffset with AxisConfigTickDash with TickConfigFillOpacity with RectConfigStartAngle with SharedEncodingLatitude2Value with LineConfigStrokeWidth with ScalePaddingOuter with BarConfigEndAngle with MarkDefAspect with ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue with AxisLabelFlushOffset with MarkDefTension with SharedEncodingYValue with LegendConfigClipHeight with MarkDefFont with AxisTitleAngle with OverlayMarkDefPadAngle with ProjectionPrecision with TitleConfigFrame with AxisConfigTranslate with BarConfigCornerRadiusBottomRight with ConditionalPredicateValueDefTextExprRefValue with TickConfigTooltip with SharedEncodingY2Datum with TopLevelUnitSpecPadding with AxisConfigLabelFontSize with AreaConfigX2 with TitleParamsText with BarConfigAriaRole with RectConfigRadius2 with TopLevelHConcatSpecPadding with SharedEncodingSizeDatum with LegendConfigGradientThickness with AreaConfigAspect with ValueDefWithConditionMarkPropFieldOrDatumDefNumberValue with LineConfigSmooth with LegendConfigGradientStrokeColor with ViewConfigOpacity with SharedEncodingThetaValue with AxisDomainDashOffset with SharedEncodingX2Datum with TitleConfigLineHeight with MarkDefEllipsis with AxisConfigTickMinStep with HeaderConfigLabelLineHeight with MarkConfigRadius with TitleConfigFontStyle with AxisConfigLabelBaseline with LegendConfigSymbolStrokeWidth with MarkDefHeight with ProjectionConfigPrecision with ScaleRangeMax with LineConfigX2 with FieldRangePredicateRangeAsArrayElement with AxisConfigTickSize with MarkDefFontStyle with TickConfigStrokeMiterLimit with SharedEncodingStrokeDashDatum with ProjectionConfigFraction with ViewConfigStrokeOpacity with TickConfigRadius with MarkConfigCornerRadiusTopRight with AxisConfigAria with ProjectionFit with SharedEncodingHrefValue with LegendConfigAria with AreaConfigY2 with TickConfigFill with RectConfigCornerRadiusBottomLeft with AreaConfigHeight with AreaConfigFill with LineConfigY2 with MarkConfigY with MarkConfigX with SharedEncodingLongitudeDatum with RectConfigFont with MarkDefY2Offset with ProjectionFraction with OverlayMarkDefCornerRadiusTopLeft with BarConfigStrokeOffset with ProjectionConfigFit with OverlayMarkDefColor with MarkDefTheta2Offset with BarConfigInterpolate with AxisConfigLabelLimit with TitleParamsColor with AreaConfigText with TitleConfigFont with HeaderConfigTitleColor with LegendConfigLabelLimit with TitleConfigAngle with ProjectionClipExtent with MarkDefRadiusOffset with ScaleConfigContinuousPadding with OverlayMarkDefAria with LineConfigFillOpacity with ConditionalParameterValueDefNumberExprRefValue with OverlayMarkDefTheta with AreaConfigSmooth with LegendConfigLabelOpacity with SharedEncodingTheta2Value with TitleConfigFontWeight with OverlayMarkDefStrokeCap with RectConfigStrokeMiterLimit with HeaderTitlePadding with BarConfigInnerRadius with SharedEncodingAngleValue with RectConfigDir with BarConfigStroke with TitleConfigSubtitleFontStyle with SharedEncodingAngleDatum with RectConfigY with OverlayMarkDefTooltip with RectConfigX with MarkDefStrokeWidth with TitleParamsFont with AxisTickCount with MarkConfigFontSize with AreaConfigTheta2 with OverlayMarkDefThetaOffset with AxisConfigLabelLineHeight with LegendConfigTitlePadding with LineConfigBlend with LegendConfigTitleFontSize with ProjectionConfigType with SharedEncodingXOffsetDatum with AxisConfigTitleLineHeight with MarkDefXOffset with SharedEncodingStrokeValue with TickConfigTension with FieldOrDatumDefWithConditionDatumDefStringNullDatum with OverlayMarkDefCornerRadiusTopRight with OverlayMarkDefDescription with MarkDefCornerRadiusBottomRight with HeaderLabelPadding with LineConfigText with RectConfigOpacity with RectConfigColor with OverlayMarkDefX2Offset with AxisConfigDomainDash with MarkConfigStrokeDashOffset with RectConfigDx with ViewBackgroundStrokeMiterLimit with RectConfigDy with LineConfigStrokeDashOffset with MarkDefStrokeDashOffset with HeaderConfigLabelFont with ViewBackgroundStrokeOpacity with AxisMaxExtent with MarkDefHref with HeaderLabelFont with LineConfigAspect with SharedEncodingLatitudeDatum with AxisConfigTitleAngle with TickConfigSmooth with TickConfigStroke with BarConfigSmooth with ViewConfigStroke with HeaderConfigTitleLineHeight with MarkConfigLineBreak with ScaleDomainAsArrayElement with AxisLabelFontWeight with ConditionalPredicateValueDefStringExprRefValue with ConditionalParameterValueDefStringNullExprRefValue with MarkConfigCornerRadiusTopLeft with AxisTitleFontWeight with AxisConfigDomainCap with MarkDefX2Offset with RectConfigAlign with TickConfigDescription with SharedEncodingRadius2Value with MarkDefSize with SharedEncodingRadius2Datum with AreaConfigStrokeWidth with AxisConfigTickColor with AxisPosition with TitleConfigZindex with MarkDefColor with ConditionalParameterValueDefGradientStringNullExprRefValue with AreaConfigStrokeOffset with LineConfigUrl with HeaderLabelLimit with AxisTitleBaseline with AxisLabelFontSize with LegendConfigStrokeWidth with ScaleConfigRound with TitleParamsSubtitlePadding with LegendConfigTitleOpacity with RectConfigTooltip with BarConfigCursor with BarConfigLineHeight with MarkConfigDescription with MarkConfigAspect with LineConfigAngle with LegendConfigTitleColor with TitleParamsSubtitleFontSize with OverlayMarkDefFontWeight with ProjectionConfigCenter with AreaConfigTheta with FieldGTPredicateGt with RectConfigText with OverlayMarkDefX2 with OverlayMarkDefRadiusOffset with TitleParamsSubtitleFontStyle with ViewBackgroundStrokeCap with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with AreaConfigFontWeight with MarkConfigAriaRoleDescription with AxisConfigLabelFontStyle with FieldLTPredicateLt with MarkDefAlign with OverlayMarkDefOpacity with AxisConfigDescription with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with LegendConfigLabelFontStyle with TitleConfigSubtitleLineHeight with ViewBackgroundFillOpacity with TickConfigLimit with ScaleConfigBandPaddingOuter with MarkConfigCornerRadius with OverlayMarkDefY2 with ProjectionScale with ViewConfigStrokeJoin with TopLevelFacetSpecBackground with BarConfigSize with AxisDomainDash with MarkDefStrokeCap with OverlayMarkDefSize with AxisTitleAnchor with ViewConfigStrokeCap with BarConfigLimit with OverlayMarkDefShape with ProjectionSize with ConditionalParameterValueDefStringExprRefValue with HeaderTitleFontSize with TickConfigLineBreak with MarkConfigFontStyle with AxisTickDashOffset with AreaConfigFont with ViewBackgroundStrokeJoin with TickConfigStrokeJoin with ScaleConfigRectBandPaddingInner with MarkConfigFont with ScaleConfigBandPaddingInner with AxisConfigLabelFlushOffset with TopLevelUnitSpecBackground with RectConfigLineBreak with ProjectionTranslate with SharedEncodingTextValue with TopLevelRepeatSpecAsObject2Padding with OverlayMarkDefYOffset with TickConfigFontSize with HeaderTitleAlign with PositionDatumDefBaseDatum with TickConfigStartAngle with LegendConfigTitleAlign with SharedEncodingYDatum with AreaConfigEllipsis with AreaConfigPadAngle with BoxPlotDefColor with TitleParamsDx with HeaderTitleColor with TitleParamsDy with LegendConfigSymbolBaseStrokeColor with AreaConfigAriaRole with MarkDefAngle with RectConfigBlend with TickConfigCursor with OverlayMarkDefOuterRadius with BarConfigFontSize with LineConfigDir with LineConfigLineBreak with LegendConfigLabelSeparation with TickConfigInnerRadius with OverlayMarkDefY with AxisConfigTitleFont with OverlayMarkDefX with AxisTickOffset with RectConfigFill with RectConfigShape with AreaConfigDx with AreaConfigDy with MarkConfigFontWeight with LineConfigAlign with SharedEncodingThetaDatum with SharedEncodingFillOpacityDatum with AxisTickSize with LineConfigTheta2 with MarkConfigLimit with MarkConfigOuterRadius with RectConfigUrl with MarkDefShape with AxisTitleFont with OverlayMarkDefStartAngle with TitleConfigColor with LegendConfigColumnPadding with ProjectionConfigSpacing with ScaleConfigClamp with MarkDefDx with MarkDefDy with BarConfigStrokeMiterLimit with TitleConfigOrient with RectConfigFontWeight with LineConfigStrokeDash with OverlayMarkDefTension with HeaderConfigTitlePadding with TitleParamsFontStyle with LegendConfigTitleFontWeight with AxisConfigGridColor with AxisValues with PositionDatumDefDatum with AxisMinExtent with LineConfigFill with SharedEncodingStrokeDashValue with ProjectionDistance with TopLevelConcatSpecPadding with ProjectionConfigLobes with MarkConfigUrl with TitleParamsSubtitleColor with OverlayMarkDefInnerRadius with AxisOffset with ConditionalPredicateValueDefGradientStringNullExprRefValue with AreaConfigAlign with MarkDefBlend with MarkDefOuterRadius with LineConfigCornerRadius with HeaderLabelLineHeight with RectConfigRadius with SharedEncodingStrokeDatum with OverlayMarkDefHref with OverlayMarkDefRadius2 with OverlayMarkDefInterpolate with AxisDomainOpacity with AreaConfigWidth with ScaleConfigPointPadding with LegendConfigGradientDirection with AxisAria with MarkConfigLineHeight with MarkDefCornerRadiusTopRight with TickConfigCornerRadiusTopRight with TickConfigStrokeOffset with TickConfigCornerRadius with LegendConfigPadding with MarkConfigBaseline with LegendConfigSymbolLimit with RectConfigCornerRadius with AreaConfigX with AreaConfigY with LineConfigColor with ViewConfigStrokeWidth with HeaderConfigLabelBaseline with LineConfigDx with LineConfigDy with SharedEncodingFillValue with SharedEncodingTheta2Datum with SharedEncodingXValue with BarConfigAria with TickConfigOuterRadius with TopLevelRepeatSpecAsObject1Background with OverlayMarkDefRadius with AxisDomainCap with ScaleReverse with BarConfigAngle with MarkConfigHeight with AxisTitlePadding with BarConfigFontWeight with TitleParamsFrame with FieldGTEPredicateGte with RectConfigY2 with RectConfigX2 with LineConfigStrokeJoin with AreaConfigBaseline with SharedEncodingLongitude2Datum with ViewConfigStrokeDash with TickConfigAngle with LegendConfigStrokeColor with LineConfigInterpolate with AxisTitleFontSize with ErrorBarDefColor with ScaleConfigBandWithNestedOffsetPaddingInner with AxisConfigValues with AxisConfigLabelBound with AxisLabelBaseline with RectConfigStroke with SharedEncodingRadiusDatum with LegendConfigSymbolSize with AxisLabelFont with RectConfigInnerRadius with RectConfigAriaRoleDescription with ProjectionConfigRatio with RectConfigFontStyle with TickConfigSize with AreaConfigStrokeCap with MarkConfigText with OverlayMarkDefCursor with AreaConfigColor with LineConfigFontStyle with LineConfigLineHeight with MarkConfigStrokeOpacity with AxisLabelSeparation with MarkConfigTheta with HeaderConfigTitleBaseline with ScaleConstant with ScaleClamp with ScaleDomainMax with ViewConfigStrokeDashOffset with LegendConfigZindex with LineConfigFontSize with AreaConfigDir with TitleParamsLineHeight with SharedEncodingOpacityDatum with AxisConfigTickOpacity with ProjectionConfigDistance with ProjectionConfigParallels with SharedEncodingOpacityValue with SharedEncodingRadiusValue with OverlayMarkDefStrokeDashOffset with AxisConfigGridDashOffset with LineConfigCornerRadiusTopRight with BarConfigStrokeDash with ProjectionLobes with AxisConfigTitleOpacity with HeaderConfigTitleFontStyle with AxisConfigLabelOffset with OverlayMarkDefStroke with FieldEqualPredicateEqual with ProjectionConfigExtent with ScaleConfigOffsetBandPaddingInner with MarkDefAriaRoleDescription with TickConfigFontStyle with SharedEncodingColorValue with LineConfigEndAngle with BarConfigFill with MarkDefAria with ViewBackgroundFill with ProjectionConfigClipExtent with BarConfigBaseline with LegendConfigLabelFontSize with OverlayMarkDefFill with AxisConfigTickCount with LineConfigTooltip with TitleParamsSubtitleLineHeight with LineConfigOuterRadius with LegendConfigSymbolFillColor with RectConfigCornerRadiusTopRight with AxisDomainWidth with TickConfigBlend with ViewBackgroundStroke with RectConfigStrokeDashOffset with TickConfigTheta2 with LineConfigShape with FieldRangePredicateRange with LineConfigStrokeCap with LineConfigStrokeMiterLimit with ScaleConfigBarBandPaddingInner with RectConfigStrokeCap with AreaConfigFontStyle with OverlayMarkDefStrokeOffset with LineConfigCornerRadiusBottomLeft with AxisConfigLabelAngle with LegendConfigTitleBaseline with MarkConfigInterpolate with PositionValueDefValue with MarkDefFontSize with TickConfigInterpolate with LegendConfigSymbolDirection with MarkConfigTension with ScalePaddingInner with AxisConfigTickOffset with RectConfigAngle with ViewConfigFillOpacity with BarConfigAriaRoleDescription with AreaConfigInterpolate with SharedEncodingY2Value with LegendConfigSymbolDash with BarConfigUrl with MarkConfigDir with AxisTickDash with MarkConfigInnerRadius with MarkConfigStartAngle with AxisConfigMaxExtent with AreaConfigCursor with MarkDefThetaOffset with HeaderConfigTitleFontWeight with TickConfigLineHeight with TickConfigPadAngle with AxisConfigPosition with BarConfigRadius with MarkConfigFill with LegendConfigLabelFont with RectConfigHref with TitleParamsFontSize with OverlayMarkDefLineHeight with MarkDefCornerRadiusTopLeft with BarConfigY with TopLevelVConcatSpecPadding with LegendConfigSymbolType with LegendConfigDescription with BarConfigX with AxisConfigTitlePadding with BarConfigPadAngle with MarkConfigAriaRole with AxisTitleY with FieldLTEPredicateLte with AxisConfigTickDashOffset with ErrorBandDefColor with AxisTitleX with AreaConfigStrokeJoin with BarConfigFontStyle with ConfigLineBreak with BarConfigBlend with RectConfigCornerRadiusTopLeft with TickConfigAriaRoleDescription with MarkDefY with MarkDefX with MarkDefRadius2Offset with TickConfigCornerRadiusTopLeft with AxisConfigGridOpacity with AreaConfigStrokeDashOffset with AreaConfigRadius with AreaConfigBlend with LegendConfigTitleAnchor with MarkDefStrokeOpacity with LegendConfigLegendX with MarkDefStrokeDash with TickConfigRadius2 with TitleConfigAria with LegendConfigLegendY with AxisConfigTitleAnchor with TickConfigHeight with OverlayMarkDefFont with AxisTickBand with MarkDefY2 with MarkConfigStrokeOffset with FieldOrDatumDefWithConditionStringDatumDefTextDatum with LegendConfigGridAlign with LegendConfigGradientLabelLimit with ProjectionConfigParallel with TickConfigAria with ProjectionParallel with LineConfigInnerRadius with TitleConfigAnchor with LegendConfigGradientOpacity with AxisDomainColor with TitleParamsSubtitleFontWeight with AxisLabelAlign with AxisLabelColor with HeaderConfigTitleLimit with SharedEncodingTextDatum with OverlayMarkDefLimit with MarkDefX2 with OverlayMarkDefY2Offset with TickConfigFontWeight with AreaConfigEndAngle with MarkDefFontWeight with RectConfigAriaRole with HeaderLabelFontStyle with AreaConfigInnerRadius with AxisConfigDomainDashOffset with BarConfigCornerRadiusTopRight with SharedEncodingFillOpacityValue with LegendConfigTitleLimit with TitleConfigLimit with LegendConfigSymbolBaseFillColor with MarkDefPadAngle with TitleParamsAria with OverlayMarkDefUrl with LineConfigFont with OverlayMarkDefStrokeOpacity with ProjectionConfigSize with TickConfigStrokeOpacity with AxisGridColor with BarConfigCornerRadiusTopLeft with TitleConfigSubtitleFontWeight with AreaConfigCornerRadiusBottomLeft with ProjectionRadius with ProjectionClipAngle with TickConfigStrokeDashOffset with ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullValue with MarkConfigTheta2 with AreaConfigAngle with MarkConfigOpacity with AxisTitleLimit with MarkDefCornerRadius with LineConfigOpacity with MarkConfigEndAngle with ValueDefWithConditionStringFieldDefTextValue with AxisTitleOpacity with MarkDefFillOpacity with MarkDefYOffset with MarkConfigStroke with RectConfigCornerRadiusBottomRight with AreaConfigFontSize with MarkDefStrokeOffset with AxisConfigLabelSeparation with BarConfigHref with AxisTickColor with HeaderConfigLabelAlign with AxisConfigGridDash with RectConfigCursor with OverlayMarkDefRadius2Offset with TitleParamsFontWeight with BarConfigDescription with MarkConfigStrokeCap with BarConfigStrokeCap with OverlayMarkDefText with LegendConfigCornerRadius with HeaderConfigLabelColor with RectConfigStrokeJoin with AreaConfigShape with MarkDefBaseline with SharedEncodingUrlValue with MarkDefRadius2 with MarkConfigWidth with TickConfigAspect with MarkDefDir with MarkConfigAlign with AxisTitleLineHeight with AxisConfigTitleLimit with AxisConfigTitleFontWeight with TickConfigStrokeDash with BarConfigStrokeOpacity with SharedEncodingXDatum with BarConfigCornerRadiusEnd with ProjectionConfigClipAngle with MarkDefLineHeight with BarConfigStrokeWidth with SharedEncodingFillDatum with AreaConfigOuterRadius with RectConfigEllipsis with RectConfigSize with HeaderTitleBaseline with RectConfigTension with AxisTickMinStep with MarkConfigTooltip with AxisGridWidth with LineConfigStrokeOpacity with MarkDefRadius 
{  }
object ExprRef {
  val definedFields = Set("expr") 
}

////////////////////////////////////////////////////////////////////////

// AxisLabelLimit (UnionType)

sealed trait AxisLabelLimit 
   case class AxisLabelLimitAsNumber(value: JsNumber) extends AxisLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterStringFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalParameterStringFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait TopLevelFacetSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkConfigRadius2 
   case class MarkConfigRadius2AsNumber(value: JsNumber) extends MarkConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait LineConfigSize 
   case class LineConfigSizeAsNumber(value: JsNumber) extends LineConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleAlign (UnionType)
/**
 * Horizontal text alignment (to the anchor) of header titles.
 **/
sealed trait HeaderConfigTitleAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefText (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionStringFieldDefText(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[FieldOrDatumDefWithConditionStringFieldDefTextFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionStringFieldDefTextBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionStringFieldDefTextCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FieldOrDatumDefWithConditionStringFieldDefTextBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FieldOrDatumDefWithConditionStringFieldDefTextTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends TextDef 
{  }
object FieldOrDatumDefWithConditionStringFieldDefText {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigPadAngle (UnionType)

sealed trait RectConfigPadAngle 
   case class RectConfigPadAngleAsNumber(value: JsNumber) extends RectConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigOffset (UnionType)
/**
 * The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.
 * 
 * __Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)
 **/
sealed trait AxisConfigOffset 
   case class AxisConfigOffsetAsNumber(value: JsNumber) extends AxisConfigOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigGridOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity of grid (value between [0,1])
 * 
 * __Default value:__ `1`
 **/
case class AxisConfigGridOpacityAsNumber(value: JsNumber) extends AxisConfigGridOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingLatitude2Value 
   case class SharedEncodingLatitude2ValueAsNumber(value: JsNumber) extends SharedEncodingLatitude2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeWidth (UnionType)

sealed trait LineConfigStrokeWidth 
   // LineConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingX2 (StructType)

case class SharedEncodingX2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingX2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingX2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingX2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingX2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingX2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefAspect (UnionType)

sealed trait MarkDefAspect 
   case class MarkDefAspectAsBool(value: Boolean) extends MarkDefAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue 
   case class ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValueAsString(value: String) extends ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue
   case object ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValueAsNull extends ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelFlushOffset (UnionType)

sealed trait AxisLabelFlushOffset 
   case class AxisLabelFlushOffsetAsNumber(value: JsNumber) extends AxisLabelFlushOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// InlineData (StructType)

case class InlineData(
  /**
   * An object that specifies the format for parsing the data.
   **/
  var `format` : Option[DataFormat] = None,
  /**
   * Provide a placeholder name and bind data at runtime.
   **/
  var `name` : Option[String] = None,
  /**
   * The full data set, included inline. This can be an array of objects or primitive values, an object, or a string. Arrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type.
   **/
  var `values` : InlineDataset
) extends DataSource 
{  }
object InlineData {
  val definedFields = Set("format", "name", "values") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingOpacityBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// MarkDefPoint (UnionType)
/**
 * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
 * 
 * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
 * 
 * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
 * 
 * - If this property is `false`, no points would be automatically added to line or area marks.
 * 
 * __Default value:__ `false`.
 **/
sealed trait MarkDefPoint 
   case class MarkDefPointAsBool(value: Boolean) extends MarkDefPoint
   // OverlayMarkDef is defined elsewhere
   // Transparent is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingYValue 
   case class SharedEncodingYValueAsNumber(value: JsNumber) extends SharedEncodingYValue
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigClipHeight (UnionType)

sealed trait LegendConfigClipHeight 
   case class LegendConfigClipHeightAsNumber(value: JsNumber) extends LegendConfigClipHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFont (UnionType)

sealed trait MarkDefFont 
   case class MarkDefFontAsString(value: String) extends MarkDefFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTitleAngle (UnionType)

sealed trait AxisTitleAngle 
   case class AxisTitleAngleAsNumber(value: JsNumber) extends AxisTitleAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionPrecision (UnionType)

sealed trait ProjectionPrecision 
   case class ProjectionPrecisionAsNumber(value: JsNumber) extends ProjectionPrecision
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingColorCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingColorCondition 
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class SharedEncodingColorConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends SharedEncodingColorCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Center (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait TopLevelRepeatSpecAsObject2Center 
   case class TopLevelRepeatSpecAsObject2CenterAsBool(value: Boolean) extends TopLevelRepeatSpecAsObject2Center
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefTextExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalPredicateValueDefTextExprRefValue 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait TickConfigTooltip 
   case class TickConfigTooltipAsString(value: String) extends TickConfigTooltip
   case object TickConfigTooltipAsNull extends TickConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class TickConfigTooltipAsBool(value: Boolean) extends TickConfigTooltip
   case class TickConfigTooltipAsNumber(value: JsNumber) extends TickConfigTooltip

////////////////////////////////////////////////////////////////////////

// ViewConfigDiscreteHeight (UnionType)
/**
 * The default height when the plot has non arc marks and either a discrete y-field or no y-field. The height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step.
 * 
 * __Default value:__ a step size based on `config.view.step`.
 **/
sealed trait ViewConfigDiscreteHeight 
   case class ViewConfigDiscreteHeightAsNumber(value: JsNumber) extends ViewConfigDiscreteHeight
   // ViewConfigDiscreteHeightAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelUnitSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsText (UnionType)
/**
 * The title text.
 **/
sealed trait TitleParamsText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigAriaRole (UnionType)

sealed trait BarConfigAriaRole 
   case class BarConfigAriaRoleAsString(value: String) extends BarConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelHConcatSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelHConcatSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientThickness (UnionType)

sealed trait LegendConfigGradientThickness 
   // LegendConfigGradientThicknessAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigAspect (UnionType)

sealed trait AreaConfigAspect 
   case class AreaConfigAspectAsBool(value: Boolean) extends AreaConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingY2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingY2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefNumberValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefNumberValue 
   case class ValueDefWithConditionMarkPropFieldOrDatumDefNumberValueAsNumber(value: JsNumber) extends ValueDefWithConditionMarkPropFieldOrDatumDefNumberValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigSmooth (UnionType)

sealed trait LineConfigSmooth 
   case class LineConfigSmoothAsBool(value: Boolean) extends LineConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigGradientStrokeColor (UnionType)
/**
 * The color of the gradient stroke, can be in hex color code or regular color name.
 * 
 * __Default value:__ `"lightGray"`.
 **/
sealed trait LegendConfigGradientStrokeColor 
   case object LegendConfigGradientStrokeColorAsNull extends LegendConfigGradientStrokeColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class RectConfigStrokeWidthAsNumber(value: JsNumber) extends RectConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisLabelFlush (UnionType)

sealed trait AxisLabelFlush 
   case class AxisLabelFlushAsBool(value: Boolean) extends AxisLabelFlush
   case class AxisLabelFlushAsNumber(value: JsNumber) extends AxisLabelFlush

////////////////////////////////////////////////////////////////////////

// BoxPlotDefRule (UnionType)

sealed trait BoxPlotDefRule 
   case class BoxPlotDefRuleAsBool(value: Boolean) extends BoxPlotDefRule
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingThetaValue 
   case class SharedEncodingThetaValueAsNumber(value: JsNumber) extends SharedEncodingThetaValue
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingX2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingX2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingTextTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickMinStep (UnionType)
/**
 * The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.
 **/
sealed trait AxisConfigTickMinStep 
   case class AxisConfigTickMinStepAsNumber(value: JsNumber) extends AxisConfigTickMinStep
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelLineHeight (UnionType)
/**
 * Line height in pixels for multi-line header labels or title text with `"line-top"` or `"line-bottom"` baseline.
 **/
sealed trait HeaderConfigLabelLineHeight 
   case class HeaderConfigLabelLineHeightAsNumber(value: JsNumber) extends HeaderConfigLabelLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Interpolate (EnumType)
/**
 * The line interpolation method to use for line and area marks. One of the following:
 * - `"linear"`: piecewise linear segments, as in a polyline.
 * - `"linear-closed"`: close the linear segments to form a polygon.
 * - `"step"`: alternate between horizontal and vertical segments, as in a step function.
 * - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
 * - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
 * - `"basis"`: a B-spline, with control point duplication on the ends.
 * - `"basis-open"`: an open B-spline; may not intersect the start or end.
 * - `"basis-closed"`: a closed B-spline, as in a loop.
 * - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
 * - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
 * - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
 * - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
 * - `"monotone"`: cubic interpolation that preserves monotonicity in y.
 **/
sealed trait Interpolate extends TickConfigInterpolate with RectConfigInterpolate with MarkConfigInterpolate with MarkDefInterpolate with OverlayMarkDefInterpolate with LineConfigInterpolate with AreaConfigInterpolate with BarConfigInterpolate { val payload: JsValue }
   case object InterpolateBasis extends Interpolate { val payload = JsString("basis") }
   case object InterpolateBasisOpen extends Interpolate { val payload = JsString("basis-open") }
   case object InterpolateBasisClosed extends Interpolate { val payload = JsString("basis-closed") }
   case object InterpolateBundle extends Interpolate { val payload = JsString("bundle") }
   case object InterpolateCardinal extends Interpolate { val payload = JsString("cardinal") }
   case object InterpolateCardinalOpen extends Interpolate { val payload = JsString("cardinal-open") }
   case object InterpolateCardinalClosed extends Interpolate { val payload = JsString("cardinal-closed") }
   case object InterpolateCatmullRom extends Interpolate { val payload = JsString("catmull-rom") }
   case object InterpolateLinear extends Interpolate { val payload = JsString("linear") }
   case object InterpolateLinearClosed extends Interpolate { val payload = JsString("linear-closed") }
   case object InterpolateMonotone extends Interpolate { val payload = JsString("monotone") }
   case object InterpolateNatural extends Interpolate { val payload = JsString("natural") }
   case object InterpolateStep extends Interpolate { val payload = JsString("step") }
   case object InterpolateStepBefore extends Interpolate { val payload = JsString("step-before") }
   case object InterpolateStepAfter extends Interpolate { val payload = JsString("step-after") }

////////////////////////////////////////////////////////////////////////

// MarkConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait MarkConfigRadius 
   case class MarkConfigRadiusAsNumber(value: JsNumber) extends MarkConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigFontStyle (UnionType)

sealed trait TitleConfigFontStyle 
   case class TitleConfigFontStyleAsString(value: String) extends TitleConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Day (ConstrainedType)

case class Day(value: JsNumber) extends DateTimeDay
{ assert(value.value <= 7)
  assert(value.value >= 1) }

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpec (StructType)
/**
 * Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).
 **/
case class FacetedUnitSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks and to `latitude` and `"longitude"` channels for other marks.
   **/
  var `projection` : Option[Projection] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[FacetedUnitSpecCenter] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An array of parameters that may either be simple variables, or more complex selections that map user input to data queries.
   **/
  var `params` : Option[Seq[FacetedUnitSpecParamsElement]] = None,
  /**
   * The height of a visualization.
   * 
   * - For a plot with a continuous y-field, height should be a number.
   * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on height, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `height` : Option[FacetedUnitSpecHeight] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[FacetedUnitSpecTitle] = None,
  /**
   * A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
   **/
  var `mark` : AnyMark,
  /**
   * An object defining the view background's fill and stroke.
   * 
   * __Default value:__ none (transparent)
   **/
  var `view` : Option[ViewBackground] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[FacetedUnitSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * A key-value mapping between encoding channels and definition of fields.
   **/
  var `encoding` : Option[FacetedEncoding] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[FacetedUnitSpecBounds] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[FacetedUnitSpecSpacing] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None,
  /**
   * The width of a visualization.
   * 
   * - For a plot with a continuous x-field, width should be a number.
   * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
   * - To enable responsive sizing on width, it should be set to `"container"`.
   * 
   * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
   * 
   * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
   * 
   * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
   **/
  var `width` : Option[FacetedUnitSpecWidth] = None
) extends NonNormalizedSpec with FacetSpecSpec with Spec 
{  }
object FacetedUnitSpec {
  val definedFields = Set("projection", "spacing", "data", "encoding", "view", "height", "transform", "name", "align", "center", "params", "description", "title", "mark", "width", "resolve", "bounds") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolStrokeWidth (UnionType)

sealed trait LegendConfigSymbolStrokeWidth 
   // LegendConfigSymbolStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefHeight (UnionType)
/**
 * Height of the marks.  One of:
 * 
 * - A number representing a fixed pixel height.
 * 
 * - A relative band size definition.  For example, `{band: 0.5}` represents half of the band
 **/
sealed trait MarkDefHeight 
   case class MarkDefHeightAsNumber(value: JsNumber) extends MarkDefHeight
   // ExprRef is defined elsewhere
   // RelativeBandSize is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithConditionFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait StringFieldDefWithConditionFormat 
   case class StringFieldDefWithConditionFormatAsString(value: String) extends StringFieldDefWithConditionFormat
   case class StringFieldDefWithConditionFormatAsDictOfAny(value: Map[String,JsValue]) extends StringFieldDefWithConditionFormat

////////////////////////////////////////////////////////////////////////

// ImputeMethod (EnumType)
/**
 * The imputation method to use for the field value of imputed data objects. One of `"value"`, `"mean"`, `"median"`, `"max"` or `"min"`.
 * 
 * __Default value:__  `"value"`
 **/
sealed trait ImputeMethod  { val payload: JsValue }
   case object ImputeMethodValue extends ImputeMethod { val payload = JsString("value") }
   case object ImputeMethodMedian extends ImputeMethod { val payload = JsString("median") }
   case object ImputeMethodMax extends ImputeMethod { val payload = JsString("max") }
   case object ImputeMethodMin extends ImputeMethod { val payload = JsString("min") }
   case object ImputeMethodMean extends ImputeMethod { val payload = JsString("mean") }

////////////////////////////////////////////////////////////////////////

// ProjectionConfigPrecision (UnionType)

sealed trait ProjectionConfigPrecision 
   case class ProjectionConfigPrecisionAsNumber(value: JsNumber) extends ProjectionConfigPrecision
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AnyMarkConfig (UnionType)

sealed trait AnyMarkConfig extends StyleConfigIndexOptional
   // LineConfig is defined elsewhere
   // TickConfig is defined elsewhere
   // AreaConfig is defined elsewhere
   // BarConfig is defined elsewhere
   // MarkConfig is defined elsewhere
   // RectConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// UnitSpecParamsElement (UnionType)

sealed trait UnitSpecParamsElement 
   // VariableParameter is defined elsewhere
   // SelectionParameter is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowTransform (StructType)

case class WindowTransform(
  /**
   * The definition of the fields in the window, and what calculations to use.
   **/
  var `window` : Seq[WindowFieldDef],
  /**
   * A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is `[null, 0]`, indicating that the sliding window includes the current object and all preceding objects. The value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object. Finally, `[null, null]` indicates that the window frame should always include all data objects. If you this frame and want to assign the same value to add objects, you can use the simpler [join aggregate transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators affected are the aggregation operations and the `first_value`, `last_value`, and `nth_value` window operations. The other window operations are not affected by this.
   * 
   * __Default value:__:  `[null, 0]` (includes the current object and all preceding objects)
   **/
  var `frame` : Option[Seq[WindowTransformFrameElement]] = None,
  /**
   * The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be in a single window.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * A sort field definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered "peer" values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to `true`).
   **/
  var `sort` : Option[Seq[SortField]] = None,
  /**
   * Indicates if the sliding window frame should ignore peer values (data that are considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.
   * 
   * __Default value:__ `false`
   **/
  var `ignorePeers` : Option[Boolean] = None
) extends Transform 
{  }
object WindowTransform {
  val definedFields = Set("frame", "window", "ignorePeers", "groupby", "sort") 
}

////////////////////////////////////////////////////////////////////////

// ScaleRangeMax (UnionType)
/**
 * Sets the maximum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges.
 **/
sealed trait ScaleRangeMax 
   case class ScaleRangeMaxAsNumber(value: JsNumber) extends ScaleRangeMax
   case class ScaleRangeMaxAsString(value: String) extends ScaleRangeMax
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait FacetSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait LineConfigX2 
   case class LineConfigX2AsNumber(value: JsNumber) extends LineConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldRangePredicateRangeAsArrayElement (UnionType)

sealed trait FieldRangePredicateRangeAsArrayElement 
   case class FieldRangePredicateRangeAsArrayElementAsNumber(value: JsNumber) extends FieldRangePredicateRangeAsArrayElement
   // DateTime is defined elsewhere
   case object FieldRangePredicateRangeAsArrayElementAsNull extends FieldRangePredicateRangeAsArrayElement
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFontStyle (UnionType)

sealed trait MarkDefFontStyle 
   case class MarkDefFontStyleAsString(value: String) extends MarkDefFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin 
   case class ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1BinAsBool(value: Boolean) extends ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin
   // BinParams is defined elsewhere
   case object ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1BinAsNull extends ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeMiterLimit (UnionType)

sealed trait TickConfigStrokeMiterLimit 
   case class TickConfigStrokeMiterLimitAsNumber(value: JsNumber) extends TickConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotDefExtent (UnionType)
/**
 * The extent of the whiskers. Available options include:
 * - `"min-max"`: min and max are the lower and upper whiskers respectively.
 * - A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
 * 
 * __Default value:__ `1.5`.
 **/
sealed trait BoxPlotDefExtent 
   // MinMax is defined elsewhere
   case class BoxPlotDefExtentAsNumber(value: JsNumber) extends BoxPlotDefExtent

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDash (StructType)

case class SharedEncodingStrokeDash(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingStrokeDashDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingStrokeDashBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingStrokeDashCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingStrokeDashBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingStrokeDashValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingStrokeDashTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingStrokeDashType] = None
)  
{  }
object SharedEncodingStrokeDash {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeOpacity (UnionType)

sealed trait ViewConfigStrokeOpacity 
   // ViewConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCornerRadiusTopRight (UnionType)

sealed trait MarkConfigCornerRadiusTopRight 
   case class MarkConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends MarkConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShape (UnionType)

sealed trait ConditionalParameterMarkPropFieldOrDatumDefTypeForShape extends ConditionalMarkPropFieldOrDatumDefTypeForShape
   // ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1 is defined elsewhere
   // ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigAria (UnionType)

sealed trait AxisConfigAria 
   case class AxisConfigAriaAsBool(value: Boolean) extends AxisConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionFit (UnionType)

sealed trait ProjectionFit 
   case class ProjectionFitAsArrayOfAny(value: Seq[JsValue]) extends ProjectionFit
   case class ProjectionFitAsArrayOfFit(value: Seq[Fit]) extends ProjectionFit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfig (StructType)

case class MarkConfig(
  var `cornerRadiusBottomRight` : Option[MarkConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[MarkConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[MarkConfigStrokeMiterLimit] = None,
  var `dir` : Option[MarkConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[MarkConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[MarkConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[MarkConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[MarkConfigX] = None,
  var `dy` : Option[MarkConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[MarkConfigSize] = None,
  var `smooth` : Option[MarkConfigSmooth] = None,
  var `url` : Option[MarkConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[MarkConfigY] = None,
  var `strokeOpacity` : Option[MarkConfigStrokeOpacity] = None,
  var `ellipsis` : Option[MarkConfigEllipsis] = None,
  var `description` : Option[MarkConfigDescription] = None,
  var `angle` : Option[MarkConfigAngle] = None,
  var `lineBreak` : Option[MarkConfigLineBreak] = None,
  var `tension` : Option[MarkConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[MarkConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[MarkConfigStroke] = None,
  var `strokeDashOffset` : Option[MarkConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[MarkConfigAlign] = None,
  var `ariaRole` : Option[MarkConfigAriaRole] = None,
  var `strokeCap` : Option[MarkConfigStrokeCap] = None,
  var `endAngle` : Option[MarkConfigEndAngle] = None,
  var `strokeJoin` : Option[MarkConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[MarkConfigBaseline] = None,
  var `ariaRoleDescription` : Option[MarkConfigAriaRoleDescription] = None,
  var `aspect` : Option[MarkConfigAspect] = None,
  var `height` : Option[MarkConfigHeight] = None,
  var `fontStyle` : Option[MarkConfigFontStyle] = None,
  var `text` : Option[MarkConfigText] = None,
  var `cornerRadius` : Option[MarkConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[MarkConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[MarkConfigX2] = None,
  var `padAngle` : Option[MarkConfigPadAngle] = None,
  var `cursor` : Option[MarkConfigCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[MarkConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[MarkConfigStartAngle] = None,
  var `font` : Option[MarkConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[MarkConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[MarkConfigInvalid] = None,
  var `lineHeight` : Option[MarkConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[MarkConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[MarkConfigFill] = None,
  var `interpolate` : Option[MarkConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[MarkConfigTheta] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[MarkConfigInnerRadius] = None,
  var `fontSize` : Option[MarkConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[MarkConfigY2] = None,
  var `shape` : Option[MarkConfigShape] = None,
  var `aria` : Option[MarkConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[MarkConfigOpacity] = None,
  var `dx` : Option[MarkConfigDx] = None,
  var `cornerRadiusBottomLeft` : Option[MarkConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[MarkConfigHref] = None,
  var `strokeDash` : Option[MarkConfigStrokeDash] = None,
  var `strokeOffset` : Option[MarkConfigStrokeOffset] = None,
  var `limit` : Option[MarkConfigLimit] = None,
  var `width` : Option[MarkConfigWidth] = None,
  var `fontWeight` : Option[MarkConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[MarkConfigBlend] = None,
  var `strokeWidth` : Option[MarkConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[MarkConfigTheta2] = None
) extends ErrorBandConfigBand with BoxPlotConfigMedian with BoxPlotConfigTicks with ErrorBarDefTicks with ErrorBandConfigBorders with BoxPlotDefBox with BoxPlotDefRule with AnyMarkConfig with ErrorBandDefBand with BoxPlotConfigRule with BoxPlotDefOutliers with ErrorBarConfigTicks with ErrorBarConfigRule with BoxPlotConfigOutliers with BoxPlotDefMedian with ErrorBandDefBorders with ErrorBarDefRule with BoxPlotConfigBox with BoxPlotDefTicks 
{  }
object MarkConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "ariaRole", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "dx", "cornerRadiusBottomRight", "width", "cursor", "blend", "height", "theta2", "orient", "baseline", "stroke", "align", "shape", "lineHeight", "interpolate", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigAria (UnionType)

sealed trait LegendConfigAria 
   case class LegendConfigAriaAsBool(value: Boolean) extends LegendConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait TickConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object TickConfigFillAsNull extends TickConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefStringNullExprRef extends ConditionalValueDefStringNullExprRef with ConditionalAxisStringAsObject1Condition with ConditionalAxisStringAsObject2Condition
   // ConditionalPredicateValueDefStringNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefStringNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin 
   case class ConditionalParameterMarkPropFieldOrDatumDefAsObject1BinAsBool(value: Boolean) extends ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin
   // BinParams is defined elsewhere
   case object ConditionalParameterMarkPropFieldOrDatumDefAsObject1BinAsNull extends ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin

////////////////////////////////////////////////////////////////////////

// RectConfigCornerRadiusBottomLeft (UnionType)

sealed trait RectConfigCornerRadiusBottomLeft 
   case class RectConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends RectConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeTransformFrameElement (UnionType)

sealed trait ImputeTransformFrameElement 
   case object ImputeTransformFrameElementAsNull extends ImputeTransformFrameElement
   case class ImputeTransformFrameElementAsNumber(value: JsNumber) extends ImputeTransformFrameElement

////////////////////////////////////////////////////////////////////////

// NonNormalizedSpec (UnionType)
/**
 * A specification of the view that gets repeated.
 **/
sealed trait NonNormalizedSpec 
   // FacetSpec is defined elsewhere
   // LayerSpec is defined elsewhere
   // HConcatSpecGenericSpec is defined elsewhere
   // FacetedUnitSpec is defined elsewhere
   // ConcatSpecGenericSpec is defined elsewhere
   // RepeatSpec is defined elsewhere
   // VConcatSpecGenericSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait LineConfigY2 
   case class LineConfigY2AsNumber(value: JsNumber) extends LineConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait MarkConfigY 
   case class MarkConfigYAsNumber(value: JsNumber) extends MarkConfigY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait MarkConfigX 
   case class MarkConfigXAsNumber(value: JsNumber) extends MarkConfigX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SequentialSingleHue (EnumType)

sealed trait SequentialSingleHue extends ColorScheme { val payload: JsValue }
   case object SequentialSingleHueBlues extends SequentialSingleHue { val payload = JsString("blues") }
   case object SequentialSingleHueTealblues extends SequentialSingleHue { val payload = JsString("tealblues") }
   case object SequentialSingleHueTeals extends SequentialSingleHue { val payload = JsString("teals") }
   case object SequentialSingleHueGreens extends SequentialSingleHue { val payload = JsString("greens") }
   case object SequentialSingleHueBrowns extends SequentialSingleHue { val payload = JsString("browns") }
   case object SequentialSingleHueGreys extends SequentialSingleHue { val payload = JsString("greys") }
   case object SequentialSingleHuePurples extends SequentialSingleHue { val payload = JsString("purples") }
   case object SequentialSingleHueWarmgreys extends SequentialSingleHue { val payload = JsString("warmgreys") }
   case object SequentialSingleHueReds extends SequentialSingleHue { val payload = JsString("reds") }
   case object SequentialSingleHueOranges extends SequentialSingleHue { val payload = JsString("oranges") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingOpacityTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitudeDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingLongitudeDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleInterpolateParams (StructType)

case class ScaleInterpolateParams(
  var `gamma` : Option[JsNumber] = None,
  var `type` : ScaleInterpolateParamsType
) extends ScaleInterpolate 
{  }
object ScaleInterpolateParams {
  val definedFields = Set("gamma", "type") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigFont (UnionType)

sealed trait RectConfigFont 
   case class RectConfigFontAsString(value: String) extends RectConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefY2Offset (UnionType)
/**
 * Offset for y2-position.
 **/
sealed trait MarkDefY2Offset 
   case class MarkDefY2OffsetAsNumber(value: JsNumber) extends MarkDefY2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionFraction (UnionType)

sealed trait ProjectionFraction 
   case class ProjectionFractionAsNumber(value: JsNumber) extends ProjectionFraction
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontStyleAsObject2Condition (UnionType)

sealed trait ConditionalAxisLabelFontStyleAsObject2Condition 
   // ConditionalPredicateValueDefFontStyleNullExprRef is defined elsewhere
   case class ConditionalAxisLabelFontStyleAsObject2ConditionAsArrayOfConditionalPredicateValueDefFontStyleNullExprRef(value: Seq[ConditionalPredicateValueDefFontStyleNullExprRef]) extends ConditionalAxisLabelFontStyleAsObject2Condition

////////////////////////////////////////////////////////////////////////

// ConfigFieldTitle (EnumType)
/**
 * Defines how Vega-Lite generates title for fields. There are three possible styles:
 * - `"verbal"` (Default) - displays function in a verbal style (e.g., "Sum of field", "Year-month of date", "field (binned)").
 * - `"function"` - displays function using parentheses and capitalized texts (e.g., "SUM(field)", "YEARMONTH(date)", "BIN(field)").
 * - `"plain"` - displays only the field name without functions (e.g., "field", "date", "field").
 **/
sealed trait ConfigFieldTitle  { val payload: JsValue }
   case object ConfigFieldTitleVerbal extends ConfigFieldTitle { val payload = JsString("verbal") }
   case object ConfigFieldTitleFunctional extends ConfigFieldTitle { val payload = JsString("functional") }
   case object ConfigFieldTitlePlain extends ConfigFieldTitle { val payload = JsString("plain") }

////////////////////////////////////////////////////////////////////////

// FieldValidPredicate (StructType)

case class FieldValidPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldValidPredicateTimeUnit] = None,
  /**
   * If set to true the field's value has to be valid, meaning both not `null` and not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).
   **/
  var `valid` : Boolean
) extends Predicate 
{  }
object FieldValidPredicate {
  val definedFields = Set("field", "timeUnit", "valid") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait OverlayMarkDefColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigInterpolate (UnionType)

sealed trait BarConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelLimit (UnionType)

sealed trait AxisConfigLabelLimit 
   case class AxisConfigLabelLimitAsNumber(value: JsNumber) extends AxisConfigLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsColor (UnionType)
/**
 * Text color for title text.
 **/
sealed trait TitleParamsColor 
   case object TitleParamsColorAsNull extends TitleParamsColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait TopLevelUnitSpecSpacing 
   case class TopLevelUnitSpecSpacingAsNumber(value: JsNumber) extends TopLevelUnitSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelLimit (UnionType)

sealed trait LegendConfigLabelLimit 
   case class LegendConfigLabelLimitAsNumber(value: JsNumber) extends LegendConfigLabelLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait TopLevelFacetSpecCenter 
   case class TopLevelFacetSpecCenterAsBool(value: Boolean) extends TopLevelFacetSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelFontSizeAsNumber (ConstrainedType)
/**
 * The font size of legend label.
 * 
 * __Default value:__ `10`.
 **/
case class LegendConfigLabelFontSizeAsNumber(value: JsNumber) extends LegendConfigLabelFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionClipExtent (UnionType)

sealed trait ProjectionClipExtent 
   // Vector2Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Axis (StructType)

case class Axis(
  var `labelOpacity` : Option[AxisLabelOpacity] = None,
  var `domainCap` : Option[AxisDomainCap] = None,
  var `domainColor` : Option[AxisDomainColor] = None,
  /**
   * A string or array of strings indicating the name of custom styles to apply to the axis. A style is a named collection of axis property defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
   * 
   * __Default value:__ (none) __Note:__ Any specified style will augment the default style. For example, an x-axis mark with `"style": "foo"` will use `config.axisX` and `config.style.foo` (the specified style `"foo"` has higher precedence).
   **/
  var `style` : Option[AxisStyle] = None,
  /**
   * A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
   * 
   * __Default value:__ `true`
   **/
  var `domain` : Option[Boolean] = None,
  /**
   * The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.
   * 
   * __Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)
   **/
  var `offset` : Option[AxisOffset] = None,
  var `gridOpacity` : Option[AxisGridOpacity] = None,
  var `labelFontSize` : Option[AxisLabelFontSize] = None,
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[AxisFormat] = None,
  var `gridWidth` : Option[AxisGridWidth] = None,
  /**
   * A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale's range.
   * 
   * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, an object-valued interval specifier of the form `{"interval": "month", "step": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.
   * 
   * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.
   **/
  var `tickCount` : Option[AxisTickCount] = None,
  var `gridCap` : Option[AxisGridCap] = None,
  var `labelAngle` : Option[AxisLabelAngle] = None,
  var `domainOpacity` : Option[AxisDomainOpacity] = None,
  var `description` : Option[AxisDescription] = None,
  var `titleFont` : Option[AxisTitleFont] = None,
  var `titleFontStyle` : Option[AxisTitleFontStyle] = None,
  var `tickDashOffset` : Option[AxisTickDashOffset] = None,
  var `labelColor` : Option[AxisLabelColor] = None,
  var `domainDashOffset` : Option[AxisDomainDashOffset] = None,
  var `labelFontWeight` : Option[AxisLabelFontWeight] = None,
  var `gridDash` : Option[AxisGridDash] = None,
  var `minExtent` : Option[AxisMinExtent] = None,
  var `titleLineHeight` : Option[AxisTitleLineHeight] = None,
  var `labelLineHeight` : Option[AxisLabelLineHeight] = None,
  var `tickCap` : Option[AxisTickCap] = None,
  var `titleX` : Option[AxisTitleX] = None,
  var `bandPosition` : Option[AxisBandPosition] = None,
  /**
   * Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `"bandPosition": 1` and an axis `"padding"` value of `0`.
   **/
  var `tickExtra` : Option[Boolean] = None,
  /**
   * A boolean flag indicating if grid lines should be included as part of the axis
   * 
   * __Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.
   **/
  var `grid` : Option[Boolean] = None,
  var `tickBand` : Option[AxisTickBand] = None,
  var `titlePadding` : Option[AxisTitlePadding] = None,
  /**
   * The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.
   **/
  var `tickMinStep` : Option[AxisTickMinStep] = None,
  var `titleY` : Option[AxisTitleY] = None,
  /**
   * A boolean flag indicating if labels should be included as part of the axis.
   * 
   * __Default value:__ `true`.
   **/
  var `labels` : Option[Boolean] = None,
  /**
   * Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.
   * 
   * __Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.
   **/
  var `labelFlush` : Option[AxisLabelFlush] = None,
  /**
   * A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.
   * 
   * __Default value:__ `0` (behind the marks).
   **/
  var `zindex` : Option[AxisZindex] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  var `labelLimit` : Option[AxisLabelLimit] = None,
  var `gridDashOffset` : Option[AxisGridDashOffset] = None,
  var `titleAnchor` : Option[AxisTitleAnchor] = None,
  var `titleColor` : Option[AxisTitleColor] = None,
  /**
   * The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
   * 
   * __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
   **/
  var `labelOverlap` : Option[AxisLabelOverlap] = None,
  var `translate` : Option[AxisTranslate] = None,
  var `labelFlushOffset` : Option[AxisLabelFlushOffset] = None,
  var `domainWidth` : Option[AxisDomainWidth] = None,
  /**
   * Boolean flag indicating if pixel position values should be rounded to the nearest integer.
   * 
   * __Default value:__ `true`
   **/
  var `tickRound` : Option[Boolean] = None,
  var `labelOffset` : Option[AxisLabelOffset] = None,
  /**
   * Boolean value that determines whether the axis should include ticks.
   * 
   * __Default value:__ `true`
   **/
  var `ticks` : Option[Boolean] = None,
  /**
   * The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).
   * 
   * __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
   **/
  var `orient` : Option[AxisOrient] = None,
  var `domainDash` : Option[AxisDomainDash] = None,
  var `labelAlign` : Option[AxisLabelAlign] = None,
  /**
   * Explicitly set the visible axis tick values.
   **/
  var `values` : Option[AxisValues] = None,
  /**
   * The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.
   * 
   * __Default value__: `0`
   **/
  var `position` : Option[AxisPosition] = None,
  var `titleAngle` : Option[AxisTitleAngle] = None,
  var `labelPadding` : Option[AxisLabelPadding] = None,
  var `aria` : Option[AxisAria] = None,
  /**
   * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
   * 
   * __Note:__ The label text and value can be assessed via the `label` and `value` properties of the axis's backing `datum` object.
   **/
  var `labelExpr` : Option[String] = None,
  var `tickWidth` : Option[AxisTickWidth] = None,
  var `tickOffset` : Option[AxisTickOffset] = None,
  var `maxExtent` : Option[AxisMaxExtent] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  var `tickDash` : Option[AxisTickDash] = None,
  var `labelBound` : Option[AxisLabelBound] = None,
  var `gridColor` : Option[AxisGridColor] = None,
  var `titleLimit` : Option[AxisTitleLimit] = None,
  var `labelFont` : Option[AxisLabelFont] = None,
  var `labelFontStyle` : Option[AxisLabelFontStyle] = None,
  var `titleOpacity` : Option[AxisTitleOpacity] = None,
  var `titleAlign` : Option[AxisTitleAlign] = None,
  var `labelSeparation` : Option[AxisLabelSeparation] = None,
  var `titleBaseline` : Option[AxisTitleBaseline] = None,
  var `tickColor` : Option[AxisTickColor] = None,
  var `titleFontSize` : Option[AxisTitleFontSize] = None,
  var `titleFontWeight` : Option[AxisTitleFontWeight] = None,
  var `tickSize` : Option[AxisTickSize] = None,
  var `tickOpacity` : Option[AxisTickOpacity] = None,
  var `labelBaseline` : Option[AxisLabelBaseline] = None
) extends StyleConfigIndexOptional 
{  }
object Axis {
  val definedFields = Set("labelBaseline", "titleBaseline", "titleFont", "labelFontStyle", "domainDash", "tickWidth", "tickMinStep", "labelAngle", "domainCap", "minExtent", "titlePadding", "labelBound", "labelFontWeight", "labelFont", "titleFontWeight", "labelPadding", "tickCount", "maxExtent", "titleLimit", "titleFontStyle", "tickRound", "labels", "gridCap", "labelOpacity", "grid", "tickOffset", "domainColor", "tickCap", "labelExpr", "domainDashOffset", "tickOpacity", "bandPosition", "titleColor", "tickDash", "labelFlushOffset", "format", "titleAnchor", "position", "labelSeparation", "aria", "zindex", "domain", "ticks", "tickDashOffset", "description", "labelFontSize", "title", "titleAngle", "titleOpacity", "labelAlign", "style", "gridDashOffset", "labelOverlap", "gridOpacity", "labelLimit", "gridDash", "labelFlush", "tickSize", "orient", "formatType", "tickExtra", "gridWidth", "labelOffset", "translate", "titleY", "tickColor", "values", "gridColor", "labelColor", "titleAlign", "domainOpacity", "titleFontSize", "titleX", "domainWidth", "titleLineHeight", "labelLineHeight", "offset", "tickBand") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberAsObject2Condition (UnionType)

sealed trait ConditionalAxisNumberAsObject2Condition 
   // ConditionalPredicateValueDefNumberNullExprRef is defined elsewhere
   case class ConditionalAxisNumberAsObject2ConditionAsArrayOfConditionalPredicateValueDefNumberNullExprRef(value: Seq[ConditionalPredicateValueDefNumberNullExprRef]) extends ConditionalAxisNumberAsObject2Condition

////////////////////////////////////////////////////////////////////////

// UnitSpecWithFrameTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait UnitSpecWithFrameTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigContinuousPadding (ConstrainedType)
/**
 * Default padding for continuous x/y scales.
 * 
 * __Default:__ The bar width for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.
 **/
sealed trait ScaleConfigContinuousPadding 
   case class ScaleConfigContinuousPaddingAsNumber(value: JsNumber) extends ScaleConfigContinuousPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigLimitAsNumber (ConstrainedType)
/**
 * The maximum allowed length in pixels of title and subtitle text.
 **/
case class TitleConfigLimitAsNumber(value: JsNumber) extends TitleConfigLimit
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleConfigMaxFontSize (ConstrainedType)
/**
 * The default max value for mapping quantitative fields to text's size/fontSize.
 * 
 * __Default value:__ `40`
 **/
case class ScaleConfigMaxFontSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FacetEncodingFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelUnitSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefNumberExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalParameterValueDefNumberExprRefValue 
   case class ConditionalParameterValueDefNumberExprRefValueAsNumber(value: JsNumber) extends ConditionalParameterValueDefNumberExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait OverlayMarkDefTheta 
   case class OverlayMarkDefThetaAsNumber(value: JsNumber) extends OverlayMarkDefTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleBins (UnionType)
/**
 * Bin boundaries can be provided to scales as either an explicit array of bin boundaries or as a bin specification object. The legal values are:
 * - An [array](../types/#Array) literal of bin boundary values. For example, `[0, 5, 10, 15, 20]`. The array must include both starting and ending boundaries. The previous example uses five values to indicate a total of four bin intervals: [0-5), [5-10), [10-15), [15-20]. Array literals may include signal references as elements.
 * - A [bin specification object](https://vega.github.io/vega-lite/docs/scale.html#bins) that indicates the bin _step_ size, and optionally the _start_ and _stop_ boundaries.
 * - An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.
 **/
sealed trait ScaleBins 
   case class ScaleBinsAsArrayOfNumber(value: Seq[JsNumber]) extends ScaleBins
   // ScaleBinParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelOpacity (UnionType)

sealed trait LegendConfigLabelOpacity 
   case class LegendConfigLabelOpacityAsNumber(value: JsNumber) extends LegendConfigLabelOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingTheta2Value 
   case class SharedEncodingTheta2ValueAsNumber(value: JsNumber) extends SharedEncodingTheta2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigFontWeight (UnionType)

sealed trait TitleConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecSpec (UnionType)
/**
 * A specification of the view that gets faceted.
 **/
sealed trait FacetSpecSpec 
   // LayerSpec is defined elsewhere
   // FacetedUnitSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalMarkPropFieldOrDatumDefTypeForShape (UnionType)

sealed trait ConditionalMarkPropFieldOrDatumDefTypeForShape extends SharedEncodingShapeCondition with ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNullCondition
   // ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape is defined elsewhere
   // ConditionalParameterMarkPropFieldOrDatumDefTypeForShape is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class ViewBackgroundFillOpacityAsNumber(value: JsNumber) extends ViewBackgroundFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingYErrorBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingYErrorBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LegendConfigZindexAsNumber (ConstrainedType)
/**
 * The integer z-index indicating the layering of the legend group relative to other axis, mark, and legend groups.
 **/
case class LegendConfigZindexAsNumber(value: JsNumber) extends LegendConfigZindex
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RepeatSpec (UnionType)

sealed trait RepeatSpec extends NonNormalizedSpec with Spec
   // NonLayerRepeatSpec is defined elsewhere
   // LayerRepeatSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// JoinAggregateTransform (StructType)

case class JoinAggregateTransform(
  /**
   * The data fields for partitioning the data objects into separate groups. If unspecified, all data points will be in a single group.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * The definition of the fields in the join aggregate, and what calculations to use.
   **/
  var `joinaggregate` : Seq[JoinAggregateFieldDef]
) extends Transform 
{  }
object JoinAggregateTransform {
  val definedFields = Set("groupby", "joinaggregate") 
}

////////////////////////////////////////////////////////////////////////

// Spec (UnionType)
/**
 * Any specification in Vega-Lite.
 **/
sealed trait Spec 
   // FacetSpec is defined elsewhere
   // LayerSpec is defined elsewhere
   // HConcatSpecGenericSpec is defined elsewhere
   // FacetedUnitSpec is defined elsewhere
   // ConcatSpecGenericSpec is defined elsewhere
   // RepeatSpec is defined elsewhere
   // VConcatSpecGenericSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait BarConfigInnerRadius 
   case class BarConfigInnerRadiusAsNumber(value: JsNumber) extends BarConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait SharedEncodingHrefFormat 
   case class SharedEncodingHrefFormatAsString(value: String) extends SharedEncodingHrefFormat
   case class SharedEncodingHrefFormatAsDictOfAny(value: Map[String,JsValue]) extends SharedEncodingHrefFormat

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingFillOpacityType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigDir (UnionType)

sealed trait RectConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingFillType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleInterpolateParamsType (EnumType)

sealed trait ScaleInterpolateParamsType  { val payload: JsValue }
   case object ScaleInterpolateParamsTypeRgb extends ScaleInterpolateParamsType { val payload = JsString("rgb") }
   case object ScaleInterpolateParamsTypeCubehelix extends ScaleInterpolateParamsType { val payload = JsString("cubehelix") }
   case object ScaleInterpolateParamsTypeCubehelixLong extends ScaleInterpolateParamsType { val payload = JsString("cubehelix-long") }

////////////////////////////////////////////////////////////////////////

// BinParamsMaxbins (ConstrainedType)
/**
 * Maximum number of bins.
 * 
 * __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels
 **/
case class BinParamsMaxbins(value: JsNumber) 
{ assert(value.value >= 2) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingAngleDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowFieldDefOp (UnionType)
/**
 * The window or aggregation operation to apply within a window (e.g., `"rank"`, `"lead"`, `"sum"`, `"average"` or `"count"`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops).
 **/
sealed trait WindowFieldDefOp 
   // AggregateOp is defined elsewhere
   // WindowOnlyOp is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeWidth (UnionType)

sealed trait MarkDefStrokeWidth 
   // MarkDefStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsFont (UnionType)

sealed trait TitleParamsFont 
   case class TitleParamsFontAsString(value: String) extends TitleParamsFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DateTimeDate (ConstrainedType)
/**
 * Integer value representing the date (day of the month) from 1-31.
 **/
case class DateTimeDate(value: JsNumber) 
{ assert(value.value <= 31)
  assert(value.value >= 1) }

////////////////////////////////////////////////////////////////////////

// AxisTickCount (ConstrainedType)
/**
 * A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale's range.
 * 
 * For scales of type `"time"` or `"utc"`, the tick count can instead be a time interval specifier. Legal string values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, an object-valued interval specifier of the form `{"interval": "month", "step": 3}` includes a desired number of interval steps. Here, ticks are generated for each quarter (Jan, Apr, Jul, Oct) boundary.
 * 
 * __Default value__: Determine using a formula `ceil(width/40)` for x and `ceil(height/40)` for y.
 **/
sealed trait AxisTickCount 
   case class AxisTickCountAsNumber(value: JsNumber) extends AxisTickCount
   // TimeInterval is defined elsewhere
   // TimeIntervalStep is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait AreaConfigTheta2 
   case class AreaConfigTheta2AsNumber(value: JsNumber) extends AreaConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject1BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalPredicateMarkPropFieldOrDatumDefAsObject1BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigOn (UnionType)
/**
 * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection. For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
 * 
 * __See also:__ [`on` examples](https://vega.github.io/vega-lite/docs/selection.html#on) in the documentation.
 **/
sealed trait PointSelectionConfigOn 
   // Stream is defined elsewhere
   case class PointSelectionConfigOnAsString(value: String) extends PointSelectionConfigOn

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalPredicateMarkPropFieldOrDatumDefAsObject2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// Vector2Number (ConstrainedType)

case class Vector2Number(value: Seq[JsNumber]) extends ProjectionTranslate with ProjectionSize with ProjectionConfigRotate with ProjectionCenter with SelectionInitInterval with ProjectionConfigCenter with ProjectionConfigSize with ProjectionConfigTranslate with ProjectionRotate
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelLineHeight (UnionType)

sealed trait AxisConfigLabelLineHeight 
   case class AxisConfigLabelLineHeightAsNumber(value: JsNumber) extends AxisConfigLabelLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigTitlePadding (UnionType)

sealed trait LegendConfigTitlePadding 
   case class LegendConfigTitlePaddingAsNumber(value: JsNumber) extends LegendConfigTitlePadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BindCheckboxInput (ConstantType)

case class BindCheckboxInput() 

////////////////////////////////////////////////////////////////////////

// BinTransformAs (UnionType)
/**
 * The output fields at which to write the start and end bin values. This can be either a string or an array of strings with two elements denoting the name for the fields for bin start and bin end respectively. If a single string (e.g., `"val"`) is provided, the end field will be `"val_end"`.
 **/
sealed trait BinTransformAs 
   case class BinTransformAsAsString(value: String) extends BinTransformAs
   case class BinTransformAsAsArrayOfString(value: Seq[String]) extends BinTransformAs

////////////////////////////////////////////////////////////////////////

// FacetedEncodingDetail (UnionType)
/**
 * Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel.
 **/
sealed trait FacetedEncodingDetail 
   // FieldDefWithoutScale is defined elsewhere
   case class FacetedEncodingDetailAsArrayOfFieldDefWithoutScale(value: Seq[FieldDefWithoutScale]) extends FacetedEncodingDetail

////////////////////////////////////////////////////////////////////////

// LineConfigBlend (UnionType)

sealed trait LineConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingOpacityCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingOpacityConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingOpacityCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Vector2Vector2Number (ConstrainedType)
/**
 * The projection's viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.
 **/
case class Vector2Vector2Number(value: Seq[Vector2Number]) extends ProjectionConfigClipExtent with ProjectionClipExtent with ProjectionExtent with ProjectionConfigExtent
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// LinearGradient (StructType)

case class LinearGradient(
  /**
   * The type of gradient. Use `"linear"` for a linear gradient.
   **/
  var `gradient` : LinearGradientGradient,
  /**
   * The ending x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
   * 
   * __Default value:__ `1`
   **/
  var `x2` : Option[JsNumber] = None,
  var `id` : Option[String] = None,
  /**
   * The starting y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
   * 
   * __Default value:__ `0`
   **/
  var `y1` : Option[JsNumber] = None,
  /**
   * An array of gradient stops defining the gradient color sequence.
   **/
  var `stops` : Seq[GradientStop],
  /**
   * The ending y-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
   * 
   * __Default value:__ `0`
   **/
  var `y2` : Option[JsNumber] = None,
  /**
   * The starting x-coordinate, in normalized [0, 1] coordinates, of the linear gradient.
   * 
   * __Default value:__ `0`
   **/
  var `x1` : Option[JsNumber] = None
) extends Gradient 
{  }
object LinearGradient {
  val definedFields = Set("y1", "gradient", "id", "y2", "stops", "x2", "x1") 
}

////////////////////////////////////////////////////////////////////////

// BarConfig (StructType)
/**
 * Bar-Specific Config
 **/
case class BarConfig(
  /**
   * The default size of the bars on continuous scales.
   * 
   * __Default value:__ `5`
   **/
  var `continuousBandSize` : Option[BarConfigContinuousBandSize] = None,
  var `cornerRadiusBottomRight` : Option[BarConfigCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[BarConfigFillOpacity] = None,
  var `strokeMiterLimit` : Option[BarConfigStrokeMiterLimit] = None,
  var `dir` : Option[BarConfigDir] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[BarConfigTooltip] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  var `cornerRadiusTopRight` : Option[BarConfigCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[BarConfigOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[BarConfigX] = None,
  var `dy` : Option[BarConfigDy] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[BarConfigSize] = None,
  var `smooth` : Option[BarConfigSmooth] = None,
  var `url` : Option[BarConfigUrl] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[BarConfigY] = None,
  var `strokeOpacity` : Option[BarConfigStrokeOpacity] = None,
  var `ellipsis` : Option[BarConfigEllipsis] = None,
  var `description` : Option[BarConfigDescription] = None,
  var `angle` : Option[BarConfigAngle] = None,
  var `lineBreak` : Option[BarConfigLineBreak] = None,
  var `tension` : Option[BarConfigTension] = None,
  var `cornerRadiusTopLeft` : Option[BarConfigCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[BarConfigStroke] = None,
  var `strokeDashOffset` : Option[BarConfigStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[BarConfigAlign] = None,
  var `ariaRole` : Option[BarConfigAriaRole] = None,
  var `strokeCap` : Option[BarConfigStrokeCap] = None,
  var `endAngle` : Option[BarConfigEndAngle] = None,
  var `strokeJoin` : Option[BarConfigStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[BarConfigBaseline] = None,
  var `ariaRoleDescription` : Option[BarConfigAriaRoleDescription] = None,
  var `aspect` : Option[BarConfigAspect] = None,
  var `height` : Option[BarConfigHeight] = None,
  var `fontStyle` : Option[BarConfigFontStyle] = None,
  var `text` : Option[BarConfigText] = None,
  /**
   * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
   * 
   * __Default value:__ `1`
   **/
  var `binSpacing` : Option[BarConfigBinSpacing] = None,
  var `cornerRadius` : Option[BarConfigCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[BarConfigColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[BarConfigX2] = None,
  var `padAngle` : Option[BarConfigPadAngle] = None,
  var `cursor` : Option[BarConfigCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[BarConfigRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[BarConfigStartAngle] = None,
  var `font` : Option[BarConfigFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[BarConfigRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[BarConfigInvalid] = None,
  var `lineHeight` : Option[BarConfigLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[BarConfigOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[BarConfigFill] = None,
  var `interpolate` : Option[BarConfigInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[BarConfigTheta] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[BarConfigInnerRadius] = None,
  var `fontSize` : Option[BarConfigFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[BarConfigY2] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
   **/
  var `discreteBandSize` : Option[BarConfigDiscreteBandSize] = None,
  var `shape` : Option[BarConfigShape] = None,
  var `aria` : Option[BarConfigAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[BarConfigOpacity] = None,
  var `dx` : Option[BarConfigDx] = None,
  /**
   * - For vertical bars, top-left and top-right corner radius.
   * 
   * - For horizontal bars, top-right and bottom-right corner radius.
   **/
  var `cornerRadiusEnd` : Option[BarConfigCornerRadiusEnd] = None,
  var `cornerRadiusBottomLeft` : Option[BarConfigCornerRadiusBottomLeft] = None,
  var `href` : Option[BarConfigHref] = None,
  var `strokeDash` : Option[BarConfigStrokeDash] = None,
  var `strokeOffset` : Option[BarConfigStrokeOffset] = None,
  var `limit` : Option[BarConfigLimit] = None,
  var `width` : Option[BarConfigWidth] = None,
  var `fontWeight` : Option[BarConfigFontWeight] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[BarConfigBlend] = None,
  var `strokeWidth` : Option[BarConfigStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[BarConfigTheta2] = None
) extends AnyMarkConfig 
{  }
object BarConfig {
  val definedFields = Set("padAngle", "strokeDashOffset", "ariaRole", "strokeOffset", "cornerRadiusBottomLeft", "dy", "dir", "startAngle", "ellipsis", "tension", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "cornerRadiusEnd", "endAngle", "outerRadius", "url", "strokeCap", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "cornerRadiusTopRight", "strokeOpacity", "description", "radius2", "order", "dx", "cornerRadiusBottomRight", "width", "cursor", "blend", "height", "theta2", "continuousBandSize", "orient", "baseline", "align", "stroke", "discreteBandSize", "shape", "lineHeight", "interpolate", "binSpacing", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleLineHeight (UnionType)

sealed trait AxisConfigTitleLineHeight 
   case class AxisConfigTitleLineHeightAsNumber(value: JsNumber) extends AxisConfigTitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DsvDataFormat (StructType)

case class DsvDataFormat(
  /**
   * The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.
   **/
  var `delimiter` : String,
  /**
   * If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)). For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
   * 
   * For `"date"`, we parse data based using JavaScript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: "date:'%m%d%Y'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:'%m%d%Y'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)
   **/
  var `parse` : Option[Map[String,ParseValue]] = None,
  /**
   * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
   * 
   * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
   **/
  var `type` : Option[DsvDataFormatType] = None
) extends DataFormat 
{  }
object DsvDataFormat {
  val definedFields = Set("delimiter", "parse", "type") 
}

////////////////////////////////////////////////////////////////////////

// TickConfigTension (UnionType)

sealed trait TickConfigTension 
   case class TickConfigTensionAsNumber(value: JsNumber) extends TickConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDef (StructType)

case class PositionDatumDef(
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[PositionDatumDefBandPosition] = None,
  /**
   * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
   * 
   * `stack` can be one of the following values:
   * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
   * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
   * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
   * 
   * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
   * 
   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
   **/
  var `stack` : Option[PositionDatumDefStack] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[PositionDatumDefDatum] = None,
  /**
   * An object defining the properties of the Impute Operation to be applied. The field value of the other positional channel is taken as `key` of the `Impute` Operation. The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.
   * 
   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.
   **/
  var `impute` : Option[ImputeParams] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * An object defining properties of axis's gridlines, ticks and labels. If `null`, the axis for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.
   * 
   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.
   **/
  var `axis` : Option[Axis] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends PositionDef 
{  }
object PositionDatumDef {
  val definedFields = Set("type", "scale", "datum", "bandPosition", "stack", "title", "impute", "axis") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsFontSizeAsNumber (ConstrainedType)
/**
 * Font size in pixels for title text.
 **/
case class TitleParamsFontSizeAsNumber(value: JsNumber) extends TitleParamsFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingYStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait SharedEncodingYStack 
   // StackOffset is defined elsewhere
   case object SharedEncodingYStackAsNull extends SharedEncodingYStack
   case class SharedEncodingYStackAsBool(value: Boolean) extends SharedEncodingYStack

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCornerRadiusTopRight (UnionType)

sealed trait OverlayMarkDefCornerRadiusTopRight 
   case class OverlayMarkDefCornerRadiusTopRightAsNumber(value: JsNumber) extends OverlayMarkDefCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DsvDataFormatType (ConstantType)
/**
 * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
 * 
 * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
 **/
case class DsvDataFormatType() 

////////////////////////////////////////////////////////////////////////

// HeaderLabelPadding (UnionType)
/**
 * The padding, in pixel, between facet header's label and the plot.
 * 
 * __Default value:__ `10`
 **/
sealed trait HeaderLabelPadding 
   case class HeaderLabelPaddingAsNumber(value: JsNumber) extends HeaderLabelPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpec (UnionType)

sealed trait TopLevelRepeatSpec extends TopLevelSpec
   // TopLevelRepeatSpecAsObject1 is defined elsewhere
   // TopLevelRepeatSpecAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigDiscreteHeightAsObject2 (StructType)

case class ViewConfigDiscreteHeightAsObject2(
  var `step` : JsNumber
) extends ViewConfigDiscreteHeight 
{  }
object ViewConfigDiscreteHeightAsObject2 {
  val definedFields = Set("step") 
}

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithConditionTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait StringFieldDefWithConditionTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigDomainDash (UnionType)

sealed trait AxisConfigDomainDash 
   case class AxisConfigDomainDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisConfigDomainDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeDashOffset (UnionType)

sealed trait MarkConfigStrokeDashOffset 
   case class MarkConfigStrokeDashOffsetAsNumber(value: JsNumber) extends MarkConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigDx (UnionType)

sealed trait RectConfigDx 
   case class RectConfigDxAsNumber(value: JsNumber) extends RectConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeMiterLimit (UnionType)

sealed trait ViewBackgroundStrokeMiterLimit 
   case class ViewBackgroundStrokeMiterLimitAsNumber(value: JsNumber) extends ViewBackgroundStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberArrayAsObject2Condition (UnionType)

sealed trait ConditionalAxisNumberArrayAsObject2Condition 
   // ConditionalPredicateValueDefNumberNullExprRef is defined elsewhere
   case class ConditionalAxisNumberArrayAsObject2ConditionAsArrayOfConditionalPredicateValueDefNumberNullExprRef(value: Seq[ConditionalPredicateValueDefNumberNullExprRef]) extends ConditionalAxisNumberArrayAsObject2Condition

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDef (UnionType)

sealed trait ConditionalParameterMarkPropFieldOrDatumDef extends ConditionalMarkPropFieldOrDatumDef
   // ConditionalParameterMarkPropFieldOrDatumDefAsObject1 is defined elsewhere
   // ConditionalParameterMarkPropFieldOrDatumDefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigDy (UnionType)

sealed trait RectConfigDy 
   case class RectConfigDyAsNumber(value: JsNumber) extends RectConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeDashOffset (UnionType)

sealed trait LineConfigStrokeDashOffset 
   case class LineConfigStrokeDashOffsetAsNumber(value: JsNumber) extends LineConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionValueDef (StructType)
/**
 * Definition object for a constant value (primitive value or gradient definition) of an encoding channel.
 **/
case class PositionValueDef(
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : PositionValueDefValue
) extends PositionDef with Position2Def with PolarDef 
{  }
object PositionValueDef {
  val definedFields = Set("value") 
}

////////////////////////////////////////////////////////////////////////

// LayerSpecWidth (UnionType)
/**
 * The width of a visualization.
 * 
 * - For a plot with a continuous x-field, width should be a number.
 * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on width, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait LayerSpecWidth 
   case class LayerSpecWidthAsNumber(value: JsNumber) extends LayerSpecWidth
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelFont (UnionType)
/**
 * The font of the header label.
 **/
sealed trait HeaderConfigLabelFont 
   case class HeaderConfigLabelFontAsString(value: String) extends HeaderConfigLabelFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait FacetSpecSpacing 
   case class FacetSpecSpacingAsNumber(value: JsNumber) extends FacetSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigWithoutTypeClear (UnionType)
/**
 * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
 * 
 * __Default value:__ `dblclick`.
 * 
 * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
 **/
sealed trait PointSelectionConfigWithoutTypeClear 
   // Stream is defined elsewhere
   case class PointSelectionConfigWithoutTypeClearAsString(value: String) extends PointSelectionConfigWithoutTypeClear
   case class PointSelectionConfigWithoutTypeClearAsBool(value: Boolean) extends PointSelectionConfigWithoutTypeClear

////////////////////////////////////////////////////////////////////////

// MarkDefHref (UnionType)

sealed trait MarkDefHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitudeDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingLatitudeDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DensityTransformAs (ConstrainedType)
/**
 * The output fields for the sample value and corresponding density estimate.
 * 
 * __Default value:__ `["value", "density"]`
 **/
case class DensityTransformAs(value: Seq[String]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// TickConfigSmooth (UnionType)

sealed trait TickConfigSmooth 
   case class TickConfigSmoothAsBool(value: Boolean) extends TickConfigSmooth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigWithoutTypeToggle (UnionType)

sealed trait PointSelectionConfigWithoutTypeToggle 
   case class PointSelectionConfigWithoutTypeToggleAsString(value: String) extends PointSelectionConfigWithoutTypeToggle
   case class PointSelectionConfigWithoutTypeToggleAsBool(value: Boolean) extends PointSelectionConfigWithoutTypeToggle

////////////////////////////////////////////////////////////////////////

// TickConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait TickConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object TickConfigStrokeAsNull extends TickConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PredicateComposition (UnionType)
/**
 * Predicate for triggering the condition
 **/
sealed trait PredicateComposition 
   // LogicalNotPredicate is defined elsewhere
   // LogicalAndPredicate is defined elsewhere
   // LogicalOrPredicate is defined elsewhere
   // Predicate is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigStroke (UnionType)
/**
 * The stroke color.
 * 
 * __Default value:__ `"#ddd"`
 **/
sealed trait ViewConfigStroke 
   // Color is defined elsewhere
   case object ViewConfigStrokeAsNull extends ViewConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigLineBreak (UnionType)

sealed trait MarkConfigLineBreak 
   case class MarkConfigLineBreakAsString(value: String) extends MarkConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleDomainAsArrayElement (UnionType)

sealed trait ScaleDomainAsArrayElement 
   case class ScaleDomainAsArrayElementAsString(value: String) extends ScaleDomainAsArrayElement
   case object ScaleDomainAsArrayElementAsNull extends ScaleDomainAsArrayElement
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   case class ScaleDomainAsArrayElementAsBool(value: Boolean) extends ScaleDomainAsArrayElement
   case class ScaleDomainAsArrayElementAsNumber(value: JsNumber) extends ScaleDomainAsArrayElement

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class ViewBackgroundStrokeWidthAsNumber(value: JsNumber) extends ViewBackgroundStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingDescriptionBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalPredicateValueDefStringExprRefValue 
   case class ConditionalPredicateValueDefStringExprRefValueAsString(value: String) extends ConditionalPredicateValueDefStringExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigCornerRadiusTopLeft (UnionType)

sealed trait MarkConfigCornerRadiusTopLeft 
   case class MarkConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends MarkConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class StringFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// Aggregate (UnionType)
/**
 * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
 **/
sealed trait Aggregate 
   // NonArgAggregateOp is defined elsewhere
   // ArgmaxDef is defined elsewhere
   // ArgminDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowTransformFrameElement (UnionType)

sealed trait WindowTransformFrameElement 
   case object WindowTransformFrameElementAsNull extends WindowTransformFrameElement
   case class WindowTransformFrameElementAsNumber(value: JsNumber) extends WindowTransformFrameElement

////////////////////////////////////////////////////////////////////////

// RectConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait RectConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius2Value (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingRadius2Value 
   case class SharedEncodingRadius2ValueAsNumber(value: JsNumber) extends SharedEncodingRadius2Value
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait MarkDefSize 
   case class MarkDefSizeAsNumber(value: JsNumber) extends MarkDefSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeSequence (StructType)

case class ImputeSequence(
  /**
   * The starting value of the sequence. __Default value:__ `0`
   **/
  var `start` : Option[JsNumber] = None,
  /**
   * The step value between sequence entries. __Default value:__ `1` or `-1` if `stop < start`
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * The ending value(exclusive) of the sequence.
   **/
  var `stop` : JsNumber
) extends ImputeParamsKeyvals with ImputeTransformKeyvals 
{  }
object ImputeSequence {
  val definedFields = Set("start", "step", "stop") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefStringNullExprRefAsObject1Value (UnionType)

sealed trait ConditionalPredicateValueDefStringNullExprRefAsObject1Value 
   case class ConditionalPredicateValueDefStringNullExprRefAsObject1ValueAsString(value: String) extends ConditionalPredicateValueDefStringNullExprRefAsObject1Value
   case object ConditionalPredicateValueDefStringNullExprRefAsObject1ValueAsNull extends ConditionalPredicateValueDefStringNullExprRefAsObject1Value

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingRadius2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefNumber (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionMarkPropFieldDefNumber(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefNumberBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefNumberCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FieldOrDatumDefWithConditionMarkPropFieldDefNumberTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends NumericArrayMarkPropDef with NumericMarkPropDef 
{  }
object FieldOrDatumDefWithConditionMarkPropFieldDefNumber {
  val definedFields = Set("bin", "type", "bandPosition", "legend", "condition", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStyle (UnionType)
/**
 * A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.
 * 
 * __Default value:__ `"cell"` __Note:__ Any specified view background properties will augment the default style.
 **/
sealed trait ViewBackgroundStyle 
   case class ViewBackgroundStyleAsString(value: String) extends ViewBackgroundStyle
   case class ViewBackgroundStyleAsArrayOfString(value: Seq[String]) extends ViewBackgroundStyle

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeWidth (UnionType)

sealed trait AreaConfigStrokeWidth 
   // AreaConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMinStrokeWidth (ConstrainedType)
/**
 * Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.
 * 
 * __Default value:__ `1`
 **/
case class ScaleConfigMinStrokeWidth(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TopLevelSelectionParameter (StructType)

case class TopLevelSelectionParameter(
  /**
   * Required. A unique name for the selection parameter. Selection names should be valid JavaScript identifiers: they should contain only alphanumeric characters (or "$", or "_") and may not start with a digit. Reserved keywords that may not be used as parameter names are "datum", "event", "item", and "parent".
   **/
  var `name` : String,
  /**
   * When set, a selection is populated by input elements (also known as dynamic query widgets) or by interacting with the corresponding legend. Direct manipulation interaction is disabled by default; to re-enable it, set the selection's [`on`](https://vega.github.io/vega-lite/docs/selection.html#common-selection-properties) property.
   * 
   * Legend bindings are restricted to selections that only specify a single field or encoding.
   * 
   * Query widget binding takes the form of Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind) or can be a mapping between projected field/encodings and binding definitions.
   * 
   * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.
   **/
  var `bind` : Option[TopLevelSelectionParameterBind] = None,
  /**
   * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
   * 
   * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
   * - `"interval"` -- to select a continuous range of data values on `drag`.
   **/
  var `select` : TopLevelSelectionParameterSelect,
  /**
   * By default, top-level selections are applied to every view in the visualization. If this property is specified, selections will only be applied to views with the given names.
   **/
  var `views` : Option[Seq[TopLevelSelectionParameterViewsElement]] = None,
  /**
   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/selection.html#project) and initial values.
   * 
   * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/value.html) documentation.
   **/
  var `value` : Option[TopLevelSelectionParameterValue] = None
) extends TopLevelLayerSpecParamsElement with TopLevelConcatSpecParamsElement with ConfigParamsElement with TopLevelHConcatSpecParamsElement with TopLevelFacetSpecParamsElement with TopLevelVConcatSpecParamsElement with TopLevelRepeatSpecAsObject1ParamsElement with TopLevelRepeatSpecAsObject2ParamsElement 
{  }
object TopLevelSelectionParameter {
  val definedFields = Set("name", "bind", "views", "value", "select") 
}

////////////////////////////////////////////////////////////////////////

// LayerSpecHeight (UnionType)
/**
 * The height of a visualization.
 * 
 * - For a plot with a continuous y-field, height should be a number.
 * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on height, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait LayerSpecHeight 
   case class LayerSpecHeightAsNumber(value: JsNumber) extends LayerSpecHeight
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait MarkDefColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject1 (StructType)

case class ConditionalParameterMarkPropFieldOrDatumDefAsObject1(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalParameterMarkPropFieldOrDatumDefAsObject1BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[ConditionalParameterMarkPropFieldOrDatumDefAsObject1TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends ConditionalParameterMarkPropFieldOrDatumDef 
{  }
object ConditionalParameterMarkPropFieldOrDatumDefAsObject1 {
  val definedFields = Set("bin", "type", "bandPosition", "param", "legend", "empty", "aggregate", "title", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefAsObject2 (StructType)

case class ConditionalParameterMarkPropFieldOrDatumDefAsObject2(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[ConditionalParameterMarkPropFieldOrDatumDefAsObject2BandPosition] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends ConditionalParameterMarkPropFieldOrDatumDef 
{  }
object ConditionalParameterMarkPropFieldOrDatumDefAsObject2 {
  val definedFields = Set("type", "scale", "datum", "bandPosition", "param", "legend", "empty", "title") 
}

////////////////////////////////////////////////////////////////////////

// MarkDefLine (UnionType)
/**
 * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.
 * 
 * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.
 * 
 * - If this value is `false`, no lines would be automatically added to area marks.
 * 
 * __Default value:__ `false`.
 **/
sealed trait MarkDefLine 
   case class MarkDefLineAsBool(value: Boolean) extends MarkDefLine
   // OverlayMarkDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXError2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingXError2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigFillOpacityAsNumber (ConstrainedType)
/**
 * The fill opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class AreaConfigFillOpacityAsNumber(value: JsNumber) extends AreaConfigFillOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ParameterPredicate (StructType)

case class ParameterPredicate(
  /**
   * For selection parameters, the predicate of empty selections returns true by default. Override this behavior, by setting this property `empty: false`.
   **/
  var `empty` : Option[Boolean] = None,
  /**
   * Filter using a parameter name.
   **/
  var `param` : String
) extends Predicate 
{  }
object ParameterPredicate {
  val definedFields = Set("empty", "param") 
}

////////////////////////////////////////////////////////////////////////

// LookupTransformAs (UnionType)
/**
 * The output fields on which to store the looked up data values.
 * 
 * For data lookups, this property may be left blank if `from.fields` has been specified (those field names will be used); if `from.fields` has not been specified, `as` must be a string.
 * 
 * For selection lookups, this property is optional: if unspecified, looked up values will be stored under a property named for the selection; and if specified, it must correspond to `from.fields`.
 **/
sealed trait LookupTransformAs 
   case class LookupTransformAsAsString(value: String) extends LookupTransformAs
   case class LookupTransformAsAsArrayOfString(value: Seq[String]) extends LookupTransformAs

////////////////////////////////////////////////////////////////////////

// GraticuleParams (StructType)

case class GraticuleParams(
  /**
   * Sets both the major and minor extents to the same values.
   **/
  var `extent` : Option[Vector2Vector2Number] = None,
  /**
   * The major extent of the graticule as a two-element array of coordinates.
   **/
  var `extentMajor` : Option[Vector2Vector2Number] = None,
  /**
   * The major step angles of the graticule.
   * 
   * 
   * __Default value:__ `[90, 360]`
   **/
  var `stepMajor` : Option[Vector2Number] = None,
  /**
   * The minor extent of the graticule as a two-element array of coordinates.
   **/
  var `extentMinor` : Option[Vector2Vector2Number] = None,
  /**
   * The minor step angles of the graticule.
   * 
   * __Default value:__ `[10, 10]`
   **/
  var `stepMinor` : Option[Vector2Number] = None,
  /**
   * The precision of the graticule in degrees.
   * 
   * __Default value:__ `2.5`
   **/
  var `precision` : Option[JsNumber] = None,
  /**
   * Sets both the major and minor step angles to the same values.
   **/
  var `step` : Option[Vector2Number] = None
) extends GraticuleGeneratorGraticule 
{  }
object GraticuleParams {
  val definedFields = Set("stepMajor", "step", "extent", "stepMinor", "extentMinor", "precision", "extentMajor") 
}

////////////////////////////////////////////////////////////////////////

// AxisTitleBaseline (UnionType)

sealed trait AxisTitleBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelFontSize (UnionType)

sealed trait AxisLabelFontSize 
   // AxisLabelFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigStrokeWidth (UnionType)

sealed trait LegendConfigStrokeWidth 
   case class LegendConfigStrokeWidthAsNumber(value: JsNumber) extends LegendConfigStrokeWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SequentialMultiHue (EnumType)

sealed trait SequentialMultiHue extends ColorScheme { val payload: JsValue }
   case object SequentialMultiHueTurbo extends SequentialMultiHue { val payload = JsString("turbo") }
   case object SequentialMultiHueViridis extends SequentialMultiHue { val payload = JsString("viridis") }
   case object SequentialMultiHueInferno extends SequentialMultiHue { val payload = JsString("inferno") }
   case object SequentialMultiHueMagma extends SequentialMultiHue { val payload = JsString("magma") }
   case object SequentialMultiHuePlasma extends SequentialMultiHue { val payload = JsString("plasma") }
   case object SequentialMultiHueCividis extends SequentialMultiHue { val payload = JsString("cividis") }
   case object SequentialMultiHueBluegreen extends SequentialMultiHue { val payload = JsString("bluegreen") }
   case object SequentialMultiHueBluegreen3 extends SequentialMultiHue { val payload = JsString("bluegreen-3") }
   case object SequentialMultiHueBluegreen4 extends SequentialMultiHue { val payload = JsString("bluegreen-4") }
   case object SequentialMultiHueBluegreen5 extends SequentialMultiHue { val payload = JsString("bluegreen-5") }
   case object SequentialMultiHueBluegreen6 extends SequentialMultiHue { val payload = JsString("bluegreen-6") }
   case object SequentialMultiHueBluegreen7 extends SequentialMultiHue { val payload = JsString("bluegreen-7") }
   case object SequentialMultiHueBluegreen8 extends SequentialMultiHue { val payload = JsString("bluegreen-8") }
   case object SequentialMultiHueBluegreen9 extends SequentialMultiHue { val payload = JsString("bluegreen-9") }
   case object SequentialMultiHueBluepurple extends SequentialMultiHue { val payload = JsString("bluepurple") }
   case object SequentialMultiHueBluepurple3 extends SequentialMultiHue { val payload = JsString("bluepurple-3") }
   case object SequentialMultiHueBluepurple4 extends SequentialMultiHue { val payload = JsString("bluepurple-4") }
   case object SequentialMultiHueBluepurple5 extends SequentialMultiHue { val payload = JsString("bluepurple-5") }
   case object SequentialMultiHueBluepurple6 extends SequentialMultiHue { val payload = JsString("bluepurple-6") }
   case object SequentialMultiHueBluepurple7 extends SequentialMultiHue { val payload = JsString("bluepurple-7") }
   case object SequentialMultiHueBluepurple8 extends SequentialMultiHue { val payload = JsString("bluepurple-8") }
   case object SequentialMultiHueBluepurple9 extends SequentialMultiHue { val payload = JsString("bluepurple-9") }
   case object SequentialMultiHueGoldgreen extends SequentialMultiHue { val payload = JsString("goldgreen") }
   case object SequentialMultiHueGoldgreen3 extends SequentialMultiHue { val payload = JsString("goldgreen-3") }
   case object SequentialMultiHueGoldgreen4 extends SequentialMultiHue { val payload = JsString("goldgreen-4") }
   case object SequentialMultiHueGoldgreen5 extends SequentialMultiHue { val payload = JsString("goldgreen-5") }
   case object SequentialMultiHueGoldgreen6 extends SequentialMultiHue { val payload = JsString("goldgreen-6") }
   case object SequentialMultiHueGoldgreen7 extends SequentialMultiHue { val payload = JsString("goldgreen-7") }
   case object SequentialMultiHueGoldgreen8 extends SequentialMultiHue { val payload = JsString("goldgreen-8") }
   case object SequentialMultiHueGoldgreen9 extends SequentialMultiHue { val payload = JsString("goldgreen-9") }
   case object SequentialMultiHueGoldorange extends SequentialMultiHue { val payload = JsString("goldorange") }
   case object SequentialMultiHueGoldorange3 extends SequentialMultiHue { val payload = JsString("goldorange-3") }
   case object SequentialMultiHueGoldorange4 extends SequentialMultiHue { val payload = JsString("goldorange-4") }
   case object SequentialMultiHueGoldorange5 extends SequentialMultiHue { val payload = JsString("goldorange-5") }
   case object SequentialMultiHueGoldorange6 extends SequentialMultiHue { val payload = JsString("goldorange-6") }
   case object SequentialMultiHueGoldorange7 extends SequentialMultiHue { val payload = JsString("goldorange-7") }
   case object SequentialMultiHueGoldorange8 extends SequentialMultiHue { val payload = JsString("goldorange-8") }
   case object SequentialMultiHueGoldorange9 extends SequentialMultiHue { val payload = JsString("goldorange-9") }
   case object SequentialMultiHueGoldred extends SequentialMultiHue { val payload = JsString("goldred") }
   case object SequentialMultiHueGoldred3 extends SequentialMultiHue { val payload = JsString("goldred-3") }
   case object SequentialMultiHueGoldred4 extends SequentialMultiHue { val payload = JsString("goldred-4") }
   case object SequentialMultiHueGoldred5 extends SequentialMultiHue { val payload = JsString("goldred-5") }
   case object SequentialMultiHueGoldred6 extends SequentialMultiHue { val payload = JsString("goldred-6") }
   case object SequentialMultiHueGoldred7 extends SequentialMultiHue { val payload = JsString("goldred-7") }
   case object SequentialMultiHueGoldred8 extends SequentialMultiHue { val payload = JsString("goldred-8") }
   case object SequentialMultiHueGoldred9 extends SequentialMultiHue { val payload = JsString("goldred-9") }
   case object SequentialMultiHueGreenblue extends SequentialMultiHue { val payload = JsString("greenblue") }
   case object SequentialMultiHueGreenblue3 extends SequentialMultiHue { val payload = JsString("greenblue-3") }
   case object SequentialMultiHueGreenblue4 extends SequentialMultiHue { val payload = JsString("greenblue-4") }
   case object SequentialMultiHueGreenblue5 extends SequentialMultiHue { val payload = JsString("greenblue-5") }
   case object SequentialMultiHueGreenblue6 extends SequentialMultiHue { val payload = JsString("greenblue-6") }
   case object SequentialMultiHueGreenblue7 extends SequentialMultiHue { val payload = JsString("greenblue-7") }
   case object SequentialMultiHueGreenblue8 extends SequentialMultiHue { val payload = JsString("greenblue-8") }
   case object SequentialMultiHueGreenblue9 extends SequentialMultiHue { val payload = JsString("greenblue-9") }
   case object SequentialMultiHueOrangered extends SequentialMultiHue { val payload = JsString("orangered") }
   case object SequentialMultiHueOrangered3 extends SequentialMultiHue { val payload = JsString("orangered-3") }
   case object SequentialMultiHueOrangered4 extends SequentialMultiHue { val payload = JsString("orangered-4") }
   case object SequentialMultiHueOrangered5 extends SequentialMultiHue { val payload = JsString("orangered-5") }
   case object SequentialMultiHueOrangered6 extends SequentialMultiHue { val payload = JsString("orangered-6") }
   case object SequentialMultiHueOrangered7 extends SequentialMultiHue { val payload = JsString("orangered-7") }
   case object SequentialMultiHueOrangered8 extends SequentialMultiHue { val payload = JsString("orangered-8") }
   case object SequentialMultiHueOrangered9 extends SequentialMultiHue { val payload = JsString("orangered-9") }
   case object SequentialMultiHuePurplebluegreen extends SequentialMultiHue { val payload = JsString("purplebluegreen") }
   case object SequentialMultiHuePurplebluegreen3 extends SequentialMultiHue { val payload = JsString("purplebluegreen-3") }
   case object SequentialMultiHuePurplebluegreen4 extends SequentialMultiHue { val payload = JsString("purplebluegreen-4") }
   case object SequentialMultiHuePurplebluegreen5 extends SequentialMultiHue { val payload = JsString("purplebluegreen-5") }
   case object SequentialMultiHuePurplebluegreen6 extends SequentialMultiHue { val payload = JsString("purplebluegreen-6") }
   case object SequentialMultiHuePurplebluegreen7 extends SequentialMultiHue { val payload = JsString("purplebluegreen-7") }
   case object SequentialMultiHuePurplebluegreen8 extends SequentialMultiHue { val payload = JsString("purplebluegreen-8") }
   case object SequentialMultiHuePurplebluegreen9 extends SequentialMultiHue { val payload = JsString("purplebluegreen-9") }
   case object SequentialMultiHuePurpleblue extends SequentialMultiHue { val payload = JsString("purpleblue") }
   case object SequentialMultiHuePurpleblue3 extends SequentialMultiHue { val payload = JsString("purpleblue-3") }
   case object SequentialMultiHuePurpleblue4 extends SequentialMultiHue { val payload = JsString("purpleblue-4") }
   case object SequentialMultiHuePurpleblue5 extends SequentialMultiHue { val payload = JsString("purpleblue-5") }
   case object SequentialMultiHuePurpleblue6 extends SequentialMultiHue { val payload = JsString("purpleblue-6") }
   case object SequentialMultiHuePurpleblue7 extends SequentialMultiHue { val payload = JsString("purpleblue-7") }
   case object SequentialMultiHuePurpleblue8 extends SequentialMultiHue { val payload = JsString("purpleblue-8") }
   case object SequentialMultiHuePurpleblue9 extends SequentialMultiHue { val payload = JsString("purpleblue-9") }
   case object SequentialMultiHuePurplered extends SequentialMultiHue { val payload = JsString("purplered") }
   case object SequentialMultiHuePurplered3 extends SequentialMultiHue { val payload = JsString("purplered-3") }
   case object SequentialMultiHuePurplered4 extends SequentialMultiHue { val payload = JsString("purplered-4") }
   case object SequentialMultiHuePurplered5 extends SequentialMultiHue { val payload = JsString("purplered-5") }
   case object SequentialMultiHuePurplered6 extends SequentialMultiHue { val payload = JsString("purplered-6") }
   case object SequentialMultiHuePurplered7 extends SequentialMultiHue { val payload = JsString("purplered-7") }
   case object SequentialMultiHuePurplered8 extends SequentialMultiHue { val payload = JsString("purplered-8") }
   case object SequentialMultiHuePurplered9 extends SequentialMultiHue { val payload = JsString("purplered-9") }
   case object SequentialMultiHueRedpurple extends SequentialMultiHue { val payload = JsString("redpurple") }
   case object SequentialMultiHueRedpurple3 extends SequentialMultiHue { val payload = JsString("redpurple-3") }
   case object SequentialMultiHueRedpurple4 extends SequentialMultiHue { val payload = JsString("redpurple-4") }
   case object SequentialMultiHueRedpurple5 extends SequentialMultiHue { val payload = JsString("redpurple-5") }
   case object SequentialMultiHueRedpurple6 extends SequentialMultiHue { val payload = JsString("redpurple-6") }
   case object SequentialMultiHueRedpurple7 extends SequentialMultiHue { val payload = JsString("redpurple-7") }
   case object SequentialMultiHueRedpurple8 extends SequentialMultiHue { val payload = JsString("redpurple-8") }
   case object SequentialMultiHueRedpurple9 extends SequentialMultiHue { val payload = JsString("redpurple-9") }
   case object SequentialMultiHueYellowgreenblue extends SequentialMultiHue { val payload = JsString("yellowgreenblue") }
   case object SequentialMultiHueYellowgreenblue3 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-3") }
   case object SequentialMultiHueYellowgreenblue4 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-4") }
   case object SequentialMultiHueYellowgreenblue5 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-5") }
   case object SequentialMultiHueYellowgreenblue6 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-6") }
   case object SequentialMultiHueYellowgreenblue7 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-7") }
   case object SequentialMultiHueYellowgreenblue8 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-8") }
   case object SequentialMultiHueYellowgreenblue9 extends SequentialMultiHue { val payload = JsString("yellowgreenblue-9") }
   case object SequentialMultiHueYellowgreen extends SequentialMultiHue { val payload = JsString("yellowgreen") }
   case object SequentialMultiHueYellowgreen3 extends SequentialMultiHue { val payload = JsString("yellowgreen-3") }
   case object SequentialMultiHueYellowgreen4 extends SequentialMultiHue { val payload = JsString("yellowgreen-4") }
   case object SequentialMultiHueYellowgreen5 extends SequentialMultiHue { val payload = JsString("yellowgreen-5") }
   case object SequentialMultiHueYellowgreen6 extends SequentialMultiHue { val payload = JsString("yellowgreen-6") }
   case object SequentialMultiHueYellowgreen7 extends SequentialMultiHue { val payload = JsString("yellowgreen-7") }
   case object SequentialMultiHueYellowgreen8 extends SequentialMultiHue { val payload = JsString("yellowgreen-8") }
   case object SequentialMultiHueYellowgreen9 extends SequentialMultiHue { val payload = JsString("yellowgreen-9") }
   case object SequentialMultiHueYelloworangebrown extends SequentialMultiHue { val payload = JsString("yelloworangebrown") }
   case object SequentialMultiHueYelloworangebrown3 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-3") }
   case object SequentialMultiHueYelloworangebrown4 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-4") }
   case object SequentialMultiHueYelloworangebrown5 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-5") }
   case object SequentialMultiHueYelloworangebrown6 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-6") }
   case object SequentialMultiHueYelloworangebrown7 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-7") }
   case object SequentialMultiHueYelloworangebrown8 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-8") }
   case object SequentialMultiHueYelloworangebrown9 extends SequentialMultiHue { val payload = JsString("yelloworangebrown-9") }
   case object SequentialMultiHueYelloworangered extends SequentialMultiHue { val payload = JsString("yelloworangered") }
   case object SequentialMultiHueYelloworangered3 extends SequentialMultiHue { val payload = JsString("yelloworangered-3") }
   case object SequentialMultiHueYelloworangered4 extends SequentialMultiHue { val payload = JsString("yelloworangered-4") }
   case object SequentialMultiHueYelloworangered5 extends SequentialMultiHue { val payload = JsString("yelloworangered-5") }
   case object SequentialMultiHueYelloworangered6 extends SequentialMultiHue { val payload = JsString("yelloworangered-6") }
   case object SequentialMultiHueYelloworangered7 extends SequentialMultiHue { val payload = JsString("yelloworangered-7") }
   case object SequentialMultiHueYelloworangered8 extends SequentialMultiHue { val payload = JsString("yelloworangered-8") }
   case object SequentialMultiHueYelloworangered9 extends SequentialMultiHue { val payload = JsString("yelloworangered-9") }
   case object SequentialMultiHueDarkblue extends SequentialMultiHue { val payload = JsString("darkblue") }
   case object SequentialMultiHueDarkblue3 extends SequentialMultiHue { val payload = JsString("darkblue-3") }
   case object SequentialMultiHueDarkblue4 extends SequentialMultiHue { val payload = JsString("darkblue-4") }
   case object SequentialMultiHueDarkblue5 extends SequentialMultiHue { val payload = JsString("darkblue-5") }
   case object SequentialMultiHueDarkblue6 extends SequentialMultiHue { val payload = JsString("darkblue-6") }
   case object SequentialMultiHueDarkblue7 extends SequentialMultiHue { val payload = JsString("darkblue-7") }
   case object SequentialMultiHueDarkblue8 extends SequentialMultiHue { val payload = JsString("darkblue-8") }
   case object SequentialMultiHueDarkblue9 extends SequentialMultiHue { val payload = JsString("darkblue-9") }
   case object SequentialMultiHueDarkgold extends SequentialMultiHue { val payload = JsString("darkgold") }
   case object SequentialMultiHueDarkgold3 extends SequentialMultiHue { val payload = JsString("darkgold-3") }
   case object SequentialMultiHueDarkgold4 extends SequentialMultiHue { val payload = JsString("darkgold-4") }
   case object SequentialMultiHueDarkgold5 extends SequentialMultiHue { val payload = JsString("darkgold-5") }
   case object SequentialMultiHueDarkgold6 extends SequentialMultiHue { val payload = JsString("darkgold-6") }
   case object SequentialMultiHueDarkgold7 extends SequentialMultiHue { val payload = JsString("darkgold-7") }
   case object SequentialMultiHueDarkgold8 extends SequentialMultiHue { val payload = JsString("darkgold-8") }
   case object SequentialMultiHueDarkgold9 extends SequentialMultiHue { val payload = JsString("darkgold-9") }
   case object SequentialMultiHueDarkgreen extends SequentialMultiHue { val payload = JsString("darkgreen") }
   case object SequentialMultiHueDarkgreen3 extends SequentialMultiHue { val payload = JsString("darkgreen-3") }
   case object SequentialMultiHueDarkgreen4 extends SequentialMultiHue { val payload = JsString("darkgreen-4") }
   case object SequentialMultiHueDarkgreen5 extends SequentialMultiHue { val payload = JsString("darkgreen-5") }
   case object SequentialMultiHueDarkgreen6 extends SequentialMultiHue { val payload = JsString("darkgreen-6") }
   case object SequentialMultiHueDarkgreen7 extends SequentialMultiHue { val payload = JsString("darkgreen-7") }
   case object SequentialMultiHueDarkgreen8 extends SequentialMultiHue { val payload = JsString("darkgreen-8") }
   case object SequentialMultiHueDarkgreen9 extends SequentialMultiHue { val payload = JsString("darkgreen-9") }
   case object SequentialMultiHueDarkmulti extends SequentialMultiHue { val payload = JsString("darkmulti") }
   case object SequentialMultiHueDarkmulti3 extends SequentialMultiHue { val payload = JsString("darkmulti-3") }
   case object SequentialMultiHueDarkmulti4 extends SequentialMultiHue { val payload = JsString("darkmulti-4") }
   case object SequentialMultiHueDarkmulti5 extends SequentialMultiHue { val payload = JsString("darkmulti-5") }
   case object SequentialMultiHueDarkmulti6 extends SequentialMultiHue { val payload = JsString("darkmulti-6") }
   case object SequentialMultiHueDarkmulti7 extends SequentialMultiHue { val payload = JsString("darkmulti-7") }
   case object SequentialMultiHueDarkmulti8 extends SequentialMultiHue { val payload = JsString("darkmulti-8") }
   case object SequentialMultiHueDarkmulti9 extends SequentialMultiHue { val payload = JsString("darkmulti-9") }
   case object SequentialMultiHueDarkred extends SequentialMultiHue { val payload = JsString("darkred") }
   case object SequentialMultiHueDarkred3 extends SequentialMultiHue { val payload = JsString("darkred-3") }
   case object SequentialMultiHueDarkred4 extends SequentialMultiHue { val payload = JsString("darkred-4") }
   case object SequentialMultiHueDarkred5 extends SequentialMultiHue { val payload = JsString("darkred-5") }
   case object SequentialMultiHueDarkred6 extends SequentialMultiHue { val payload = JsString("darkred-6") }
   case object SequentialMultiHueDarkred7 extends SequentialMultiHue { val payload = JsString("darkred-7") }
   case object SequentialMultiHueDarkred8 extends SequentialMultiHue { val payload = JsString("darkred-8") }
   case object SequentialMultiHueDarkred9 extends SequentialMultiHue { val payload = JsString("darkred-9") }
   case object SequentialMultiHueLightgreyred extends SequentialMultiHue { val payload = JsString("lightgreyred") }
   case object SequentialMultiHueLightgreyred3 extends SequentialMultiHue { val payload = JsString("lightgreyred-3") }
   case object SequentialMultiHueLightgreyred4 extends SequentialMultiHue { val payload = JsString("lightgreyred-4") }
   case object SequentialMultiHueLightgreyred5 extends SequentialMultiHue { val payload = JsString("lightgreyred-5") }
   case object SequentialMultiHueLightgreyred6 extends SequentialMultiHue { val payload = JsString("lightgreyred-6") }
   case object SequentialMultiHueLightgreyred7 extends SequentialMultiHue { val payload = JsString("lightgreyred-7") }
   case object SequentialMultiHueLightgreyred8 extends SequentialMultiHue { val payload = JsString("lightgreyred-8") }
   case object SequentialMultiHueLightgreyred9 extends SequentialMultiHue { val payload = JsString("lightgreyred-9") }
   case object SequentialMultiHueLightgreyteal extends SequentialMultiHue { val payload = JsString("lightgreyteal") }
   case object SequentialMultiHueLightgreyteal3 extends SequentialMultiHue { val payload = JsString("lightgreyteal-3") }
   case object SequentialMultiHueLightgreyteal4 extends SequentialMultiHue { val payload = JsString("lightgreyteal-4") }
   case object SequentialMultiHueLightgreyteal5 extends SequentialMultiHue { val payload = JsString("lightgreyteal-5") }
   case object SequentialMultiHueLightgreyteal6 extends SequentialMultiHue { val payload = JsString("lightgreyteal-6") }
   case object SequentialMultiHueLightgreyteal7 extends SequentialMultiHue { val payload = JsString("lightgreyteal-7") }
   case object SequentialMultiHueLightgreyteal8 extends SequentialMultiHue { val payload = JsString("lightgreyteal-8") }
   case object SequentialMultiHueLightgreyteal9 extends SequentialMultiHue { val payload = JsString("lightgreyteal-9") }
   case object SequentialMultiHueLightmulti extends SequentialMultiHue { val payload = JsString("lightmulti") }
   case object SequentialMultiHueLightmulti3 extends SequentialMultiHue { val payload = JsString("lightmulti-3") }
   case object SequentialMultiHueLightmulti4 extends SequentialMultiHue { val payload = JsString("lightmulti-4") }
   case object SequentialMultiHueLightmulti5 extends SequentialMultiHue { val payload = JsString("lightmulti-5") }
   case object SequentialMultiHueLightmulti6 extends SequentialMultiHue { val payload = JsString("lightmulti-6") }
   case object SequentialMultiHueLightmulti7 extends SequentialMultiHue { val payload = JsString("lightmulti-7") }
   case object SequentialMultiHueLightmulti8 extends SequentialMultiHue { val payload = JsString("lightmulti-8") }
   case object SequentialMultiHueLightmulti9 extends SequentialMultiHue { val payload = JsString("lightmulti-9") }
   case object SequentialMultiHueLightorange extends SequentialMultiHue { val payload = JsString("lightorange") }
   case object SequentialMultiHueLightorange3 extends SequentialMultiHue { val payload = JsString("lightorange-3") }
   case object SequentialMultiHueLightorange4 extends SequentialMultiHue { val payload = JsString("lightorange-4") }
   case object SequentialMultiHueLightorange5 extends SequentialMultiHue { val payload = JsString("lightorange-5") }
   case object SequentialMultiHueLightorange6 extends SequentialMultiHue { val payload = JsString("lightorange-6") }
   case object SequentialMultiHueLightorange7 extends SequentialMultiHue { val payload = JsString("lightorange-7") }
   case object SequentialMultiHueLightorange8 extends SequentialMultiHue { val payload = JsString("lightorange-8") }
   case object SequentialMultiHueLightorange9 extends SequentialMultiHue { val payload = JsString("lightorange-9") }
   case object SequentialMultiHueLighttealblue extends SequentialMultiHue { val payload = JsString("lighttealblue") }
   case object SequentialMultiHueLighttealblue3 extends SequentialMultiHue { val payload = JsString("lighttealblue-3") }
   case object SequentialMultiHueLighttealblue4 extends SequentialMultiHue { val payload = JsString("lighttealblue-4") }
   case object SequentialMultiHueLighttealblue5 extends SequentialMultiHue { val payload = JsString("lighttealblue-5") }
   case object SequentialMultiHueLighttealblue6 extends SequentialMultiHue { val payload = JsString("lighttealblue-6") }
   case object SequentialMultiHueLighttealblue7 extends SequentialMultiHue { val payload = JsString("lighttealblue-7") }
   case object SequentialMultiHueLighttealblue8 extends SequentialMultiHue { val payload = JsString("lighttealblue-8") }
   case object SequentialMultiHueLighttealblue9 extends SequentialMultiHue { val payload = JsString("lighttealblue-9") }

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait FacetedUnitSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Color (UnionType)

sealed trait Color extends LegendConfigSymbolFillColor with LegendConfigSymbolStrokeColor with BarConfigStroke with TopLevelConcatSpecBackground with ViewConfigFill with MarkDefStroke with ViewBackgroundStroke with TickConfigColor with MarkDefFill with AxisConfigGridColor with AxisConfigTickColor with MarkDefColor with LineConfigFill with LegendConfigStrokeColor with ErrorBarDefColor with BarConfigColor with MarkConfigStroke with TopLevelUnitSpecBackground with MarkConfigColor with RectConfigStroke with TitleParamsSubtitleColor with TickConfigFill with ConfigBackground with AxisConfigLabelColor with AxisTickColor with LegendConfigFillColor with AreaConfigFill with LineConfigStroke with BoxPlotDefColor with AxisDomainColor with LegendConfigTitleColor with HeaderTitleColor with AreaConfigColor with AxisLabelColor with LegendConfigSymbolBaseStrokeColor with RectConfigColor with TitleConfigSubtitleColor with OverlayMarkDefColor with HeaderConfigLabelColor with TopLevelRepeatSpecAsObject2Background with TitleParamsColor with HeaderConfigTitleColor with MarkConfigFill with LegendConfigSymbolBaseFillColor with LegendConfigGradientStrokeColor with AxisConfigDomainColor with TopLevelHConcatSpecBackground with TickConfigStroke with RectConfigFill with TopLevelFacetSpecBackground with ViewConfigStroke with AxisTitleColor with OverlayMarkDefStroke with LineConfigColor with HeaderLabelColor with LegendConfigLabelColor with AxisGridColor with AreaConfigStroke with BarConfigFill with AxisConfigTitleColor with TitleConfigColor with ErrorBandDefColor with TopLevelVConcatSpecBackground with ViewBackgroundFill with TopLevelRepeatSpecAsObject1Background with OverlayMarkDefFill with TopLevelLayerSpecBackground
   // ColorName is defined elsewhere
   // ColorHex is defined elsewhere
   case class ColorAsString(value: String) extends Color

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleOpacity (UnionType)

sealed trait LegendConfigTitleOpacity 
   case class LegendConfigTitleOpacityAsNumber(value: JsNumber) extends LegendConfigTitleOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject1Source (EnumType)

sealed trait EventStreamAsObject1Source  { val payload: JsValue }
   case object EventStreamAsObject1SourceView extends EventStreamAsObject1Source { val payload = JsString("view") }
   case object EventStreamAsObject1SourceScope extends EventStreamAsObject1Source { val payload = JsString("scope") }

////////////////////////////////////////////////////////////////////////

// BarConfigCursor (UnionType)

sealed trait BarConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigDescription (UnionType)

sealed trait MarkConfigDescription 
   case class MarkConfigDescriptionAsString(value: String) extends MarkConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BinParams (StructType)
/**
 * Binning properties or boolean flag for determining whether to bin data or not.
 **/
case class BinParams(
  /**
   * A value in the binned domain at which to anchor the bins, shifting the bin boundaries if necessary to ensure that a boundary aligns with the anchor value.
   * 
   * __Default value:__ the minimum bin extent value
   **/
  var `anchor` : Option[JsNumber] = None,
  /**
   * A two-element (`[min, max]`) array indicating the range of desired bin values.
   **/
  var `extent` : Option[BinExtent] = None,
  /**
   * When set to `true`, Vega-Lite treats the input data as already binned.
   **/
  var `binned` : Option[Boolean] = None,
  /**
   * Maximum number of bins.
   * 
   * __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels
   **/
  var `maxbins` : Option[BinParamsMaxbins] = None,
  /**
   * The number base to use for automatic bin determination (default is base 10).
   * 
   * __Default value:__ `10`
   **/
  var `base` : Option[JsNumber] = None,
  /**
   * An array of allowable step sizes to choose from.
   **/
  var `steps` : Option[BinParamsSteps] = None,
  /**
   * A minimum allowable step size (particularly useful for integer values).
   **/
  var `minstep` : Option[JsNumber] = None,
  /**
   * An exact step size to use between bins.
   * 
   * __Note:__ If provided, options such as maxbins will be ignored.
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.
   * 
   * __Default value:__ `[5, 2]`
   **/
  var `divide` : Option[BinParamsDivide] = None,
  /**
   * If true, attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.
   * 
   * __Default value:__ `true`
   **/
  var `nice` : Option[Boolean] = None
) extends FieldDefWithoutScaleBin with PositionFieldDefBaseBin with SharedEncodingAngleBin with SharedEncodingSizeBin with SharedEncodingThetaBin with SharedEncodingFillOpacityBin with SharedEncodingRadiusBin with SharedEncodingUrlBin with SharedEncodingShapeBin with FacetEncodingFieldDefBin with OrderFieldDefBin with SharedEncodingXOffsetBin with SharedEncodingColorBin with ConditionalPredicateStringFieldDefBin with FieldOrDatumDefWithConditionMarkPropFieldDefNumberBin with SharedEncodingDescriptionBin with SharedEncodingFillBin with StringFieldDefBin with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin with SharedEncodingXBin with PositionFieldDefBin with SharedEncodingYOffsetBin with FacetFieldDefBin with SharedEncodingStrokeWidthBin with SharedEncodingStrokeBin with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin with ConditionalParameterStringFieldDefBin with FieldOrDatumDefWithConditionStringFieldDefTextBin with ConditionalParameterMarkPropFieldOrDatumDefAsObject1Bin with SharedEncodingTextBin with SharedEncodingStrokeDashBin with SharedEncodingStrokeOpacityBin with StringFieldDefWithConditionBin with FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullBin with SharedEncodingKeyBin with FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullBin with SharedEncodingYBin with BinTransformBin with ScaleFieldDefBin with RowColumnEncodingFieldDefBin with SharedEncodingOpacityBin with ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin with SharedEncodingHrefBin 
{  }
object BinParams {
  val definedFields = Set("step", "anchor", "steps", "minstep", "divide", "binned", "base", "nice", "extent", "maxbins") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigAspect (UnionType)

sealed trait MarkConfigAspect 
   case class MarkConfigAspectAsBool(value: Boolean) extends MarkConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class MarkDefStrokeOpacityAsNumber(value: JsNumber) extends MarkDefStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleFontSize (UnionType)

sealed trait TitleParamsSubtitleFontSize 
   // TitleParamsSubtitleFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigCenter (UnionType)

sealed trait ProjectionConfigCenter 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RowColumnEncodingFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait RowColumnEncodingFieldDefBin 
   case class RowColumnEncodingFieldDefBinAsBool(value: Boolean) extends RowColumnEncodingFieldDefBin
   // BinParams is defined elsewhere
   case object RowColumnEncodingFieldDefBinAsNull extends RowColumnEncodingFieldDefBin

////////////////////////////////////////////////////////////////////////

// AreaConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait AreaConfigTheta 
   case class AreaConfigThetaAsNumber(value: JsNumber) extends AreaConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldGTPredicateGt (UnionType)
/**
 * The value that the field should be greater than.
 **/
sealed trait FieldGTPredicateGt 
   case class FieldGTPredicateGtAsString(value: String) extends FieldGTPredicateGt
   case class FieldGTPredicateGtAsNumber(value: JsNumber) extends FieldGTPredicateGt
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigText (UnionType)

sealed trait RectConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TimeUnitTransform (StructType)

case class TimeUnitTransform(
  /**
   * The output field to write the timeUnit value.
   **/
  var `as` : String,
  /**
   * The data field to apply time unit.
   **/
  var `field` : String,
  /**
   * The timeUnit.
   **/
  var `timeUnit` : TimeUnitTransformTimeUnit
) extends Transform 
{  }
object TimeUnitTransform {
  val definedFields = Set("as", "field", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// FieldEqualPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldEqualPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingLongitude2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleFontStyle (UnionType)

sealed trait TitleParamsSubtitleFontStyle 
   case class TitleParamsSubtitleFontStyleAsString(value: String) extends TitleParamsSubtitleFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBandDefBand (UnionType)

sealed trait ErrorBandDefBand 
   case class ErrorBandDefBandAsBool(value: Boolean) extends ErrorBandDefBand
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingStrokeOpacityTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDefStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait PositionDatumDefStack 
   // StackOffset is defined elsewhere
   case object PositionDatumDefStackAsNull extends PositionDatumDefStack
   case class PositionDatumDefStackAsBool(value: Boolean) extends PositionDatumDefStack

////////////////////////////////////////////////////////////////////////

// EncodingTooltip (UnionType)
/**
 * The tooltip text to show upon mouse hover. Specifying `tooltip` encoding overrides [the `tooltip` property in the mark definition](https://vega.github.io/vega-lite/docs/mark.html#mark-def).
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip in Vega-Lite.
 **/
sealed trait EncodingTooltip 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere
   case class EncodingTooltipAsArrayOfStringFieldDef(value: Seq[StringFieldDef]) extends EncodingTooltip
   case object EncodingTooltipAsNull extends EncodingTooltip

////////////////////////////////////////////////////////////////////////

// SharedEncodingYBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingYBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingYOffsetTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingYOffsetTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldLTPredicateLt (UnionType)
/**
 * The value that the field should be less than.
 **/
sealed trait FieldLTPredicateLt 
   case class FieldLTPredicateLtAsString(value: String) extends FieldLTPredicateLt
   case class FieldLTPredicateLtAsNumber(value: JsNumber) extends FieldLTPredicateLt
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Number (ConstantType)

case class Number() extends ParseValue

////////////////////////////////////////////////////////////////////////

// ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelFontStyle (UnionType)

sealed trait LegendConfigLabelFontStyle 
   case class LegendConfigLabelFontStyleAsString(value: String) extends LegendConfigLabelFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigLimit (UnionType)

sealed trait TickConfigLimit 
   case class TickConfigLimitAsNumber(value: JsNumber) extends TickConfigLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFlush (UnionType)

sealed trait AxisConfigLabelFlush 
   case class AxisConfigLabelFlushAsBool(value: Boolean) extends AxisConfigLabelFlush
   case class AxisConfigLabelFlushAsNumber(value: JsNumber) extends AxisConfigLabelFlush

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Autosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelRepeatSpecAsObject1Autosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait BarConfigSize 
   case class BarConfigSizeAsNumber(value: JsNumber) extends BarConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendStreamBinding (StructType)

case class LegendStreamBinding(
  var `legend` : LegendStreamBindingLegend
) extends LegendBinding 
{  }
object LegendStreamBinding {
  val definedFields = Set("legend") 
}

////////////////////////////////////////////////////////////////////////

// AxisDomainDash (UnionType)

sealed trait AxisDomainDash 
   case class AxisDomainDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisDomainDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionSize (UnionType)

sealed trait ProjectionSize 
   // Vector2Number is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalParameterValueDefStringExprRefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait ConditionalParameterValueDefStringExprRefValue 
   case class ConditionalParameterValueDefStringExprRefValueAsString(value: String) extends ConditionalParameterValueDefStringExprRefValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetedUnitSpecSpacing (UnionType)
/**
 * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
 * 
 * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
 **/
sealed trait FacetedUnitSpecSpacing 
   case class FacetedUnitSpecSpacingAsNumber(value: JsNumber) extends FacetedUnitSpecSpacing
   // RowColNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigWithoutTypeClear (UnionType)
/**
 * Clears the selection, emptying it of all values. This property can be a [Event Stream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable clear.
 * 
 * __Default value:__ `dblclick`.
 * 
 * __See also:__ [`clear` examples ](https://vega.github.io/vega-lite/docs/selection.html#clear) in the documentation.
 **/
sealed trait IntervalSelectionConfigWithoutTypeClear 
   // Stream is defined elsewhere
   case class IntervalSelectionConfigWithoutTypeClearAsString(value: String) extends IntervalSelectionConfigWithoutTypeClear
   case class IntervalSelectionConfigWithoutTypeClearAsBool(value: Boolean) extends IntervalSelectionConfigWithoutTypeClear

////////////////////////////////////////////////////////////////////////

// AxisTickDashOffset (UnionType)

sealed trait AxisTickDashOffset 
   case class AxisTickDashOffsetAsNumber(value: JsNumber) extends AxisTickDashOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumber (UnionType)

sealed trait ConditionalAxisNumber extends AxisConfigTickWidth with AxisLabelFontSize with AxisConfigLabelFontSize with AxisTickSize with AxisConfigLabelOffset with AxisConfigGridOpacity with AxisTickOpacity with AxisLabelOpacity with AxisLabelOffset with AxisConfigGridWidth with AxisConfigTickSize with AxisGridOpacity with AxisGridDashOffset with AxisConfigTickOpacity with AxisConfigTickDashOffset with AxisTickWidth with AxisConfigLabelOpacity with AxisConfigLabelPadding with AxisTickDashOffset with AxisGridWidth with AxisConfigGridDashOffset with AxisLabelPadding
   // ConditionalAxisNumberAsObject1 is defined elsewhere
   // ConditionalAxisNumberAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class AreaConfigStrokeOpacityAsNumber(value: JsNumber) extends AreaConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalAxisColorAsObject2Condition (UnionType)

sealed trait ConditionalAxisColorAsObject2Condition 
   // ConditionalPredicateValueDefColorNullExprRef is defined elsewhere
   case class ConditionalAxisColorAsObject2ConditionAsArrayOfConditionalPredicateValueDefColorNullExprRef(value: Seq[ConditionalPredicateValueDefColorNullExprRef]) extends ConditionalAxisColorAsObject2Condition

////////////////////////////////////////////////////////////////////////

// Position2Def (UnionType)
/**
 * Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 **/
sealed trait Position2Def 
   // SecondaryFieldDef is defined elsewhere
   // DatumDef is defined elsewhere
   // PositionValueDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpec (StructType)

case class LayerRepeatSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[LayerRepeatSpecCenter] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[LayerRepeatSpecBounds] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets repeated.
   **/
  var `spec` : LayerRepeatSpecSpec,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[LayerRepeatSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
   **/
  var `repeat` : LayerRepeatMapping,
  /**
   * Title for the plot.
   **/
  var `title` : Option[LayerRepeatSpecTitle] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[LayerRepeatSpecSpacing] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends RepeatSpec 
{  }
object LayerRepeatSpec {
  val definedFields = Set("spacing", "spec", "transform", "name", "align", "data", "repeat", "description", "title", "resolve", "bounds", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigZoom (UnionType)

sealed trait IntervalSelectionConfigZoom 
   case class IntervalSelectionConfigZoomAsString(value: String) extends IntervalSelectionConfigZoom
   case class IntervalSelectionConfigZoomAsBool(value: Boolean) extends IntervalSelectionConfigZoom

////////////////////////////////////////////////////////////////////////

// SharedEncodingYError2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingYError2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStrokeJoin (UnionType)

sealed trait ViewBackgroundStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeJoin (UnionType)

sealed trait TickConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigOrder (UnionType)

sealed trait RectConfigOrder 
   case object RectConfigOrderAsNull extends RectConfigOrder
   case class RectConfigOrderAsBool(value: Boolean) extends RectConfigOrder

////////////////////////////////////////////////////////////////////////

// DateTime (StructType)
/**
 * Object for defining datetime in Vega-Lite Filter. If both month and quarter are provided, month has higher precedence. `day` cannot be combined with other date. We accept string for month and day names.
 **/
case class DateTime(
  /**
   * Integer value representing the second segment (0-59) of a time value
   **/
  var `seconds` : Option[DateTimeSeconds] = None,
  /**
   * Integer value representing the year.
   **/
  var `year` : Option[JsNumber] = None,
  /**
   * Integer value representing the quarter of the year (from 1-4).
   **/
  var `quarter` : Option[DateTimeQuarter] = None,
  /**
   * A boolean flag indicating if date time is in utc time. If false, the date time is in local time
   **/
  var `utc` : Option[Boolean] = None,
  /**
   * Integer value representing the minute segment of time from 0-59.
   **/
  var `minutes` : Option[DateTimeMinutes] = None,
  /**
   * Integer value representing the hour of a day from 0-23.
   **/
  var `hours` : Option[DateTimeHours] = None,
  /**
   * Integer value representing the date (day of the month) from 1-31.
   **/
  var `date` : Option[DateTimeDate] = None,
  /**
   * Integer value representing the millisecond segment of time.
   **/
  var `milliseconds` : Option[DateTimeMilliseconds] = None,
  /**
   * Value representing the day of a week. This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `"Monday"`); (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).
   * 
   * **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.
   **/
  var `day` : Option[DateTimeDay] = None,
  /**
   * One of: (1) integer value representing the month from `1`-`12`. `1` represents January; (2) case-insensitive month name (e.g., `"January"`); (3) case-insensitive, 3-character short month name (e.g., `"Jan"`).
   **/
  var `month` : Option[DateTimeMonth] = None
) extends SharedEncodingStrokeWidthDatum with SharedEncodingRadius2Datum with ScaleDatumDefDatum with FieldGTEPredicateGte with SharedEncodingAngleDatum with ConditionalPredicateMarkPropFieldOrDatumDefAsObject2Datum with FieldRangePredicateRangeAsArrayElement with SelectionInit with PositionDatumDefDatum with FieldOrDatumDefWithConditionDatumDefGradientStringNullDatum with SharedEncodingLongitude2Datum with SharedEncodingStrokeDashDatum with SharedEncodingYOffsetDatum with ConditionalParameterMarkPropFieldOrDatumDefAsObject2Datum with SharedEncodingRadiusDatum with SharedEncodingLatitude2Datum with FieldOrDatumDefWithConditionStringDatumDefTextDatum with PositionDatumDefBaseDatum with FieldOrDatumDefWithConditionDatumDefNumberDatum with SharedEncodingYDatum with SharedEncodingXOffsetDatum with SharedEncodingTextDatum with SharedEncodingLongitudeDatum with SharedEncodingShapeDatum with FieldOrDatumDefWithConditionDatumDefStringNullDatum with FieldGTPredicateGt with SharedEncodingStrokeDatum with SharedEncodingY2Datum with ScaleDomainMax with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with DatumDefDatum with SharedEncodingStrokeOpacityDatum with FieldLTPredicateLt with SharedEncodingSizeDatum with ScaleDomainMin with SharedEncodingOpacityDatum with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject2Datum with SharedEncodingLatitudeDatum with SharedEncodingXDatum with SharedEncodingThetaDatum with SharedEncodingFillOpacityDatum with SharedEncodingX2Datum with FieldEqualPredicateEqual with SharedEncodingFillDatum with ScaleDomainAsArrayElement with SharedEncodingTheta2Datum with FieldLTEPredicateLte with SharedEncodingColorDatum 
{  }
object DateTime {
  val definedFields = Set("month", "minutes", "year", "day", "hours", "milliseconds", "seconds", "utc", "date", "quarter") 
}

////////////////////////////////////////////////////////////////////////

// ErrorBarConfig (StructType)
/**
 * ErrorBar Config
 **/
case class ErrorBarConfig(
  /**
   * Size of the ticks of an error bar
   **/
  var `size` : Option[JsNumber] = None,
  /**
   * The extent of the rule. Available options include:
   * - `"ci"`: Extend the rule to the confidence interval of the mean.
   * - `"stderr"`: The size of rule are set to the value of standard error, extending from the mean.
   * - `"stdev"`: The size of rule are set to the value of standard deviation, extending from the mean.
   * - `"iqr"`: Extend the rule to the q1 and q3.
   * 
   * __Default value:__ `"stderr"`.
   **/
  var `extent` : Option[ErrorBarExtent] = None,
  var `rule` : Option[ErrorBarConfigRule] = None,
  /**
   * Thickness of the ticks and the bar of an error bar
   **/
  var `thickness` : Option[JsNumber] = None,
  var `ticks` : Option[ErrorBarConfigTicks] = None
)  
{  }
object ErrorBarConfig {
  val definedFields = Set("rule", "ticks", "thickness", "size", "extent") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfig (StructType)
/**
 * Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config).
 **/
case class LegendConfig(
  /**
   * Min legend length for a vertical gradient when `config.legend.gradientLength` is undefined.
   * 
   * __Default value:__ `100`
   **/
  var `gradientVerticalMinLength` : Option[JsNumber] = None,
  var `labelFontWeight` : Option[LegendConfigLabelFontWeight] = None,
  var `columnPadding` : Option[LegendConfigColumnPadding] = None,
  var `symbolOpacity` : Option[LegendConfigSymbolOpacity] = None,
  var `labelOffset` : Option[LegendConfigLabelOffset] = None,
  var `labelFontSize` : Option[LegendConfigLabelFontSize] = None,
  var `gridAlign` : Option[LegendConfigGridAlign] = None,
  var `symbolStrokeWidth` : Option[LegendConfigSymbolStrokeWidth] = None,
  var `labelOpacity` : Option[LegendConfigLabelOpacity] = None,
  var `gradientStrokeColor` : Option[LegendConfigGradientStrokeColor] = None,
  var `symbolFillColor` : Option[LegendConfigSymbolFillColor] = None,
  var `tickCount` : Option[LegendConfigTickCount] = None,
  /**
   * Max legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.
   * 
   * __Default value:__ `200`
   **/
  var `gradientHorizontalMaxLength` : Option[JsNumber] = None,
  var `description` : Option[LegendConfigDescription] = None,
  var `titleFont` : Option[LegendConfigTitleFont] = None,
  var `legendX` : Option[LegendConfigLegendX] = None,
  var `titleFontStyle` : Option[LegendConfigTitleFontStyle] = None,
  var `gradientLength` : Option[LegendConfigGradientLength] = None,
  var `labelColor` : Option[LegendConfigLabelColor] = None,
  var `clipHeight` : Option[LegendConfigClipHeight] = None,
  var `titleLineHeight` : Option[LegendConfigTitleLineHeight] = None,
  /**
   * The direction of the legend, one of `"vertical"` or `"horizontal"`.
   * 
   * __Default value:__
   * - For top-/bottom-`orient`ed legends, `"horizontal"`
   * - For left-/right-`orient`ed legends, `"vertical"`
   * - For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and `"vertical"` for symbol legends.
   **/
  var `direction` : Option[Orientation] = None,
  var `cornerRadius` : Option[LegendConfigCornerRadius] = None,
  var `gradientStrokeWidth` : Option[LegendConfigGradientStrokeWidth] = None,
  var `symbolStrokeColor` : Option[LegendConfigSymbolStrokeColor] = None,
  var `gradientDirection` : Option[LegendConfigGradientDirection] = None,
  var `symbolBaseFillColor` : Option[LegendConfigSymbolBaseFillColor] = None,
  var `gradientThickness` : Option[LegendConfigGradientThickness] = None,
  var `titlePadding` : Option[LegendConfigTitlePadding] = None,
  var `rowPadding` : Option[LegendConfigRowPadding] = None,
  /**
   * Max legend length for a vertical gradient when `config.legend.gradientLength` is undefined.
   * 
   * __Default value:__ `200`
   **/
  var `gradientVerticalMaxLength` : Option[JsNumber] = None,
  /**
   * Min legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.
   * 
   * __Default value:__ `100`
   **/
  var `gradientHorizontalMinLength` : Option[JsNumber] = None,
  var `offset` : Option[LegendConfigOffset] = None,
  var `symbolDash` : Option[LegendConfigSymbolDash] = None,
  var `symbolBaseStrokeColor` : Option[LegendConfigSymbolBaseStrokeColor] = None,
  var `zindex` : Option[LegendConfigZindex] = None,
  var `symbolOffset` : Option[LegendConfigSymbolOffset] = None,
  var `labelLimit` : Option[LegendConfigLabelLimit] = None,
  var `titleAnchor` : Option[LegendConfigTitleAnchor] = None,
  var `titleColor` : Option[LegendConfigTitleColor] = None,
  var `columns` : Option[LegendConfigColumns] = None,
  /**
   * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used. If set to `"greedy"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).
   * 
   * __Default value:__ `"greedy"` for `log scales otherwise `true`.
   **/
  var `labelOverlap` : Option[LegendConfigLabelOverlap] = None,
  var `symbolDirection` : Option[LegendConfigSymbolDirection] = None,
  var `symbolType` : Option[LegendConfigSymbolType] = None,
  var `symbolSize` : Option[LegendConfigSymbolSize] = None,
  /**
   * The orientation of the legend, which determines how the legend is positioned within the scene. One of `"left"`, `"right"`, `"top"`, `"bottom"`, `"top-left"`, `"top-right"`, `"bottom-left"`, `"bottom-right"`, `"none"`.
   * 
   * __Default value:__ `"right"`
   **/
  var `orient` : Option[LegendOrient] = None,
  var `gradientLabelLimit` : Option[LegendConfigGradientLabelLimit] = None,
  var `titleOrient` : Option[LegendConfigTitleOrient] = None,
  var `labelAlign` : Option[LegendConfigLabelAlign] = None,
  /**
   * Disable legend by default
   **/
  var `disable` : Option[Boolean] = None,
  /**
   * The opacity of unselected legend entries.
   * 
   * __Default value:__ 0.35.
   **/
  var `unselectedOpacity` : Option[JsNumber] = None,
  var `labelPadding` : Option[LegendConfigLabelPadding] = None,
  var `aria` : Option[LegendConfigAria] = None,
  var `padding` : Option[LegendConfigPadding] = None,
  var `layout` : Option[ExprRef] = None,
  /**
   * Set to null to disable title for the axis, legend, or header.
   **/
  var `title` : Option[JsNull.type] = None,
  var `symbolLimit` : Option[LegendConfigSymbolLimit] = None,
  var `titleLimit` : Option[LegendConfigTitleLimit] = None,
  var `strokeDash` : Option[LegendConfigStrokeDash] = None,
  var `labelFont` : Option[LegendConfigLabelFont] = None,
  var `symbolDashOffset` : Option[LegendConfigSymbolDashOffset] = None,
  var `labelFontStyle` : Option[LegendConfigLabelFontStyle] = None,
  var `titleOpacity` : Option[LegendConfigTitleOpacity] = None,
  var `titleAlign` : Option[LegendConfigTitleAlign] = None,
  var `labelSeparation` : Option[LegendConfigLabelSeparation] = None,
  var `strokeColor` : Option[LegendConfigStrokeColor] = None,
  var `gradientOpacity` : Option[LegendConfigGradientOpacity] = None,
  var `titleBaseline` : Option[LegendConfigTitleBaseline] = None,
  var `legendY` : Option[LegendConfigLegendY] = None,
  var `strokeWidth` : Option[LegendConfigStrokeWidth] = None,
  var `titleFontSize` : Option[LegendConfigTitleFontSize] = None,
  var `gradientLabelOffset` : Option[LegendConfigGradientLabelOffset] = None,
  var `titleFontWeight` : Option[LegendConfigTitleFontWeight] = None,
  var `labelBaseline` : Option[LegendConfigLabelBaseline] = None,
  var `fillColor` : Option[LegendConfigFillColor] = None
)  
{  }
object LegendConfig {
  val definedFields = Set("strokeWidth", "labelOpacity", "disable", "padding", "titleBaseline", "titleAnchor", "strokeColor", "labelOffset", "titleFontSize", "fillColor", "titlePadding", "labelFontWeight", "labelFont", "titleFontWeight", "labelPadding", "tickCount", "unselectedOpacity", "gradientDirection", "titleLimit", "titleFontStyle", "symbolLimit", "symbolStrokeColor", "labelBaseline", "gradientThickness", "titleFont", "symbolOpacity", "clipHeight", "gradientVerticalMaxLength", "symbolType", "titleColor", "labelFontStyle", "rowPadding", "gradientLabelLimit", "symbolBaseStrokeColor", "labelSeparation", "aria", "gradientStrokeWidth", "zindex", "legendX", "symbolDirection", "strokeDash", "symbolBaseFillColor", "gradientStrokeColor", "description", "labelFontSize", "title", "symbolFillColor", "gridAlign", "labelAlign", "titleOrient", "titleOpacity", "gradientVerticalMinLength", "layout", "labelOverlap", "gradientHorizontalMinLength", "labelLimit", "legendY", "symbolStrokeWidth", "gradientHorizontalMaxLength", "orient", "direction", "columnPadding", "gradientLength", "symbolDash", "symbolSize", "columns", "gradientLabelOffset", "labelColor", "titleAlign", "cornerRadius", "symbolDashOffset", "titleLineHeight", "gradientOpacity", "offset", "symbolOffset") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelFlushOffset (UnionType)

sealed trait AxisConfigLabelFlushOffset 
   case class AxisConfigLabelFlushOffsetAsNumber(value: JsNumber) extends AxisConfigLabelFlushOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait TopLevelFacetSpecBounds  { val payload: JsValue }
   case object TopLevelFacetSpecBoundsFull extends TopLevelFacetSpecBounds { val payload = JsString("full") }
   case object TopLevelFacetSpecBoundsFlush extends TopLevelFacetSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// StyleConfigIndexOptional (UnionType)

sealed trait StyleConfigIndexOptional 
   // AnyMarkConfig is defined elsewhere
   // Axis is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefYOffset (UnionType)
/**
 * Offset for y-position.
 **/
sealed trait OverlayMarkDefYOffset 
   case class OverlayMarkDefYOffsetAsNumber(value: JsNumber) extends OverlayMarkDefYOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class OverlayMarkDefStrokeWidthAsNumber(value: JsNumber) extends OverlayMarkDefStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeWidthAsNumber (ConstrainedType)
/**
 * The stroke width, in pixels.
 **/
case class ViewConfigStrokeWidthAsNumber(value: JsNumber) extends ViewConfigStrokeWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class TickConfigStrokeOpacityAsNumber(value: JsNumber) extends TickConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleAlign (UnionType)

sealed trait LegendConfigTitleAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingYDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// WindowFieldDef (StructType)

case class WindowFieldDef(
  /**
   * The output name for the window operation.
   **/
  var `as` : String,
  /**
   * The data field for which to compute the aggregate or window function. This can be omitted for window functions that do not operate over a field such as `"count"`, `"rank"`, `"dense_rank"`.
   **/
  var `field` : Option[String] = None,
  /**
   * The window or aggregation operation to apply within a window (e.g., `"rank"`, `"lead"`, `"sum"`, `"average"` or `"count"`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops).
   **/
  var `op` : WindowFieldDefOp,
  /**
   * Parameter values for the window functions. Parameter values can be omitted for operations that do not accept a parameter.
   * 
   * See the list of all supported operations and their parameters [here](https://vega.github.io/vega-lite/docs/transforms/window.html).
   **/
  var `param` : Option[JsNumber] = None
)  
{  }
object WindowFieldDef {
  val definedFields = Set("as", "field", "op", "param") 
}

////////////////////////////////////////////////////////////////////////

// AreaConfigPadAngle (UnionType)

sealed trait AreaConfigPadAngle 
   case class AreaConfigPadAngleAsNumber(value: JsNumber) extends AreaConfigPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBarExtent (EnumType)
/**
 * The extent of the band. Available options include:
 * - `"ci"`: Extend the band to the confidence interval of the mean.
 * - `"stderr"`: The size of band are set to the value of standard error, extending from the mean.
 * - `"stdev"`: The size of band are set to the value of standard deviation, extending from the mean.
 * - `"iqr"`: Extend the band to the q1 and q3.
 * 
 * __Default value:__ `"stderr"`.
 **/
sealed trait ErrorBarExtent  { val payload: JsValue }
   case object ErrorBarExtentCi extends ErrorBarExtent { val payload = JsString("ci") }
   case object ErrorBarExtentIqr extends ErrorBarExtent { val payload = JsString("iqr") }
   case object ErrorBarExtentStderr extends ErrorBarExtent { val payload = JsString("stderr") }
   case object ErrorBarExtentStdev extends ErrorBarExtent { val payload = JsString("stdev") }

////////////////////////////////////////////////////////////////////////

// TitleParamsDx (UnionType)

sealed trait TitleParamsDx 
   case class TitleParamsDxAsNumber(value: JsNumber) extends TitleParamsDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleColor (UnionType)
/**
 * Color of the header title, can be in hex color code or regular color name.
 **/
sealed trait HeaderTitleColor 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsDy (UnionType)

sealed trait TitleParamsDy 
   case class TitleParamsDyAsNumber(value: JsNumber) extends TitleParamsDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolBaseStrokeColor (UnionType)
/**
 * Default stroke color for legend symbols. Only applied if there is no `"fill"` scale color encoding for the legend.
 * 
 * __Default value:__ `"gray"`.
 **/
sealed trait LegendConfigSymbolBaseStrokeColor 
   case object LegendConfigSymbolBaseStrokeColorAsNull extends LegendConfigSymbolBaseStrokeColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleFieldDefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ScaleFieldDefBin 
   case class ScaleFieldDefBinAsBool(value: Boolean) extends ScaleFieldDefBin
   // BinParams is defined elsewhere
   case object ScaleFieldDefBinAsNull extends ScaleFieldDefBin

////////////////////////////////////////////////////////////////////////

// AxisLabelAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the axis labels.
 * 
 * __Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.
 **/
case class AxisLabelAngleAsNumber(value: JsNumber) extends AxisLabelAngle
{ assert(value.value <= 360)
  assert(value.value >= -360) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingAngleBin 
   case class SharedEncodingAngleBinAsBool(value: Boolean) extends SharedEncodingAngleBin
   // BinParams is defined elsewhere
   case object SharedEncodingAngleBinAsNull extends SharedEncodingAngleBin

////////////////////////////////////////////////////////////////////////

// TickConfigCursor (UnionType)

sealed trait TickConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait OverlayMarkDefOuterRadius 
   case class OverlayMarkDefOuterRadiusAsNumber(value: JsNumber) extends OverlayMarkDefOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelUnitSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopoDataFormat (StructType)

case class TopoDataFormat(
  /**
   * The name of the TopoJSON object set to convert to a GeoJSON feature collection. For example, in a map of the world, there may be an object set named `"countries"`. Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.
   **/
  var `feature` : Option[String] = None,
  /**
   * The name of the TopoJSON object set to convert to mesh. Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.  Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features. Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.
   **/
  var `mesh` : Option[String] = None,
  /**
   * If set to `null`, disable type inference based on the spec and only use type inference based on the data. Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)). For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
   * 
   * For `"date"`, we parse data based using JavaScript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse). For Specific date formats can be provided (e.g., `{foo: "date:'%m%d%Y'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:'%m%d%Y'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)
   **/
  var `parse` : Option[Map[String,ParseValue]] = None,
  /**
   * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
   * 
   * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
   **/
  var `type` : Option[TopoDataFormatType] = None
) extends DataFormat 
{  }
object TopoDataFormat {
  val definedFields = Set("feature", "mesh", "parse", "type") 
}

////////////////////////////////////////////////////////////////////////

// MarkType (EnumType)

sealed trait MarkType  { val payload: JsValue }
   case object MarkTypeArc extends MarkType { val payload = JsString("arc") }
   case object MarkTypeArea extends MarkType { val payload = JsString("area") }
   case object MarkTypeImage extends MarkType { val payload = JsString("image") }
   case object MarkTypeGroup extends MarkType { val payload = JsString("group") }
   case object MarkTypeLine extends MarkType { val payload = JsString("line") }
   case object MarkTypePath extends MarkType { val payload = JsString("path") }
   case object MarkTypeRect extends MarkType { val payload = JsString("rect") }
   case object MarkTypeRule extends MarkType { val payload = JsString("rule") }
   case object MarkTypeShape extends MarkType { val payload = JsString("shape") }
   case object MarkTypeSymbol extends MarkType { val payload = JsString("symbol") }
   case object MarkTypeText extends MarkType { val payload = JsString("text") }
   case object MarkTypeTrail extends MarkType { val payload = JsString("trail") }

////////////////////////////////////////////////////////////////////////

// BoxPlotDefMedian (UnionType)

sealed trait BoxPlotDefMedian 
   case class BoxPlotDefMedianAsBool(value: Boolean) extends BoxPlotDefMedian
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigLineBreak (UnionType)

sealed trait LineConfigLineBreak 
   case class LineConfigLineBreakAsString(value: String) extends LineConfigLineBreak
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelSeparation (UnionType)

sealed trait LegendConfigLabelSeparation 
   case class LegendConfigLabelSeparationAsNumber(value: JsNumber) extends LegendConfigLabelSeparation
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelConcatSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait OverlayMarkDefY 
   case class OverlayMarkDefYAsNumber(value: JsNumber) extends OverlayMarkDefY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait OverlayMarkDefX 
   case class OverlayMarkDefXAsNumber(value: JsNumber) extends OverlayMarkDefX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickBandAsString (EnumType)
/**
 * For band scales, indicates if ticks and grid lines should be placed at the `"center"` of a band (default) or at the band `"extent"`s to indicate intervals
 **/
sealed trait AxisTickBandAsString extends AxisTickBand { val payload: JsValue }
   case object AxisTickBandAsStringCenter extends AxisTickBandAsString { val payload = JsString("center") }
   case object AxisTickBandAsStringExtent extends AxisTickBandAsString { val payload = JsString("extent") }

////////////////////////////////////////////////////////////////////////

// AxisTickOffset (UnionType)

sealed trait AxisTickOffset 
   case class AxisTickOffsetAsNumber(value: JsNumber) extends AxisTickOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta2 (StructType)

case class SharedEncodingTheta2(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingTheta2Datum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingTheta2BandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingTheta2Value] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingTheta2TimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
)  
{  }
object SharedEncodingTheta2 {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait RectConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object RectConfigFillAsNull extends RectConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigDx (UnionType)

sealed trait AreaConfigDx 
   case class AreaConfigDxAsNumber(value: JsNumber) extends AreaConfigDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigDy (UnionType)

sealed trait AreaConfigDy 
   case class AreaConfigDyAsNumber(value: JsNumber) extends AreaConfigDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDefStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait PositionFieldDefStack 
   // StackOffset is defined elsewhere
   case object PositionFieldDefStackAsNull extends PositionFieldDefStack
   case class PositionFieldDefStackAsBool(value: Boolean) extends PositionFieldDefStack

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingSizeCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingSizeConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingSizeCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingThetaDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickSize (UnionType)

sealed trait AxisTickSize 
   // AxisTickSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigTheta2 (UnionType)
/**
 * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
 **/
sealed trait LineConfigTheta2 
   case class LineConfigTheta2AsNumber(value: JsNumber) extends LineConfigTheta2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigUrl (UnionType)

sealed trait RectConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Resolve (StructType)
/**
 * Scale, axis, and legend resolutions for view composition specifications.
 **/
case class Resolve(
  var `axis` : Option[AxisResolveMap] = None,
  var `legend` : Option[LegendResolveMap] = None,
  var `scale` : Option[ScaleResolveMap] = None
)  
{  }
object Resolve {
  val definedFields = Set("axis", "legend", "scale") 
}

////////////////////////////////////////////////////////////////////////

// RectConfigBinSpacing (ConstrainedType)
/**
 * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).
 * 
 * __Default value:__ `1`
 **/
case class RectConfigBinSpacing(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// StandardType (EnumType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait StandardType extends SharedEncodingFillOpacityType with SharedEncodingFillType with SharedEncodingYOffsetType with SharedEncodingColorType with SharedEncodingTextType with SharedEncodingXType with SharedEncodingXOffsetType with SharedEncodingStrokeType with SharedEncodingRadiusType with SharedEncodingThetaType with SharedEncodingYType with SharedEncodingStrokeDashType with SharedEncodingAngleType with SharedEncodingSizeType with SharedEncodingOpacityType with SharedEncodingStrokeWidthType with SharedEncodingStrokeOpacityType { val payload: JsValue }
   case object StandardTypeQuantitative extends StandardType { val payload = JsString("quantitative") }
   case object StandardTypeOrdinal extends StandardType { val payload = JsString("ordinal") }
   case object StandardTypeTemporal extends StandardType { val payload = JsString("temporal") }
   case object StandardTypeNominal extends StandardType { val payload = JsString("nominal") }

////////////////////////////////////////////////////////////////////////

// RowColumnEncodingFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait RowColumnEncodingFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait MarkDefShape 
   case class MarkDefShapeAsString(value: String) extends MarkDefShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMaxOpacity (ConstrainedType)
/**
 * Default max opacity for mapping a field to opacity.
 * 
 * __Default value:__ `0.8`
 **/
case class ScaleConfigMaxOpacity(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStartAngle (UnionType)

sealed trait OverlayMarkDefStartAngle 
   case class OverlayMarkDefStartAngleAsNumber(value: JsNumber) extends OverlayMarkDefStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigColumnPadding (UnionType)

sealed trait LegendConfigColumnPadding 
   case class LegendConfigColumnPaddingAsNumber(value: JsNumber) extends LegendConfigColumnPadding
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecFacet (UnionType)
/**
 * Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
 **/
sealed trait TopLevelFacetSpecFacet 
   // FacetFieldDef is defined elsewhere
   // FacetMapping is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BinTransformBin (UnionType)
/**
 * An object indicating bin properties, or simply `true` for using default bin parameters.
 **/
sealed trait BinTransformBin 
   // True is defined elsewhere
   // BinParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Transform (UnionType)

sealed trait Transform 
   // QuantileTransform is defined elsewhere
   // WindowTransform is defined elsewhere
   // FlattenTransform is defined elsewhere
   // CalculateTransform is defined elsewhere
   // DensityTransform is defined elsewhere
   // BinTransform is defined elsewhere
   // RegressionTransform is defined elsewhere
   // ImputeTransform is defined elsewhere
   // LookupTransform is defined elsewhere
   // SampleTransform is defined elsewhere
   // TimeUnitTransform is defined elsewhere
   // JoinAggregateTransform is defined elsewhere
   // StackTransform is defined elsewhere
   // FilterTransform is defined elsewhere
   // FoldTransform is defined elsewhere
   // PivotTransform is defined elsewhere
   // LoessTransform is defined elsewhere
   // AggregateTransform is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LogicalAndPredicate (StructType)

case class LogicalAndPredicate(
  var `and` : Seq[PredicateComposition]
) extends PredicateComposition 
{  }
object LogicalAndPredicate {
  val definedFields = Set("and") 
}

////////////////////////////////////////////////////////////////////////

// ProjectionConfigSpacing (UnionType)

sealed trait ProjectionConfigSpacing 
   case class ProjectionConfigSpacingAsNumber(value: JsNumber) extends ProjectionConfigSpacing
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigMinFontSize (ConstrainedType)
/**
 * The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false
 * 
 * __Default value:__ `8`
 **/
case class ScaleConfigMinFontSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigAngleAsNumber (ConstrainedType)
/**
 * The rotation angle of the text, in degrees.
 **/
case class LineConfigAngleAsNumber(value: JsNumber) extends LineConfigAngle
{ assert(value.value <= 360)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleConfigClamp (UnionType)
/**
 * If true, values that exceed the data domain are clamped to either the minimum or maximum range value
 **/
sealed trait ScaleConfigClamp 
   case class ScaleConfigClampAsBool(value: Boolean) extends ScaleConfigClamp
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LabelOverlap (UnionType)

sealed trait LabelOverlap extends AxisLabelOverlap with LegendConfigLabelOverlap with AxisConfigLabelOverlap
   case class LabelOverlapAsBool(value: Boolean) extends LabelOverlap
   // Parity is defined elsewhere
   // Greedy is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefDx (UnionType)

sealed trait MarkDefDx 
   case class MarkDefDxAsNumber(value: JsNumber) extends MarkDefDx
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefDy (UnionType)

sealed trait MarkDefDy 
   case class MarkDefDyAsNumber(value: JsNumber) extends MarkDefDy
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Locale (StructType)
/**
 * Locale definitions for string parsing and formatting of number and date values. The locale object should contain `number` and/or `time` properties with [locale definitions](https://vega.github.io/vega/docs/api/locale/). Locale definitions provided in the config block may be overridden by the View constructor locale option.
 **/
case class Locale(
  /**
   * Locale definition for formatting numbers.
   **/
  var `number` : Option[NumberLocale] = None,
  /**
   * Locale definition for formatting dates and times.
   **/
  var `time` : Option[TimeLocale] = None
)  
{  }
object Locale {
  val definedFields = Set("number", "time") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeDash (UnionType)

sealed trait LineConfigStrokeDash 
   case class LineConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends LineConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefTension (UnionType)

sealed trait OverlayMarkDefTension 
   case class OverlayMarkDefTensionAsNumber(value: JsNumber) extends OverlayMarkDefTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBandDefOpacity (ConstrainedType)
/**
 * The opacity (value between [0,1]) of the mark.
 **/
case class ErrorBandDefOpacity(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// DateTimeQuarter (ConstrainedType)
/**
 * Integer value representing the quarter of the year (from 1-4).
 **/
case class DateTimeQuarter(value: JsNumber) 
{ assert(value.value <= 4)
  assert(value.value >= 1) }

////////////////////////////////////////////////////////////////////////

// LoessTransformAs (ConstrainedType)
/**
 * The output field names for the smoothed points generated by the loess transform.
 * 
 * __Default value:__ The field names of the input x and y values.
 **/
case class LoessTransformAs(value: Seq[String]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// TitleParamsFontStyle (UnionType)

sealed trait TitleParamsFontStyle 
   case class TitleParamsFontStyleAsString(value: String) extends TitleParamsFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleFontWeight (UnionType)

sealed trait LegendConfigTitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfig (StructType)
/**
 * Header configuration, which determines default properties for all [headers](https://vega.github.io/vega-lite/docs/header.html).
 * 
 * For a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config).
 **/
case class HeaderConfig(
  /**
   * The rotation angle of the header labels.
   * 
   * __Default value:__ `0` for column header, `-90` for row header.
   **/
  var `labelAngle` : Option[HeaderConfigLabelAngle] = None,
  /**
   * The color of the header label, can be in hex color code or regular color name.
   **/
  var `labelColor` : Option[HeaderConfigLabelColor] = None,
  /**
   * The font weight of the header label.
   **/
  var `labelFontWeight` : Option[HeaderConfigLabelFontWeight] = None,
  /**
   * The padding, in pixel, between facet header's title and the label.
   * 
   * __Default value:__ `10`
   **/
  var `titlePadding` : Option[HeaderConfigTitlePadding] = None,
  /**
   * A boolean flag indicating if labels should be included as part of the header.
   * 
   * __Default value:__ `true`.
   **/
  var `labels` : Option[Boolean] = None,
  /**
   * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
   * 
   * __Note:__ The label text and value can be assessed via the `label` and `value` properties of the header's backing `datum` object.
   **/
  var `labelExpr` : Option[String] = None,
  /**
   * Set to null to disable title for the axis, legend, or header.
   **/
  var `title` : Option[JsNull.type] = None,
  /**
   * The vertical text baseline for the header title. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
   * 
   * __Default value:__ `"middle"`
   **/
  var `titleBaseline` : Option[HeaderConfigTitleBaseline] = None,
  /**
   * The vertical text baseline for the header labels. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
   **/
  var `labelBaseline` : Option[HeaderConfigLabelBaseline] = None,
  /**
   * The font size of the header label, in pixels.
   **/
  var `labelFontSize` : Option[HeaderConfigLabelFontSize] = None,
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[HeaderConfigFormat] = None,
  /**
   * Font of the header title. (e.g., `"Helvetica Neue"`).
   **/
  var `titleFont` : Option[HeaderConfigTitleFont] = None,
  /**
   * The font style of the header title.
   **/
  var `titleFontStyle` : Option[HeaderConfigTitleFontStyle] = None,
  /**
   * Line height in pixels for multi-line header title text or title text with `"line-top"` or `"line-bottom"` baseline.
   **/
  var `titleLineHeight` : Option[HeaderConfigTitleLineHeight] = None,
  /**
   * Line height in pixels for multi-line header labels or title text with `"line-top"` or `"line-bottom"` baseline.
   **/
  var `labelLineHeight` : Option[HeaderConfigLabelLineHeight] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
   * 
   * __Default value:__ `0`, indicating no limit
   **/
  var `labelLimit` : Option[HeaderConfigLabelLimit] = None,
  /**
   * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
   **/
  var `titleAnchor` : Option[TitleAnchor] = None,
  /**
   * Color of the header title, can be in hex color code or regular color name.
   **/
  var `titleColor` : Option[HeaderConfigTitleColor] = None,
  /**
   * Shortcut for setting both labelOrient and titleOrient.
   **/
  var `orient` : Option[Orient] = None,
  /**
   * The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
   **/
  var `titleOrient` : Option[Orient] = None,
  /**
   * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
   **/
  var `labelAlign` : Option[HeaderConfigLabelAlign] = None,
  /**
   * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
   **/
  var `labelOrient` : Option[Orient] = None,
  /**
   * The rotation angle of the header title.
   * 
   * __Default value:__ `0`.
   **/
  var `titleAngle` : Option[HeaderConfigTitleAngle] = None,
  /**
   * The padding, in pixel, between facet header's label and the plot.
   * 
   * __Default value:__ `10`
   **/
  var `labelPadding` : Option[HeaderConfigLabelPadding] = None,
  /**
   * The font of the header label.
   **/
  var `labelFont` : Option[HeaderConfigLabelFont] = None,
  /**
   * The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.
   **/
  var `labelAnchor` : Option[TitleAnchor] = None,
  /**
   * The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
   * 
   * __Default value:__ `0`, indicating no limit
   **/
  var `titleLimit` : Option[HeaderConfigTitleLimit] = None,
  /**
   * The font style of the header label.
   **/
  var `labelFontStyle` : Option[HeaderConfigLabelFontStyle] = None,
  /**
   * Horizontal text alignment (to the anchor) of header titles.
   **/
  var `titleAlign` : Option[HeaderConfigTitleAlign] = None,
  /**
   * Font size of the header title.
   **/
  var `titleFontSize` : Option[HeaderConfigTitleFontSize] = None,
  /**
   * Font weight of the header title. This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
   **/
  var `titleFontWeight` : Option[HeaderConfigTitleFontWeight] = None
)  
{  }
object HeaderConfig {
  val definedFields = Set("labelAngle", "labels", "labelBaseline", "labelExpr", "titleBaseline", "titleFont", "labelAnchor", "titleColor", "labelFontStyle", "labelOrient", "labelLimit", "labelColor", "titleAlign", "titleFontSize", "titlePadding", "labelFontWeight", "labelFont", "titleFontWeight", "labelPadding", "titleLimit", "titleFontStyle", "format", "titleAnchor", "labelFontSize", "title", "titleAngle", "labelAlign", "titleOrient", "orient", "formatType", "titleLineHeight", "labelLineHeight") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigGridColor (UnionType)
/**
 * Color of gridlines.
 * 
 * __Default value:__ `"lightGray"`.
 **/
sealed trait AxisConfigGridColor 
   case object AxisConfigGridColorAsNull extends AxisConfigGridColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisValues (UnionType)
/**
 * Explicitly set the visible axis tick values.
 **/
sealed trait AxisValues 
   case class AxisValuesAsArrayOfNumber(value: Seq[JsNumber]) extends AxisValues
   case class AxisValuesAsArrayOfBool(value: Seq[Boolean]) extends AxisValues
   // ExprRef is defined elsewhere
   case class AxisValuesAsArrayOfDateTime(value: Seq[DateTime]) extends AxisValues
   case class AxisValuesAsArrayOfString(value: Seq[String]) extends AxisValues

////////////////////////////////////////////////////////////////////////

// PositionDatumDefDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait PositionDatumDefDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXError (StructType)

case class SharedEncodingXError(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingXErrorBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[JsNumber] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingXErrorTimeUnit] = None
)  
{  }
object SharedEncodingXError {
  val definedFields = Set("bin", "timeUnit", "bandPosition", "aggregate", "title", "field", "value") 
}

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject2Filter (UnionType)

sealed trait EventStreamAsObject2Filter 
   case class EventStreamAsObject2FilterAsString(value: String) extends EventStreamAsObject2Filter
   case class EventStreamAsObject2FilterAsArrayOfString(value: Seq[String]) extends EventStreamAsObject2Filter

////////////////////////////////////////////////////////////////////////

// AxisMinExtent (UnionType)

sealed trait AxisMinExtent 
   case class AxisMinExtentAsNumber(value: JsNumber) extends AxisMinExtent
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingStrokeDashValue 
   case class SharedEncodingStrokeDashValueAsArrayOfNumber(value: Seq[JsNumber]) extends SharedEncodingStrokeDashValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigPoint (UnionType)
/**
 * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.
 * 
 * - If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).
 * 
 * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.
 * 
 * - If this property is `false`, no points would be automatically added to line or area marks.
 * 
 * __Default value:__ `false`.
 **/
sealed trait AreaConfigPoint 
   case class AreaConfigPointAsBool(value: Boolean) extends AreaConfigPoint
   // OverlayMarkDef is defined elsewhere
   // Transparent is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionDistance (UnionType)

sealed trait ProjectionDistance 
   case class ProjectionDistanceAsNumber(value: JsNumber) extends ProjectionDistance
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingFillBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefGradientStringNullCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefGradientStringNullCondition 
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionDatumDefGradientStringNullConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends FieldOrDatumDefWithConditionDatumDefGradientStringNullCondition

////////////////////////////////////////////////////////////////////////

// UtcSingleTimeUnit (EnumType)

sealed trait UtcSingleTimeUnit extends SingleTimeUnit { val payload: JsValue }
   case object UtcSingleTimeUnitUtcyear extends UtcSingleTimeUnit { val payload = JsString("utcyear") }
   case object UtcSingleTimeUnitUtcquarter extends UtcSingleTimeUnit { val payload = JsString("utcquarter") }
   case object UtcSingleTimeUnitUtcmonth extends UtcSingleTimeUnit { val payload = JsString("utcmonth") }
   case object UtcSingleTimeUnitUtcweek extends UtcSingleTimeUnit { val payload = JsString("utcweek") }
   case object UtcSingleTimeUnitUtcday extends UtcSingleTimeUnit { val payload = JsString("utcday") }
   case object UtcSingleTimeUnitUtcdayofyear extends UtcSingleTimeUnit { val payload = JsString("utcdayofyear") }
   case object UtcSingleTimeUnitUtcdate extends UtcSingleTimeUnit { val payload = JsString("utcdate") }
   case object UtcSingleTimeUnitUtchours extends UtcSingleTimeUnit { val payload = JsString("utchours") }
   case object UtcSingleTimeUnitUtcminutes extends UtcSingleTimeUnit { val payload = JsString("utcminutes") }
   case object UtcSingleTimeUnitUtcseconds extends UtcSingleTimeUnit { val payload = JsString("utcseconds") }
   case object UtcSingleTimeUnitUtcmilliseconds extends UtcSingleTimeUnit { val payload = JsString("utcmilliseconds") }

////////////////////////////////////////////////////////////////////////

// MarkConfigUrl (UnionType)

sealed trait MarkConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontWeightAsObject2Condition (UnionType)

sealed trait ConditionalAxisLabelFontWeightAsObject2Condition 
   // ConditionalPredicateValueDefFontWeightNullExprRef is defined elsewhere
   case class ConditionalAxisLabelFontWeightAsObject2ConditionAsArrayOfConditionalPredicateValueDefFontWeightNullExprRef(value: Seq[ConditionalPredicateValueDefFontWeightNullExprRef]) extends ConditionalAxisLabelFontWeightAsObject2Condition

////////////////////////////////////////////////////////////////////////

// BindRange (StructType)

case class BindRange(
  /**
   * By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.
   **/
  var `name` : Option[String] = None,
  /**
   * Sets the minimum slider increment. If undefined, the step size will be automatically determined based on the `min` and `max` values.
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * Sets the minimum slider value. Defaults to the smaller of the signal value and `0`.
   **/
  var `min` : Option[JsNumber] = None,
  /**
   * An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view.
   **/
  var `element` : Option[String] = None,
  /**
   * Sets the maximum slider value. Defaults to the larger of the signal value and `100`.
   **/
  var `max` : Option[JsNumber] = None,
  var `input` : BindRangeInput,
  /**
   * If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.
   **/
  var `debounce` : Option[JsNumber] = None
) extends Binding 
{  }
object BindRange {
  val definedFields = Set("max", "step", "debounce", "min", "name", "element", "input") 
}

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleColor (UnionType)
/**
 * Text color for subtitle text.
 **/
sealed trait TitleParamsSubtitleColor 
   case object TitleParamsSubtitleColorAsNull extends TitleParamsSubtitleColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class PositionDatumDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionType (EnumType)

sealed trait ProjectionType extends ProjectionConfigType { val payload: JsValue }
   case object ProjectionTypeAlbers extends ProjectionType { val payload = JsString("albers") }
   case object ProjectionTypeAlbersUsa extends ProjectionType { val payload = JsString("albersUsa") }
   case object ProjectionTypeAzimuthalEqualArea extends ProjectionType { val payload = JsString("azimuthalEqualArea") }
   case object ProjectionTypeAzimuthalEquidistant extends ProjectionType { val payload = JsString("azimuthalEquidistant") }
   case object ProjectionTypeConicConformal extends ProjectionType { val payload = JsString("conicConformal") }
   case object ProjectionTypeConicEqualArea extends ProjectionType { val payload = JsString("conicEqualArea") }
   case object ProjectionTypeConicEquidistant extends ProjectionType { val payload = JsString("conicEquidistant") }
   case object ProjectionTypeEqualEarth extends ProjectionType { val payload = JsString("equalEarth") }
   case object ProjectionTypeEquirectangular extends ProjectionType { val payload = JsString("equirectangular") }
   case object ProjectionTypeGnomonic extends ProjectionType { val payload = JsString("gnomonic") }
   case object ProjectionTypeIdentity extends ProjectionType { val payload = JsString("identity") }
   case object ProjectionTypeMercator extends ProjectionType { val payload = JsString("mercator") }
   case object ProjectionTypeNaturalEarth1 extends ProjectionType { val payload = JsString("naturalEarth1") }
   case object ProjectionTypeOrthographic extends ProjectionType { val payload = JsString("orthographic") }
   case object ProjectionTypeStereographic extends ProjectionType { val payload = JsString("stereographic") }
   case object ProjectionTypeTransverseMercator extends ProjectionType { val payload = JsString("transverseMercator") }

////////////////////////////////////////////////////////////////////////

// AreaConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait AreaConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefBlend (UnionType)

sealed trait MarkDefBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkDefOuterRadius 
   case class MarkDefOuterRadiusAsNumber(value: JsNumber) extends MarkDefOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigWithoutTypeTranslate (UnionType)

sealed trait IntervalSelectionConfigWithoutTypeTranslate 
   case class IntervalSelectionConfigWithoutTypeTranslateAsString(value: String) extends IntervalSelectionConfigWithoutTypeTranslate
   case class IntervalSelectionConfigWithoutTypeTranslateAsBool(value: Boolean) extends IntervalSelectionConfigWithoutTypeTranslate

////////////////////////////////////////////////////////////////////////

// LineConfigCornerRadius (UnionType)

sealed trait LineConfigCornerRadius 
   case class LineConfigCornerRadiusAsNumber(value: JsNumber) extends LineConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalValueDefNumber (UnionType)

sealed trait ConditionalValueDefNumber extends OrderValueDefCondition
   // ConditionalPredicateValueDefNumber is defined elsewhere
   // ConditionalParameterValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingFillOpacityCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class SharedEncodingFillOpacityConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends SharedEncodingFillOpacityCondition
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingKey (StructType)

case class SharedEncodingKey(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingKeyBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingKeyBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingKeyTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object SharedEncodingKey {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitudeTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingLongitudeTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullCondition 
   // ConditionalValueDefGradientStringNullExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullConditionAsArrayOfConditionalValueDefGradientStringNullExprRef(value: Seq[ConditionalValueDefGradientStringNullExprRef]) extends FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullCondition

////////////////////////////////////////////////////////////////////////

// RectConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait RectConfigRadius 
   case class RectConfigRadiusAsNumber(value: JsNumber) extends RectConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelConcatSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingStrokeDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait OverlayMarkDefRadius2 
   case class OverlayMarkDefRadius2AsNumber(value: JsNumber) extends OverlayMarkDefRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingShapeBin 
   case class SharedEncodingShapeBinAsBool(value: Boolean) extends SharedEncodingShapeBin
   // BinParams is defined elsewhere
   case object SharedEncodingShapeBinAsNull extends SharedEncodingShapeBin

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefInterpolate (UnionType)

sealed trait OverlayMarkDefInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TextDef (UnionType)
/**
 * Text of the `text` mark.
 **/
sealed trait TextDef 
   // FieldOrDatumDefWithConditionStringFieldDefText is defined elsewhere
   // FieldOrDatumDefWithConditionStringDatumDefText is defined elsewhere
   // ValueDefWithConditionStringFieldDefText is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingXBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// NonLayerRepeatSpecAlign (UnionType)
/**
 * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
 * 
 * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
 * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
 * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
 * 
 * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
 * 
 * __Default value:__ `"all"`.
 **/
sealed trait NonLayerRepeatSpecAlign 
   // LayoutAlign is defined elsewhere
   // RowColLayoutAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisAria (UnionType)

sealed trait AxisAria 
   case class AxisAriaAsBool(value: Boolean) extends AxisAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingDescriptionBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingDescriptionBin 
   case class SharedEncodingDescriptionBinAsBool(value: Boolean) extends SharedEncodingDescriptionBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingDescriptionBinAsNull extends SharedEncodingDescriptionBin

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingOpacityType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadiusTopRight (UnionType)

sealed trait MarkDefCornerRadiusTopRight 
   case class MarkDefCornerRadiusTopRightAsNumber(value: JsNumber) extends MarkDefCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingUrlTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingUrlTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigCornerRadiusTopRight (UnionType)

sealed trait TickConfigCornerRadiusTopRight 
   case class TickConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends TickConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Height (ConstantType)

case class Height() extends MarkDefY with SharedEncodingRadius2Value with TickConfigY2 with BarConfigY2 with LineConfigY with RectConfigY2 with RectConfigY with OverlayMarkDefY with SharedEncodingRadiusValue with SharedEncodingLongitude2Value with OverlayMarkDefY2 with SharedEncodingLatitude2Value with MarkDefY2 with MarkConfigY2 with PositionValueDefValue with SharedEncodingThetaValue with AreaConfigY2 with BarConfigY with SharedEncodingX2Value with AreaConfigY with SharedEncodingYValue with LineConfigY2 with SharedEncodingTheta2Value with TickConfigY with MarkConfigY with SharedEncodingXValue with SharedEncodingY2Value

////////////////////////////////////////////////////////////////////////

// TickConfigCornerRadius (UnionType)

sealed trait TickConfigCornerRadius 
   case class TickConfigCornerRadiusAsNumber(value: JsNumber) extends TickConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// DateTimeMonth (UnionType)
/**
 * One of: (1) integer value representing the month from `1`-`12`. `1` represents January; (2) case-insensitive month name (e.g., `"January"`); (3) case-insensitive, 3-character short month name (e.g., `"Jan"`).
 **/
sealed trait DateTimeMonth 
   // Month is defined elsewhere
   case class DateTimeMonthAsString(value: String) extends DateTimeMonth

////////////////////////////////////////////////////////////////////////

// MarkConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait MarkConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldGTEPredicateTimeUnit (UnionType)
/**
 * Time unit for the field to be tested.
 **/
sealed trait FieldGTEPredicateTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolLimit (UnionType)

sealed trait LegendConfigSymbolLimit 
   case class LegendConfigSymbolLimitAsNumber(value: JsNumber) extends LegendConfigSymbolLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelSpec (UnionType)
/**
 * A Vega-Lite top-level specification. This is the root class for all Vega-Lite specifications. (The json schema is generated from this type.)
 **/
sealed trait TopLevelSpec 
   // TopLevelLayerSpec is defined elsewhere
   // TopLevelVConcatSpec is defined elsewhere
   // TopLevelRepeatSpec is defined elsewhere
   // TopLevelUnitSpec is defined elsewhere
   // TopLevelFacetSpec is defined elsewhere
   // TopLevelHConcatSpec is defined elsewhere
   // TopLevelConcatSpec is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigCornerRadius (UnionType)

sealed trait RectConfigCornerRadius 
   case class RectConfigCornerRadiusAsNumber(value: JsNumber) extends RectConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelConcatSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait TopLevelConcatSpecCenter 
   case class TopLevelConcatSpecCenterAsBool(value: Boolean) extends TopLevelConcatSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Scale (StructType)

case class Scale(
  /**
   * Sets the minimum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges.
   **/
  var `rangeMin` : Option[ScaleRangeMin] = None,
  /**
   * The outer padding (spacing) at the ends of the range of band and point scales, as a fraction of the step size. This value must lie in the range [0,1].
   * 
   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales. By default, Vega-Lite sets outer padding such that _width/height = number of unique values * step_.
   **/
  var `paddingOuter` : Option[ScalePaddingOuter] = None,
  /**
   * Sets the minimum value in the scale domain, overriding the domain property. This property is only intended for use with scales having continuous domains.
   **/
  var `domainMin` : Option[ScaleDomainMin] = None,
  /**
   * If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.
   * 
   * __Default value:__ `false`.
   **/
  var `round` : Option[ScaleRound] = None,
  /**
   * For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the `zero`, `nice`, `domainMin`, and `domainMax` properties.
   * 
   * For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.
   * 
   * For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.
   * 
   * __Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`. For _band and point_ scales, see `paddingInner` and `paddingOuter`. By default, Vega-Lite sets padding such that _width/height = number of unique values * step_.
   **/
  var `padding` : Option[ScalePadding] = None,
  /**
   * The type of scale. Vega-Lite supports the following categories of scale types:
   * 
   * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`"linear"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`"pow"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`"sqrt"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`"symlog"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`"log"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`"time"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`"utc"`](https://vega.github.io/vega-lite/docs/scale.html#utc).
   * 
   * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`"ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`"band"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`"point"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.
   * 
   * 3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`"bin-ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`"quantile"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`"quantize"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`"threshold"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).
   * 
   * __Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).
   **/
  var `type` : Option[ScaleType] = None,
  /**
   * Bin boundaries can be provided to scales as either an explicit array of bin boundaries or as a bin specification object. The legal values are:
   * - An [array](../types/#Array) literal of bin boundary values. For example, `[0, 5, 10, 15, 20]`. The array must include both starting and ending boundaries. The previous example uses five values to indicate a total of four bin intervals: [0-5), [5-10), [10-15), [15-20]. Array literals may include signal references as elements.
   * - A [bin specification object](https://vega.github.io/vega-lite/docs/scale.html#bins) that indicates the bin _step_ size, and optionally the _start_ and _stop_ boundaries.
   * - An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.
   **/
  var `bins` : Option[ScaleBins] = None,
  /**
   * Inserts a single mid-point value into a two-element domain. The mid-point value must lie between the domain minimum and maximum values. This property can be useful for setting a midpoint for [diverging color scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise). The domainMid property is only intended for use with scales supporting continuous, piecewise domains.
   **/
  var `domainMid` : Option[ScaleDomainMid] = None,
  /**
   * Sets the maximum value in the scale range, overriding the `range` property or the default range. This property is only intended for use with scales having continuous ranges.
   **/
  var `rangeMax` : Option[ScaleRangeMax] = None,
  /**
   * A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.
   * 
   * __Default value:__ `1`
   **/
  var `constant` : Option[ScaleConstant] = None,
  /**
   * If `true`, ensures that a zero baseline value is included in the scale domain.
   * 
   * __Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.
   * 
   * __Note:__ Log, time, and utc scales do not support `zero`.
   **/
  var `zero` : Option[ScaleZero] = None,
  /**
   * Sets the maximum value in the scale domain, overriding the `domain` property. This property is only intended for use with scales having continuous domains.
   **/
  var `domainMax` : Option[ScaleDomainMax] = None,
  /**
   * The alignment of the steps within the scale range.
   * 
   * This value must lie in the range `[0,1]`. A value of `0.5` indicates that the steps should be centered within the range. A value of `0` or `1` may be used to shift the bands to one side, say to position them adjacent to an axis.
   * 
   * __Default value:__ `0.5`
   **/
  var `align` : Option[ScaleAlign] = None,
  /**
   * Customized domain values in the form of constant values or dynamic values driven by a parameter.
   * 
   * 1) Constant `domain` for _quantitative_ fields can take one of the following forms:
   * 
   * - A two-element array with minimum and maximum values. To create a diverging scale, this two-element array can be combined with the `domainMid` property.
   * - An array with more than two entries, for [Piecewise quantitative scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
   * - A string value `"unaggregated"`, if the input field is aggregated, to indicate that the domain should include the raw data values prior to the aggregation.
   * 
   * 2) Constant `domain` for _temporal_ fields can be a two-element array with minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).
   * 
   * 3) Constant `domain` for _ordinal_ and _nominal_ fields can be an array that lists valid input values.
   * 
   * 4) To combine (union) specified constant domain with the field's values, `domain` can be an object with a `unionWith` property that specify constant domain to be combined. For example, `domain: {unionWith: [0, 100]}` for a quantitative scale means that the scale domain always includes `[0, 100]`, but will include other values in the fields beyond `[0, 100]`.
   * 
   * 5) Domain can also takes an object defining a field or encoding of a parameter that [interactively determines](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.
   **/
  var `domain` : Option[ScaleDomain] = None,
  /**
   * Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.
   * 
   * For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.
   * 
   * For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{"interval": "month", "step": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.
   * 
   * __Default value:__ `true` for unbinned _quantitative_ fields without explicit domain bounds; `false` otherwise.
   **/
  var `nice` : Option[ScaleNice] = None,
  /**
   * If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value
   * 
   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true` by default).
   **/
  var `clamp` : Option[ScaleClamp] = None,
  /**
   * The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].
   * 
   * For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).
   * 
   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.
   **/
  var `paddingInner` : Option[ScalePaddingInner] = None,
  /**
   * The exponent of the `pow` scale.
   **/
  var `exponent` : Option[ScaleExponent] = None,
  /**
   * The logarithm base of the `log` scale (default `10`).
   **/
  var `base` : Option[ScaleBase] = None,
  /**
   * If true, reverses the order of the scale range. __Default value:__ `false`.
   **/
  var `reverse` : Option[ScaleReverse] = None,
  /**
   * A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `"category10"` or `"blues"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).
   * 
   * Discrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.
   * 
   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
   **/
  var `scheme` : Option[ScaleScheme] = None,
  /**
   * The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).
   * 
   * * __Default value:__ `hcl`
   **/
  var `interpolate` : Option[ScaleInterpolate] = None,
  /**
   * The range of the scale. One of:
   * 
   * - A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `"symbol"`, or `"diverging"`).
   * 
   * - For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).
   * 
   * - For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values or an object with a `field` property representing the range values.  For example, if a field `color` contains CSS color names, we can set `range` to `{field: "color"}`.
   * 
   * __Notes:__
   * 
   * 1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.
   * 
   * 2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`).
   **/
  var `range` : Option[ScaleRange] = None
)  
{  }
object Scale {
  val definedFields = Set("type", "exponent", "nice", "paddingOuter", "reverse", "rangeMin", "clamp", "align", "interpolate", "bins", "paddingInner", "constant", "padding", "domainMax", "range", "domainMid", "zero", "domainMin", "scheme", "rangeMax", "domain", "round", "base") 
}

////////////////////////////////////////////////////////////////////////

// DateTimeMilliseconds (ConstrainedType)
/**
 * Integer value representing the millisecond segment of time.
 **/
case class DateTimeMilliseconds(value: JsNumber) 
{ assert(value.value <= 1000)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// LineConfigColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait LineConfigColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingYType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingYType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingX2TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingX2TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeWidth (UnionType)

sealed trait ViewConfigStrokeWidth 
   // ViewConfigStrokeWidthAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDef (StructType)

case class OverlayMarkDef(
  /**
   * Offset for x2-position.
   **/
  var `x2Offset` : Option[OverlayMarkDefX2Offset] = None,
  var `cornerRadiusBottomRight` : Option[OverlayMarkDefCornerRadiusBottomRight] = None,
  var `fillOpacity` : Option[OverlayMarkDefFillOpacity] = None,
  var `strokeMiterLimit` : Option[OverlayMarkDefStrokeMiterLimit] = None,
  var `dir` : Option[OverlayMarkDefDir] = None,
  /**
   * Offset for theta2.
   **/
  var `theta2Offset` : Option[OverlayMarkDefTheta2Offset] = None,
  /**
   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
   * 
   * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
   * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
   * - If set to `null` or `false`, then no tooltip will be used.
   * 
   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
   * 
   * __Default value:__ `null`
   **/
  var `tooltip` : Option[OverlayMarkDefTooltip] = None,
  var `cornerRadiusTopRight` : Option[OverlayMarkDefCornerRadiusTopRight] = None,
  /**
   * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
   * 
   * __Default value:__ `0`
   **/
  var `outerRadius` : Option[OverlayMarkDefOuterRadius] = None,
  /**
   * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x` : Option[OverlayMarkDefX] = None,
  var `dy` : Option[OverlayMarkDefDy] = None,
  /**
   * Offset for x-position.
   **/
  var `xOffset` : Option[OverlayMarkDefXOffset] = None,
  /**
   * Default size for marks.
   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
   * - For `bar`, this represents the band size of the bar, in pixels.
   * - For `text`, this represents the font size, in pixels.
   * 
   * __Default value:__
   * - `30` for point, circle, square marks; width/height's `step`
   * - `2` for bar marks with discrete dimensions;
   * - `5` for bar marks with continuous dimensions;
   * - `11` for text marks.
   **/
  var `size` : Option[OverlayMarkDefSize] = None,
  var `smooth` : Option[OverlayMarkDefSmooth] = None,
  var `url` : Option[OverlayMarkDefUrl] = None,
  /**
   * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.
   * 
   * __Default value:__ The mark's name. For example, a bar mark will have style `"bar"` by default. __Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).
   **/
  var `style` : Option[OverlayMarkDefStyle] = None,
  /**
   * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y` : Option[OverlayMarkDefY] = None,
  var `strokeOpacity` : Option[OverlayMarkDefStrokeOpacity] = None,
  var `ellipsis` : Option[OverlayMarkDefEllipsis] = None,
  var `description` : Option[OverlayMarkDefDescription] = None,
  var `angle` : Option[OverlayMarkDefAngle] = None,
  var `lineBreak` : Option[OverlayMarkDefLineBreak] = None,
  var `tension` : Option[OverlayMarkDefTension] = None,
  var `cornerRadiusTopLeft` : Option[OverlayMarkDefCornerRadiusTopLeft] = None,
  /**
   * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
   * 
   * __Default value:__ (None)
   **/
  var `stroke` : Option[OverlayMarkDefStroke] = None,
  var `strokeDashOffset` : Option[OverlayMarkDefStrokeDashOffset] = None,
  /**
   * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `align` : Option[OverlayMarkDefAlign] = None,
  var `ariaRole` : Option[OverlayMarkDefAriaRole] = None,
  var `strokeCap` : Option[OverlayMarkDefStrokeCap] = None,
  var `endAngle` : Option[OverlayMarkDefEndAngle] = None,
  var `strokeJoin` : Option[OverlayMarkDefStrokeJoin] = None,
  /**
   * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
   * 
   * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
   * 
   * __Note:__ Expression reference is *not* supported for range marks.
   **/
  var `baseline` : Option[OverlayMarkDefBaseline] = None,
  var `ariaRoleDescription` : Option[OverlayMarkDefAriaRoleDescription] = None,
  var `aspect` : Option[OverlayMarkDefAspect] = None,
  var `height` : Option[OverlayMarkDefHeight] = None,
  var `fontStyle` : Option[OverlayMarkDefFontStyle] = None,
  var `text` : Option[OverlayMarkDefText] = None,
  var `cornerRadius` : Option[OverlayMarkDefCornerRadius] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[OverlayMarkDefColor] = None,
  /**
   * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
   **/
  var `x2` : Option[OverlayMarkDefX2] = None,
  var `padAngle` : Option[OverlayMarkDefPadAngle] = None,
  var `cursor` : Option[OverlayMarkDefCursor] = None,
  /**
   * For arc mark, the primary (outer) radius in pixels.
   * 
   * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
   * 
   * __Default value:__ `min(plot_width, plot_height)/2`
   **/
  var `radius` : Option[OverlayMarkDefRadius] = None,
  /**
   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step. If set to `0.5`, bandwidth of the marks will be half of the time unit band step.
   **/
  var `timeUnitBandSize` : Option[JsNumber] = None,
  var `startAngle` : Option[OverlayMarkDefStartAngle] = None,
  var `font` : Option[OverlayMarkDefFont] = None,
  /**
   * The secondary (inner) radius in pixels of arc marks.
   * 
   * __Default value:__ `0`
   **/
  var `radius2` : Option[OverlayMarkDefRadius2] = None,
  /**
   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
   * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
   **/
  var `invalid` : Option[OverlayMarkDefInvalid] = None,
  /**
   * Offset for radius2.
   **/
  var `radius2Offset` : Option[OverlayMarkDefRadius2Offset] = None,
  var `lineHeight` : Option[OverlayMarkDefLineHeight] = None,
  /**
   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.
   **/
  var `order` : Option[OverlayMarkDefOrder] = None,
  /**
   * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
   * 
   * __Default value:__ (None)
   **/
  var `fill` : Option[OverlayMarkDefFill] = None,
  var `interpolate` : Option[OverlayMarkDefInterpolate] = None,
  /**
   * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
   * 
   * - For text marks, polar coordinate angle in radians.
   **/
  var `theta` : Option[OverlayMarkDefTheta] = None,
  /**
   * The orientation of a non-stacked bar, tick, area, and line charts. The value is either horizontal (default) or vertical.
   * - For bar, rule and tick, this determines whether the size of the bar and tick should be applied to x or y dimension.
   * - For area, this property determines the orient property of the Vega output.
   * - For line and trail marks, this property determines the sort order of the points in the line if `config.sortLineBy` is not specified. For stacked charts, this is always determined by the orientation of the stack; therefore explicitly specified value will be ignored.
   **/
  var `orient` : Option[Orientation] = None,
  /**
   * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
   * 
   * __Default value:__ `0`
   **/
  var `innerRadius` : Option[OverlayMarkDefInnerRadius] = None,
  var `fontSize` : Option[OverlayMarkDefFontSize] = None,
  /**
   * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
   * 
   * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
   **/
  var `y2` : Option[OverlayMarkDefY2] = None,
  var `shape` : Option[OverlayMarkDefShape] = None,
  var `aria` : Option[OverlayMarkDefAria] = None,
  /**
   * The overall opacity (value between [0,1]).
   * 
   * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
   **/
  var `opacity` : Option[OverlayMarkDefOpacity] = None,
  /**
   * Offset for radius.
   **/
  var `radiusOffset` : Option[OverlayMarkDefRadiusOffset] = None,
  var `dx` : Option[OverlayMarkDefDx] = None,
  /**
   * Whether a mark be clipped to the enclosing group’s width and height.
   **/
  var `clip` : Option[Boolean] = None,
  var `cornerRadiusBottomLeft` : Option[OverlayMarkDefCornerRadiusBottomLeft] = None,
  var `href` : Option[OverlayMarkDefHref] = None,
  var `strokeDash` : Option[OverlayMarkDefStrokeDash] = None,
  var `strokeOffset` : Option[OverlayMarkDefStrokeOffset] = None,
  var `limit` : Option[OverlayMarkDefLimit] = None,
  /**
   * Offset for y2-position.
   **/
  var `y2Offset` : Option[OverlayMarkDefY2Offset] = None,
  /**
   * Offset for theta.
   **/
  var `thetaOffset` : Option[OverlayMarkDefThetaOffset] = None,
  var `width` : Option[OverlayMarkDefWidth] = None,
  var `fontWeight` : Option[OverlayMarkDefFontWeight] = None,
  /**
   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step. If set to `0.5`, the marks will be positioned in the middle of the time unit band step.
   **/
  var `timeUnitBandPosition` : Option[JsNumber] = None,
  /**
   * Offset for y-position.
   **/
  var `yOffset` : Option[OverlayMarkDefYOffset] = None,
  /**
   * Whether the mark's color should be used as fill color instead of stroke color.
   * 
   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.
   * 
   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   **/
  var `filled` : Option[Boolean] = None,
  var `blend` : Option[OverlayMarkDefBlend] = None,
  var `strokeWidth` : Option[OverlayMarkDefStrokeWidth] = None,
  /**
   * The end angle of arc marks in radians. A value of 0 indicates up or “north”, increasing values proceed clockwise.
   **/
  var `theta2` : Option[OverlayMarkDefTheta2] = None
) extends AreaConfigLine with LineConfigPoint with MarkDefLine with AreaConfigPoint with MarkDefPoint 
{  }
object OverlayMarkDef {
  val definedFields = Set("padAngle", "strokeDashOffset", "ariaRole", "cornerRadiusBottomLeft", "dy", "startAngle", "ellipsis", "angle", "x2", "fontSize", "font", "strokeWidth", "href", "text", "y", "lineBreak", "fontStyle", "endAngle", "outerRadius", "url", "strokeCap", "opacity", "fillOpacity", "color", "timeUnitBandSize", "size", "innerRadius", "theta2Offset", "thetaOffset", "strokeOffset", "dir", "x2Offset", "theta", "limit", "filled", "aria", "fontWeight", "invalid", "aspect", "smooth", "strokeJoin", "strokeDash", "radiusOffset", "cornerRadiusTopRight", "strokeOpacity", "clip", "description", "radius2", "order", "yOffset", "dx", "cornerRadiusBottomRight", "width", "xOffset", "cursor", "blend", "style", "height", "theta2", "orient", "baseline", "radius2Offset", "tension", "y2Offset", "stroke", "align", "shape", "lineHeight", "interpolate", "y2", "ariaRoleDescription", "cornerRadius", "strokeMiterLimit", "tooltip", "radius", "x", "cornerRadiusTopLeft", "timeUnitBandPosition", "fill") 
}

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelBaseline (UnionType)
/**
 * The vertical text baseline for the header labels. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 **/
sealed trait HeaderConfigLabelBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTheta2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingTheta2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingXValue 
   case class SharedEncodingXValueAsNumber(value: JsNumber) extends SharedEncodingXValue
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingShape (StructType)

case class SharedEncodingShape(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
   * 
   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).
   * 
   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.
   * 
   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.
   **/
  var `scale` : Option[Scale] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingShapeDatum] = None,
  /**
   * An object defining properties of the legend. If `null`, the legend for the encoding channel will be removed.
   * 
   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.
   * 
   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.
   **/
  var `legend` : Option[Legend] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingShapeBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[SharedEncodingShapeCondition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[SharedEncodingShapeBin] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[SharedEncodingShapeValue] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingShapeTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `"x"` or `"y"`) with an optional minus prefix for descending sort (e.g., `"-x"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `"sort": "-x"` is equivalent to `"sort": {"encoding": "x", "order": "descending"}`.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.
   * 
   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.
   **/
  var `sort` : Option[Sort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingShapeType] = None
)  
{  }
object SharedEncodingShape {
  val definedFields = Set("bin", "type", "datum", "bandPosition", "legend", "condition", "aggregate", "title", "value", "scale", "timeUnit", "field", "sort") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigAria (UnionType)

sealed trait BarConfigAria 
   case class BarConfigAriaAsBool(value: Boolean) extends BarConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait TickConfigOuterRadius 
   case class TickConfigOuterRadiusAsNumber(value: JsNumber) extends TickConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefColorNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefColorNullExprRef extends ConditionalAxisColorAsObject1Condition with ConditionalAxisColorAsObject2Condition
   // ConditionalPredicateValueDefColorNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefColorNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingXTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingXTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontWeightAsObject2 (StructType)

case class ConditionalAxisLabelFontWeightAsObject2(
  var `condition` : ConditionalAxisLabelFontWeightAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisLabelFontWeight 
{  }
object ConditionalAxisLabelFontWeightAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpec (StructType)

case class TopLevelVConcatSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelVConcatSpecParamsElement]] = None,
  /**
   * A list of views to be concatenated and put into a column.
   **/
  var `vconcat` : Seq[NonNormalizedSpec],
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelVConcatSpecBounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelVConcatSpecPadding] = None,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelVConcatSpecTitle] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelVConcatSpecBackground] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[Boolean] = None,
  /**
   * The spacing in pixels between sub-views of the concat operator.
   * 
   * __Default value__: `10`
   **/
  var `spacing` : Option[JsNumber] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelVConcatSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelSpec 
{  }
object TopLevelVConcatSpec {
  val definedFields = Set("spacing", "data", "padding", "config", "usermeta", "autosize", "datasets", "transform", "vconcat", "center", "$schema", "params", "description", "title", "resolve", "bounds", "background", "name") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontWeightAsObject1 (StructType)

case class ConditionalAxisLabelFontWeightAsObject1(
  var `condition` : ConditionalAxisLabelFontWeightAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[FontWeight] = None
) extends ConditionalAxisLabelFontWeight 
{  }
object ConditionalAxisLabelFontWeightAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait OverlayMarkDefRadius 
   case class OverlayMarkDefRadiusAsNumber(value: JsNumber) extends OverlayMarkDefRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin 
   case class ConditionalPredicateMarkPropFieldOrDatumDefAsObject1BinAsBool(value: Boolean) extends ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin
   // BinParams is defined elsewhere
   case object ConditionalPredicateMarkPropFieldOrDatumDefAsObject1BinAsNull extends ConditionalPredicateMarkPropFieldOrDatumDefAsObject1Bin

////////////////////////////////////////////////////////////////////////

// TitleParamsZindex (ConstrainedType)
/**
 * The integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.
 * 
 * __Default value:__ `0`.
 **/
case class TitleParamsZindex(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisDomainCap (UnionType)

sealed trait AxisDomainCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalMarkPropFieldOrDatumDef (UnionType)

sealed trait ConditionalMarkPropFieldOrDatumDef extends ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition with SharedEncodingSizeCondition with StringValueDefWithConditionCondition with SharedEncodingStrokeCondition with SharedEncodingStrokeDashCondition with SharedEncodingAngleCondition with SharedEncodingOpacityCondition with SharedEncodingStrokeOpacityCondition with SharedEncodingHrefCondition with SharedEncodingUrlCondition with SharedEncodingFillOpacityCondition with SharedEncodingStrokeWidthCondition with SharedEncodingDescriptionCondition with SharedEncodingColorCondition with ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNullCondition with SharedEncodingFillCondition
   // ConditionalPredicateMarkPropFieldOrDatumDef is defined elsewhere
   // ConditionalParameterMarkPropFieldOrDatumDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleReverse (UnionType)
/**
 * If true, reverses the order of the scale range. __Default value:__ `false`.
 **/
sealed trait ScaleReverse 
   case class ScaleReverseAsBool(value: Boolean) extends ScaleReverse
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingSizeBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingSizeBin 
   case class SharedEncodingSizeBinAsBool(value: Boolean) extends SharedEncodingSizeBin
   // BinParams is defined elsewhere
   case object SharedEncodingSizeBinAsNull extends SharedEncodingSizeBin

////////////////////////////////////////////////////////////////////////

// OrderValueDef (StructType)

case class OrderValueDef(
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[OrderValueDefCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : OrderValueDefValue
) extends FacetedEncodingOrder with SharedEncodingOrder with EncodingOrder 
{  }
object OrderValueDef {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsFrame (UnionType)
/**
 * The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the full bounding box) or `"group"` (to anchor relative to the group width or height).
 **/
sealed trait TitleParamsFrame 
   // TitleFrame is defined elsewhere
   case class TitleParamsFrameAsString(value: String) extends TitleParamsFrame
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait RectConfigY2 
   case class RectConfigY2AsNumber(value: JsNumber) extends RectConfigY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait RectConfigX2 
   case class RectConfigX2AsNumber(value: JsNumber) extends RectConfigX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeJoin (UnionType)

sealed trait LineConfigStrokeJoin 
   // StrokeJoin is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpec (StructType)

case class TopLevelFacetSpec(
  /**
   * Name of the visualization for later reference.
   **/
  var `name` : Option[String] = None,
  /**
   * Description of this mark for commenting purpose.
   **/
  var `description` : Option[String] = None,
  /**
   * Dynamic variables or selections that parameterize a visualization.
   **/
  var `params` : Option[Seq[TopLevelFacetSpecParamsElement]] = None,
  /**
   * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.
   **/
  var `config` : Option[Config] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[TopLevelFacetSpecBounds] = None,
  /**
   * A global data store for named datasets. This is a mapping from names to inline datasets. This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.
   **/
  var `datasets` : Option[Map[String,InlineDataset]] = None,
  /**
   * Optional metadata that will be passed to Vega. This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.
   **/
  var `usermeta` : Option[Map[String,JsValue]] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * Scale, axis, and legend resolutions for view composition specifications.
   **/
  var `resolve` : Option[Resolve] = None,
  /**
   * A specification of the view that gets faceted.
   **/
  var `spec` : TopLevelFacetSpecSpec,
  /**
   * Title for the plot.
   **/
  var `title` : Option[TopLevelFacetSpecTitle] = None,
  /**
   * CSS color property to use as the background of the entire view.
   * 
   * __Default value:__ `"white"`
   **/
  var `background` : Option[TopLevelFacetSpecBackground] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[TopLevelFacetSpecCenter] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[TopLevelFacetSpecAlign] = None,
  /**
   * An object describing the data source. Set to `null` to ignore the parent's data source. If no data is set, it is derived from the parent.
   **/
  var `data` : Option[Data] = None,
  /**
   * Definition for how to facet the data. One of: 1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def) 2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)
   **/
  var `facet` : TopLevelFacetSpecFacet,
  /**
   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
   * 
   * __Default value__: `5`
   **/
  var `padding` : Option[TopLevelFacetSpecPadding] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[TopLevelFacetSpecSpacing] = None,
  /**
   * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v5.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
   **/
  var `$schema` : Option[Uri] = None,
  /**
   * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
   * 
   * __Default value__: `pad`
   **/
  var `autosize` : Option[TopLevelFacetSpecAutosize] = None,
  /**
   * An array of data transformations such as filter and new field calculation.
   **/
  var `transform` : Option[Seq[Transform]] = None
) extends TopLevelSpec 
{  }
object TopLevelFacetSpec {
  val definedFields = Set("spacing", "data", "padding", "config", "autosize", "facet", "datasets", "transform", "align", "$schema", "usermeta", "spec", "params", "description", "title", "resolve", "bounds", "background", "name", "columns", "center") 
}

////////////////////////////////////////////////////////////////////////

// PointSelectionConfigType (ConstantType)
/**
 * Determines the default event processing and data query for the selection. Vega-Lite currently supports two selection types:
 * 
 * - `"point"` -- to select multiple discrete data values; the first value is selected on `click` and additional values toggled on shift-click.
 * - `"interval"` -- to select a continuous range of data values on `drag`.
 **/
case class PointSelectionConfigType() 

////////////////////////////////////////////////////////////////////////

// SharedEncodingX2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingX2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// BinExtentAsArray (ConstrainedType)

case class BinExtentAsArray(value: Seq[JsNumber]) extends BinExtent
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// FieldLTEPredicate (StructType)

case class FieldLTEPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * The value that the field should be less than or equals to.
   **/
  var `lte` : FieldLTEPredicateLte,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldLTEPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldLTEPredicate {
  val definedFields = Set("field", "lte", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// SharedEncodingLongitude2Datum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingLongitude2Datum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TimeUnit (UnionType)

sealed trait TimeUnit extends ConditionalParameterMarkPropFieldOrDatumDefAsObject1TimeUnit with SharedEncodingYError2TimeUnit with ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit with SharedEncodingThetaTimeUnit with SharedEncodingLongitude2TimeUnit with TimeUnitTransformTimeUnit with OrderFieldDefTimeUnit with ConditionalPredicateStringFieldDefTimeUnit with SharedEncodingXError2TimeUnit with SharedEncodingRadius2TimeUnit with SharedEncodingFillOpacityTimeUnit with FieldOrDatumDefWithConditionStringFieldDefTextTimeUnit with SharedEncodingRadiusTimeUnit with SharedEncodingYErrorTimeUnit with SharedEncodingLatitude2TimeUnit with SharedEncodingTheta2TimeUnit with StringFieldDefTimeUnit with FieldValidPredicateTimeUnit with SharedEncodingOpacityTimeUnit with SharedEncodingYTimeUnit with SharedEncodingSizeTimeUnit with SharedEncodingLatitudeTimeUnit with FieldDefWithoutScaleTimeUnit with SharedEncodingLongitudeTimeUnit with SharedEncodingFillTimeUnit with FieldEqualPredicateTimeUnit with StringFieldDefWithConditionTimeUnit with SharedEncodingStrokeOpacityTimeUnit with LatLongFieldDefTimeUnit with FieldGTPredicateTimeUnit with SharedEncodingStrokeTimeUnit with SharedEncodingYOffsetTimeUnit with SharedEncodingAngleTimeUnit with FacetFieldDefTimeUnit with ConditionalPredicateMarkPropFieldOrDatumDefAsObject1TimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNullTimeUnit with SharedEncodingStrokeDashTimeUnit with SharedEncodingKeyTimeUnit with SharedEncodingUrlTimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullTimeUnit with FieldOrDatumDefWithConditionMarkPropFieldDefNumberTimeUnit with SharedEncodingStrokeWidthTimeUnit with SharedEncodingY2TimeUnit with SharedEncodingXErrorTimeUnit with ScaleFieldDefTimeUnit with FieldGTEPredicateTimeUnit with PositionFieldDefBaseTimeUnit with FieldLTEPredicateTimeUnit with FieldLTPredicateTimeUnit with FacetEncodingFieldDefTimeUnit with ConditionalParameterMarkPropFieldOrDatumDefTypeForShapeAsObject1TimeUnit with SharedEncodingDescriptionTimeUnit with SharedEncodingHrefTimeUnit with SharedEncodingShapeTimeUnit with SharedEncodingXOffsetTimeUnit with SharedEncodingTextTimeUnit with SharedEncodingX2TimeUnit with RowColumnEncodingFieldDefTimeUnit with PositionFieldDefTimeUnit with FieldOneOfPredicateTimeUnit with SecondaryFieldDefTimeUnit with ConditionalParameterStringFieldDefTimeUnit with SharedEncodingXTimeUnit with SharedEncodingColorTimeUnit with FieldRangePredicateTimeUnit
   // SingleTimeUnit is defined elsewhere
   // MultiTimeUnit is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigAngle (UnionType)

sealed trait TickConfigAngle 
   // TickConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigStrokeColor (UnionType)
/**
 * Border stroke color for the full legend.
 **/
sealed trait LegendConfigStrokeColor 
   case object LegendConfigStrokeColorAsNull extends LegendConfigStrokeColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigInterpolate (UnionType)

sealed trait LineConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigBandWithNestedOffsetPaddingInner (ConstrainedType)
/**
 * Default inner padding for `x` and `y` band scales with nested `xOffset` and `yOffset` encoding.
 * 
 * __Default value:__ `0.2`
 **/
sealed trait ScaleConfigBandWithNestedOffsetPaddingInner 
   case class ScaleConfigBandWithNestedOffsetPaddingInnerAsNumber(value: JsNumber) extends ScaleConfigBandWithNestedOffsetPaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBar (ConstantType)

case class ErrorBar() extends CompositeMark

////////////////////////////////////////////////////////////////////////

// AxisConfigValues (UnionType)
/**
 * Explicitly set the visible axis tick values.
 **/
sealed trait AxisConfigValues 
   case class AxisConfigValuesAsArrayOfNumber(value: Seq[JsNumber]) extends AxisConfigValues
   case class AxisConfigValuesAsArrayOfBool(value: Seq[Boolean]) extends AxisConfigValues
   // ExprRef is defined elsewhere
   case class AxisConfigValuesAsArrayOfDateTime(value: Seq[DateTime]) extends AxisConfigValues
   case class AxisConfigValuesAsArrayOfString(value: Seq[String]) extends AxisConfigValues

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelBound (UnionType)

sealed trait AxisConfigLabelBound 
   case class AxisConfigLabelBoundAsNumber(value: JsNumber) extends AxisConfigLabelBound
   case class AxisConfigLabelBoundAsBool(value: Boolean) extends AxisConfigLabelBound
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait RectConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object RectConfigStrokeAsNull extends RectConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolSize (UnionType)

sealed trait LegendConfigSymbolSize 
   // LegendConfigSymbolSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisLabelFont (UnionType)

sealed trait AxisLabelFont 
   case class AxisLabelFontAsString(value: String) extends AxisLabelFont
   // ExprRef is defined elsewhere
   // ConditionalAxisString is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAriaRoleDescription (UnionType)

sealed trait RectConfigAriaRoleDescription 
   case class RectConfigAriaRoleDescriptionAsString(value: String) extends RectConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingStrokeBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingXOffsetType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingXOffsetType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigFontStyle (UnionType)

sealed trait RectConfigFontStyle 
   case class RectConfigFontStyleAsString(value: String) extends RectConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFontSizeAsNumber (ConstrainedType)
/**
 * The font size, in pixels.
 * 
 * __Default value:__ `11`
 **/
case class LineConfigFontSizeAsNumber(value: JsNumber) extends LineConfigFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// TickConfigSize (ConstrainedType)
/**
 * Default size for marks.
 * - For `point`/`circle`/`square`, this represents the pixel area of the marks. Note that this value sets the area of the symbol; the side lengths will increase with the square root of this value.
 * - For `bar`, this represents the band size of the bar, in pixels.
 * - For `text`, this represents the font size, in pixels.
 * 
 * __Default value:__
 * - `30` for point, circle, square marks; width/height's `step`
 * - `2` for bar marks with discrete dimensions;
 * - `5` for bar marks with continuous dimensions;
 * - `11` for text marks.
 **/
sealed trait TickConfigSize 
   case class TickConfigSizeAsNumber(value: JsNumber) extends TickConfigSize
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigStrokeCap (UnionType)

sealed trait AreaConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigText (UnionType)

sealed trait MarkConfigText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Header (StructType)
/**
 * Headers of row / column channels for faceted plots.
 **/
case class Header(
  /**
   * The rotation angle of the header labels.
   * 
   * __Default value:__ `0` for column header, `-90` for row header.
   **/
  var `labelAngle` : Option[HeaderLabelAngle] = None,
  /**
   * The color of the header label, can be in hex color code or regular color name.
   **/
  var `labelColor` : Option[HeaderLabelColor] = None,
  /**
   * The font weight of the header label.
   **/
  var `labelFontWeight` : Option[HeaderLabelFontWeight] = None,
  /**
   * The padding, in pixel, between facet header's title and the label.
   * 
   * __Default value:__ `10`
   **/
  var `titlePadding` : Option[HeaderTitlePadding] = None,
  /**
   * A boolean flag indicating if labels should be included as part of the header.
   * 
   * __Default value:__ `true`.
   **/
  var `labels` : Option[Boolean] = None,
  /**
   * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.
   * 
   * __Note:__ The label text and value can be assessed via the `label` and `value` properties of the header's backing `datum` object.
   **/
  var `labelExpr` : Option[String] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The vertical text baseline for the header title. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
   * 
   * __Default value:__ `"middle"`
   **/
  var `titleBaseline` : Option[HeaderTitleBaseline] = None,
  /**
   * The vertical text baseline for the header labels. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
   **/
  var `labelBaseline` : Option[HeaderLabelBaseline] = None,
  /**
   * The font size of the header label, in pixels.
   **/
  var `labelFontSize` : Option[HeaderLabelFontSize] = None,
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[HeaderFormat] = None,
  /**
   * Font of the header title. (e.g., `"Helvetica Neue"`).
   **/
  var `titleFont` : Option[HeaderTitleFont] = None,
  /**
   * The font style of the header title.
   **/
  var `titleFontStyle` : Option[HeaderTitleFontStyle] = None,
  /**
   * Line height in pixels for multi-line header title text or title text with `"line-top"` or `"line-bottom"` baseline.
   **/
  var `titleLineHeight` : Option[HeaderTitleLineHeight] = None,
  /**
   * Line height in pixels for multi-line header labels or title text with `"line-top"` or `"line-bottom"` baseline.
   **/
  var `labelLineHeight` : Option[HeaderLabelLineHeight] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
   * 
   * __Default value:__ `0`, indicating no limit
   **/
  var `labelLimit` : Option[HeaderLabelLimit] = None,
  /**
   * The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
   **/
  var `titleAnchor` : Option[TitleAnchor] = None,
  /**
   * Color of the header title, can be in hex color code or regular color name.
   **/
  var `titleColor` : Option[HeaderTitleColor] = None,
  /**
   * Shortcut for setting both labelOrient and titleOrient.
   **/
  var `orient` : Option[Orient] = None,
  /**
   * The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
   **/
  var `titleOrient` : Option[Orient] = None,
  /**
   * Horizontal text alignment of header labels. One of `"left"`, `"center"`, or `"right"`.
   **/
  var `labelAlign` : Option[HeaderLabelAlign] = None,
  /**
   * The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.
   **/
  var `labelOrient` : Option[Orient] = None,
  /**
   * The rotation angle of the header title.
   * 
   * __Default value:__ `0`.
   **/
  var `titleAngle` : Option[HeaderTitleAngle] = None,
  /**
   * The padding, in pixel, between facet header's label and the plot.
   * 
   * __Default value:__ `10`
   **/
  var `labelPadding` : Option[HeaderLabelPadding] = None,
  /**
   * The font of the header label.
   **/
  var `labelFont` : Option[HeaderLabelFont] = None,
  /**
   * The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.
   **/
  var `labelAnchor` : Option[TitleAnchor] = None,
  /**
   * The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
   * 
   * __Default value:__ `0`, indicating no limit
   **/
  var `titleLimit` : Option[HeaderTitleLimit] = None,
  /**
   * The font style of the header label.
   **/
  var `labelFontStyle` : Option[HeaderLabelFontStyle] = None,
  /**
   * Horizontal text alignment (to the anchor) of header titles.
   **/
  var `titleAlign` : Option[HeaderTitleAlign] = None,
  /**
   * Font size of the header title.
   **/
  var `titleFontSize` : Option[HeaderTitleFontSize] = None,
  /**
   * Font weight of the header title. This can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).
   **/
  var `titleFontWeight` : Option[HeaderTitleFontWeight] = None
)  
{  }
object Header {
  val definedFields = Set("labelAngle", "labels", "labelBaseline", "labelExpr", "titleBaseline", "titleFont", "labelAnchor", "titleColor", "labelFontStyle", "labelOrient", "labelLimit", "labelColor", "titleAlign", "titleFontSize", "titlePadding", "labelFontWeight", "labelFont", "titleFontWeight", "labelPadding", "titleLimit", "titleFontStyle", "format", "titleAnchor", "labelFontSize", "title", "titleAngle", "labelAlign", "titleOrient", "orient", "formatType", "titleLineHeight", "labelLineHeight") 
}

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefCursor (UnionType)

sealed trait OverlayMarkDefCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigLineHeight (UnionType)

sealed trait LineConfigLineHeight 
   case class LineConfigLineHeightAsNumber(value: JsNumber) extends LineConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionDatumDefBaseStack (UnionType)
/**
 * Type of stacking offset if the field should be stacked. `stack` is only applicable for `x`, `y`, `theta`, and `radius` channels with continuous domains. For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
 * 
 * `stack` can be one of the following values:
 * - `"zero"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).
 * - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>
 * -`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).
 * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.
 * 
 * __Default value:__ `zero` for plots with all of the following conditions are true: (1) the mark is `bar`, `area`, or `arc`; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.
 * 
 * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.
 **/
sealed trait PositionDatumDefBaseStack 
   // StackOffset is defined elsewhere
   case object PositionDatumDefBaseStackAsNull extends PositionDatumDefBaseStack
   case class PositionDatumDefBaseStackAsBool(value: Boolean) extends PositionDatumDefBaseStack

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberArray (UnionType)

sealed trait ConditionalAxisNumberArray extends AxisTickDash with AxisConfigGridDash with AxisGridDash with AxisConfigTickDash
   // ConditionalAxisNumberArrayAsObject1 is defined elsewhere
   // ConditionalAxisNumberArrayAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigTheta (ConstrainedType)
/**
 * - For arc marks, the arc length in radians if theta2 is not specified, otherwise the start arc angle. (A value of 0 indicates up or “north”, increasing values proceed clockwise.)
 * 
 * - For text marks, polar coordinate angle in radians.
 **/
sealed trait MarkConfigTheta 
   case class MarkConfigThetaAsNumber(value: JsNumber) extends MarkConfigTheta
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConstant (UnionType)
/**
 * A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.
 * 
 * __Default value:__ `1`
 **/
sealed trait ScaleConstant 
   case class ScaleConstantAsNumber(value: JsNumber) extends ScaleConstant
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class LineConfigStrokeOpacityAsNumber(value: JsNumber) extends LineConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OrderFieldDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class OrderFieldDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ScaleClamp (UnionType)
/**
 * If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value
 * 
 * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true` by default).
 **/
sealed trait ScaleClamp 
   case class ScaleClampAsBool(value: Boolean) extends ScaleClamp
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisNumberAsObject1Condition (UnionType)

sealed trait ConditionalAxisNumberAsObject1Condition 
   // ConditionalPredicateValueDefNumberNullExprRef is defined elsewhere
   case class ConditionalAxisNumberAsObject1ConditionAsArrayOfConditionalPredicateValueDefNumberNullExprRef(value: Seq[ConditionalPredicateValueDefNumberNullExprRef]) extends ConditionalAxisNumberAsObject1Condition

////////////////////////////////////////////////////////////////////////

// ArgminDef (StructType)

case class ArgminDef(
  var `argmin` : String
) extends Aggregate 
{  }
object ArgminDef {
  val definedFields = Set("argmin") 
}

////////////////////////////////////////////////////////////////////////

// CompositionConfig (StructType)
/**
 * Default configuration for all concatenation and repeat view composition operators (`concat`, `hconcat`, `vconcat`, and `repeat`)
 **/
case class CompositionConfig(
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * The default spacing in pixels between composed sub-views.
   * 
   * __Default value__: `20`
   **/
  var `spacing` : Option[JsNumber] = None
)  
{  }
object CompositionConfig {
  val definedFields = Set("columns", "spacing") 
}

////////////////////////////////////////////////////////////////////////

// ViewConfigStrokeDashOffset (UnionType)

sealed trait ViewConfigStrokeDashOffset 
   case class ViewConfigStrokeDashOffsetAsNumber(value: JsNumber) extends ViewConfigStrokeDashOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigZindex (UnionType)

sealed trait LegendConfigZindex 
   // LegendConfigZindexAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigFontSize (UnionType)

sealed trait LineConfigFontSize 
   // LineConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingOpacityDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingOpacityDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetEncodingFieldDef (StructType)
/**
 * A field definition for the (flexible) facet of trellis plots.
 * 
 * If either `row` or `column` is specified, this channel will be ignored.
 **/
case class FacetEncodingFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
   * 
   * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
   * 
   * __Default value:__ `false`
   **/
  var `center` : Option[FacetEncodingFieldDefCenter] = None,
  /**
   * The alignment to apply to grid rows and columns. The supported string values are `"all"`, `"each"`, and `"none"`.
   * 
   * - For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.
   * - For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.
   * - For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.
   * 
   * Alternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.
   * 
   * __Default value:__ `"all"`.
   **/
  var `align` : Option[FacetEncodingFieldDefAlign] = None,
  /**
   * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
   * 
   * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
   * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
   * 
   * __Default value:__ `"full"`
   **/
  var `bounds` : Option[FacetEncodingFieldDefBounds] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FacetEncodingFieldDefBandPosition] = None,
  /**
   * The number of columns to include in the view composition layout.
   * 
   * __Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to `hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).
   * 
   * __Note__:
   * 
   * 1) This property is only for:
   * - the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)
   * - the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)
   * 
   * 2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).
   **/
  var `columns` : Option[JsNumber] = None,
  /**
   * An object defining properties of a facet's header.
   **/
  var `header` : Option[Header] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[FacetEncodingFieldDefBin] = None,
  /**
   * The spacing in pixels between sub-views of the composition operator. An object of the form `{"row": number, "column": number}` can be used to set different spacing values for rows and columns.
   * 
   * __Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)
   **/
  var `spacing` : Option[FacetEncodingFieldDefSpacing] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[FacetEncodingFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * Sort order for the encoded field.
   * 
   * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
   * 
   * For discrete fields, `sort` can be one of the following:
   * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
   * - `null` indicating no sort.
   * 
   * __Default value:__ `"ascending"`
   * 
   * __Note:__ `null` is not supported for `row` and `column`.
   **/
  var `sort` : Option[FacetEncodingFieldDefSort] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
)  
{  }
object FacetEncodingFieldDef {
  val definedFields = Set("bin", "header", "timeUnit", "bandPosition", "aggregate", "title", "bounds", "align", "type", "spacing", "field", "columns", "center", "sort") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigTickOpacity (UnionType)

sealed trait AxisConfigTickOpacity 
   case class AxisConfigTickOpacityAsNumber(value: JsNumber) extends AxisConfigTickOpacity
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigDistance (UnionType)

sealed trait ProjectionConfigDistance 
   case class ProjectionConfigDistanceAsNumber(value: JsNumber) extends ProjectionConfigDistance
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigParallels (UnionType)

sealed trait ProjectionConfigParallels 
   case class ProjectionConfigParallelsAsArrayOfNumber(value: Seq[JsNumber]) extends ProjectionConfigParallels
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadiusValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingRadiusValue 
   case class SharedEncodingRadiusValueAsNumber(value: JsNumber) extends SharedEncodingRadiusValue
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecWidth (UnionType)
/**
 * The width of a visualization.
 * 
 * - For a plot with a continuous x-field, width should be a number.
 * - For a plot with either a discrete x-field or no x-field, width can be either a number indicating a fixed width or an object in the form of `{step: number}` defining the width per discrete step. (No x-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on width, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousWidth` for a plot with a continuous x-field and `config.view.discreteWidth` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`width`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait TopLevelUnitSpecWidth 
   case class TopLevelUnitSpecWidthAsNumber(value: JsNumber) extends TopLevelUnitSpecWidth
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PositionFieldDefBaseTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait PositionFieldDefBaseTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefFontWeightNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefFontWeightNullExprRef extends ConditionalAxisLabelFontWeightAsObject2Condition with ConditionalAxisLabelFontWeightAsObject1Condition
   // ConditionalPredicateValueDefFontWeightNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefFontWeightNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ImputeParamsFrame (ConstrainedType)
/**
 * A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.
 * 
 * __Default value:__:  `[null, null]` indicating that the window includes all objects.
 **/
case class ImputeParamsFrame(value: Seq[ImputeParamsFrameElement]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// AxisConfigZindex (ConstrainedType)
/**
 * A non-negative integer indicating the z-index of the axis. If zindex is 0, axes should be drawn behind all chart elements. To put them in front, set `zindex` to `1` or more.
 * 
 * __Default value:__ `0` (behind the marks).
 **/
case class AxisConfigZindex(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelOffset (UnionType)

sealed trait AxisConfigLabelOffset 
   case class AxisConfigLabelOffsetAsNumber(value: JsNumber) extends AxisConfigLabelOffset
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait OverlayMarkDefStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object OverlayMarkDefStrokeAsNull extends OverlayMarkDefStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigOffsetBandPaddingInner (UnionType)
/**
 * Default padding inner for xOffset/yOffset's band scales.
 * 
 * __Default Value:__ `0`
 **/
sealed trait ScaleConfigOffsetBandPaddingInner 
   case class ScaleConfigOffsetBandPaddingInnerAsNumber(value: JsNumber) extends ScaleConfigOffsetBandPaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefAriaRoleDescription (UnionType)

sealed trait MarkDefAriaRoleDescription 
   case class MarkDefAriaRoleDescriptionAsString(value: String) extends MarkDefAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFontStyle (UnionType)

sealed trait TickConfigFontStyle 
   case class TickConfigFontStyleAsString(value: String) extends TickConfigFontStyle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AggregateOp (EnumType)
/**
 * The aggregation operation to apply to the fields (e.g., `"sum"`, `"average"`, or `"count"`). See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops) for more information.
 **/
sealed trait AggregateOp extends WindowFieldDefOp { val payload: JsValue }
   case object AggregateOpArgmax extends AggregateOp { val payload = JsString("argmax") }
   case object AggregateOpArgmin extends AggregateOp { val payload = JsString("argmin") }
   case object AggregateOpAverage extends AggregateOp { val payload = JsString("average") }
   case object AggregateOpCount extends AggregateOp { val payload = JsString("count") }
   case object AggregateOpDistinct extends AggregateOp { val payload = JsString("distinct") }
   case object AggregateOpMax extends AggregateOp { val payload = JsString("max") }
   case object AggregateOpMean extends AggregateOp { val payload = JsString("mean") }
   case object AggregateOpMedian extends AggregateOp { val payload = JsString("median") }
   case object AggregateOpMin extends AggregateOp { val payload = JsString("min") }
   case object AggregateOpMissing extends AggregateOp { val payload = JsString("missing") }
   case object AggregateOpProduct extends AggregateOp { val payload = JsString("product") }
   case object AggregateOpQ1 extends AggregateOp { val payload = JsString("q1") }
   case object AggregateOpQ3 extends AggregateOp { val payload = JsString("q3") }
   case object AggregateOpCi0 extends AggregateOp { val payload = JsString("ci0") }
   case object AggregateOpCi1 extends AggregateOp { val payload = JsString("ci1") }
   case object AggregateOpStderr extends AggregateOp { val payload = JsString("stderr") }
   case object AggregateOpStdev extends AggregateOp { val payload = JsString("stdev") }
   case object AggregateOpStdevp extends AggregateOp { val payload = JsString("stdevp") }
   case object AggregateOpSum extends AggregateOp { val payload = JsString("sum") }
   case object AggregateOpValid extends AggregateOp { val payload = JsString("valid") }
   case object AggregateOpValues extends AggregateOp { val payload = JsString("values") }
   case object AggregateOpVariance extends AggregateOp { val payload = JsString("variance") }
   case object AggregateOpVariancep extends AggregateOp { val payload = JsString("variancep") }

////////////////////////////////////////////////////////////////////////

// LineConfigEndAngle (UnionType)

sealed trait LineConfigEndAngle 
   case class LineConfigEndAngleAsNumber(value: JsNumber) extends LineConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefAria (UnionType)

sealed trait MarkDefAria 
   case class MarkDefAriaAsBool(value: Boolean) extends MarkDefAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait TopLevelUnitSpecCenter 
   case class TopLevelUnitSpecCenterAsBool(value: Boolean) extends TopLevelUnitSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewBackgroundFill (UnionType)
/**
 * The fill color.
 * 
 * __Default value:__ `undefined`
 **/
sealed trait ViewBackgroundFill 
   // Color is defined elsewhere
   case object ViewBackgroundFillAsNull extends ViewBackgroundFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigBaseline (UnionType)
/**
 * For text marks, the vertical text baseline. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, `"line-bottom"`, or an expression reference that provides one of the valid values. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `lineHeight` rather than `fontSize` alone.
 * 
 * For range marks, the vertical alignment of the marks. One of `"top"`, `"middle"`, `"bottom"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait BarConfigBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLabelFontSize (UnionType)

sealed trait LegendConfigLabelFontSize 
   // LegendConfigLabelFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait OverlayMarkDefFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object OverlayMarkDefFillAsNull extends OverlayMarkDefFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait StringFieldDefFormat 
   case class StringFieldDefFormatAsString(value: String) extends StringFieldDefFormat
   case class StringFieldDefFormatAsDictOfAny(value: Map[String,JsValue]) extends StringFieldDefFormat

////////////////////////////////////////////////////////////////////////

// LineConfigTooltip (UnionType)
/**
 * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.
 * 
 * - If `tooltip` is `true` or `{"content": "encoding"}`, then all fields from `encoding` will be used.
 * - If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.
 * - If set to `null` or `false`, then no tooltip will be used.
 * 
 * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.
 * 
 * __Default value:__ `null`
 **/
sealed trait LineConfigTooltip 
   case class LineConfigTooltipAsString(value: String) extends LineConfigTooltip
   case object LineConfigTooltipAsNull extends LineConfigTooltip
   // ExprRef is defined elsewhere
   // TooltipContent is defined elsewhere
   case class LineConfigTooltipAsBool(value: Boolean) extends LineConfigTooltip
   case class LineConfigTooltipAsNumber(value: JsNumber) extends LineConfigTooltip

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleLineHeight (UnionType)

sealed trait TitleParamsSubtitleLineHeight 
   case class TitleParamsSubtitleLineHeightAsNumber(value: JsNumber) extends TitleParamsSubtitleLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait LineConfigOuterRadius 
   case class LineConfigOuterRadiusAsNumber(value: JsNumber) extends LineConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolFillColor (UnionType)
/**
 * The color of the legend symbol,
 **/
sealed trait LegendConfigSymbolFillColor 
   case object LegendConfigSymbolFillColorAsNull extends LegendConfigSymbolFillColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecAutosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelVConcatSpecAutosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisDomainWidth (UnionType)

sealed trait AxisDomainWidth 
   case class AxisDomainWidthAsNumber(value: JsNumber) extends AxisDomainWidth
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendBinding (UnionType)

sealed trait LegendBinding extends TopLevelSelectionParameterBind with SelectionParameterBind
   // Legend is defined elsewhere
   // LegendStreamBinding is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ColorHex (ConstrainedType)
/**
 * A hex color code (e.g., #ffffff)
 **/
case class ColorHex(value: String) extends Color
{ val HEX = "#([0-9A-Fa-f]{3})+".r; assert(HEX.unapplySeq(value).isDefined) }

////////////////////////////////////////////////////////////////////////

// MarkDefBandSize (ConstrainedType)
/**
 * The width of the ticks.
 * 
 * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).
 **/
case class MarkDefBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ConditionalAxisStringAsObject1 (StructType)

case class ConditionalAxisStringAsObject1(
  var `condition` : ConditionalAxisStringAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : ConditionalAxisStringAsObject1Value
) extends ConditionalAxisString 
{  }
object ConditionalAxisStringAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// ConditionalAxisStringAsObject2 (StructType)

case class ConditionalAxisStringAsObject2(
  var `condition` : ConditionalAxisStringAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisString 
{  }
object ConditionalAxisStringAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// ViewBackgroundStroke (UnionType)
/**
 * The stroke color.
 * 
 * __Default value:__ `"#ddd"`
 **/
sealed trait ViewBackgroundStroke 
   // Color is defined elsewhere
   case object ViewBackgroundStrokeAsNull extends ViewBackgroundStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Predicate (UnionType)

sealed trait Predicate extends PredicateComposition
   case class PredicateAsString(value: String) extends Predicate
   // FieldOneOfPredicate is defined elsewhere
   // FieldGTPredicate is defined elsewhere
   // FieldValidPredicate is defined elsewhere
   // FieldGTEPredicate is defined elsewhere
   // FieldLTPredicate is defined elsewhere
   // ParameterPredicate is defined elsewhere
   // FieldRangePredicate is defined elsewhere
   // FieldEqualPredicate is defined elsewhere
   // FieldLTEPredicate is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigShape (UnionType)
/**
 * Shape of the point marks. Supported values include:
 * - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.
 * - the line symbol `"stroke"`
 * - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`
 * - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)
 * 
 * __Default value:__ `"circle"`
 **/
sealed trait LineConfigShape 
   case class LineConfigShapeAsString(value: String) extends LineConfigShape
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigStrokeOpacityAsNumber (ConstrainedType)
/**
 * The stroke opacity (value between [0,1]).
 * 
 * __Default value:__ `1`
 **/
case class RectConfigStrokeOpacityAsNumber(value: JsNumber) extends RectConfigStrokeOpacity
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// FieldRangePredicateRange (ConstrainedType)
/**
 * An array of inclusive minimum and maximum values for a field value of a data item to be included in the filtered data.
 **/
sealed trait FieldRangePredicateRange 
   case class FieldRangePredicateRangeAsArrayOfFieldRangePredicateRangeAsArrayElement(value: Seq[FieldRangePredicateRangeAsArrayElement]) extends FieldRangePredicateRange
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumberNullExprRef (UnionType)

sealed trait ConditionalPredicateValueDefNumberNullExprRef extends ConditionalAxisNumberAsObject2Condition with ConditionalAxisNumberArrayAsObject2Condition with ConditionalAxisNumberAsObject1Condition with ConditionalAxisNumberArrayAsObject1Condition
   // ConditionalPredicateValueDefNumberNullExprRefAsObject1 is defined elsewhere
   // ConditionalPredicateValueDefNumberNullExprRefAsObject2 is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeCap (UnionType)

sealed trait LineConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeDashType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingStrokeDashType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// JsonDataFormatType (ConstantType)
/**
 * Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.
 * 
 * __Default value:__  The default format type is determined by the extension of the file URL. If no extension is detected, `"json"` will be used by default.
 **/
case class JsonDataFormatType() 

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeMiterLimit (UnionType)

sealed trait LineConfigStrokeMiterLimit 
   case class LineConfigStrokeMiterLimitAsNumber(value: JsNumber) extends LineConfigStrokeMiterLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ScaleConfigBarBandPaddingInner (ConstrainedType)
/**
 * Default inner padding for `x` and `y` band-ordinal scales of `"bar"` marks.
 * 
 * __Default value:__ `0.1`
 **/
sealed trait ScaleConfigBarBandPaddingInner 
   case class ScaleConfigBarBandPaddingInnerAsNumber(value: JsNumber) extends ScaleConfigBarBandPaddingInner
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldGTPredicate (StructType)

case class FieldGTPredicate(
  /**
   * Field to be tested.
   **/
  var `field` : String,
  /**
   * The value that the field should be greater than.
   **/
  var `gt` : FieldGTPredicateGt,
  /**
   * Time unit for the field to be tested.
   **/
  var `timeUnit` : Option[FieldGTPredicateTimeUnit] = None
) extends Predicate 
{  }
object FieldGTPredicate {
  val definedFields = Set("field", "gt", "timeUnit") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigCornerRadiusBottomLeft (UnionType)

sealed trait LineConfigCornerRadiusBottomLeft 
   case class LineConfigCornerRadiusBottomLeftAsNumber(value: JsNumber) extends LineConfigCornerRadiusBottomLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelAngle (UnionType)

sealed trait AxisConfigLabelAngle 
   // AxisConfigLabelAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleBaseline (UnionType)

sealed trait LegendConfigTitleBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithCondition (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class StringFieldDefWithCondition(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[StringFieldDefWithConditionFormat] = None,
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[StringFieldDefWithConditionBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[StringFieldDefWithConditionCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[StringFieldDefWithConditionBin] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[StringFieldDefWithConditionTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[StandardType] = None
) extends FacetedEncodingUrl with FacetedEncodingTooltip with FacetedEncodingHref with SharedEncodingTooltip with EncodingDescription with EncodingUrl with EncodingTooltip with EncodingHref with FacetedEncodingDescription 
{  }
object StringFieldDefWithCondition {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "format", "condition", "aggregate", "title", "formatType", "field") 
}

////////////////////////////////////////////////////////////////////////

// PositionValueDefValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait PositionValueDefValue 
   case class PositionValueDefValueAsNumber(value: JsNumber) extends PositionValueDefValue
   // Width is defined elsewhere
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlot (ConstantType)

case class BoxPlot() extends CompositeMark

////////////////////////////////////////////////////////////////////////

// MarkDefFontSize (UnionType)

sealed trait MarkDefFontSize 
   // MarkDefFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelUnitSpecHeight (UnionType)
/**
 * The height of a visualization.
 * 
 * - For a plot with a continuous y-field, height should be a number.
 * - For a plot with either a discrete y-field or no y-field, height can be either a number indicating a fixed height or an object in the form of `{step: number}` defining the height per discrete step. (No y-field is equivalent to having one discrete step.)
 * - To enable responsive sizing on height, it should be set to `"container"`.
 * 
 * __Default value:__ Based on `config.view.continuousHeight` for a plot with a continuous y-field and `config.view.discreteHeight` otherwise.
 * 
 * __Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view and the `"container"` option cannot be used.
 * 
 * __See also:__ [`height`](https://vega.github.io/vega-lite/docs/size.html) documentation.
 **/
sealed trait TopLevelUnitSpecHeight 
   case class TopLevelUnitSpecHeightAsNumber(value: JsNumber) extends TopLevelUnitSpecHeight
   // Container is defined elsewhere
   // Step is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefInvalid (EnumType)
/**
 * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).
 * - If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).
 * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
 **/
sealed trait MarkDefInvalid  { val payload: JsValue }
   case object MarkDefInvalidFilter extends MarkDefInvalid { val payload = JsString("filter") }
   case object MarkDefInvalidUndefined extends MarkDefInvalid { val payload = JsNull }

////////////////////////////////////////////////////////////////////////

// TickConfigInterpolate (UnionType)

sealed trait TickConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolDirection (UnionType)

sealed trait LegendConfigSymbolDirection 
   // Orientation is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigTension (UnionType)

sealed trait MarkConfigTension 
   case class MarkConfigTensionAsNumber(value: JsNumber) extends MarkConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigTickOffset (UnionType)

sealed trait AxisConfigTickOffset 
   case class AxisConfigTickOffsetAsNumber(value: JsNumber) extends AxisConfigTickOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigAngle (UnionType)

sealed trait RectConfigAngle 
   // RectConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ViewConfigFillOpacity (UnionType)

sealed trait ViewConfigFillOpacity 
   // ViewConfigFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextFormat (UnionType)
/**
 * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
 * 
 * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
 * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
 * 
 * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
 * 
 * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
 * 
 * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
 **/
sealed trait SharedEncodingTextFormat 
   case class SharedEncodingTextFormatAsString(value: String) extends SharedEncodingTextFormat
   case class SharedEncodingTextFormatAsDictOfAny(value: Map[String,JsValue]) extends SharedEncodingTextFormat

////////////////////////////////////////////////////////////////////////

// AreaConfigInterpolate (UnionType)

sealed trait AreaConfigInterpolate 
   // Interpolate is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetSpecBounds (EnumType)
/**
 * The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.
 * 
 * - If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.
 * - If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.
 * 
 * __Default value:__ `"full"`
 **/
sealed trait FacetSpecBounds  { val payload: JsValue }
   case object FacetSpecBoundsFull extends FacetSpecBounds { val payload = JsString("full") }
   case object FacetSpecBoundsFlush extends FacetSpecBounds { val payload = JsString("flush") }

////////////////////////////////////////////////////////////////////////

// SharedEncodingYTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingYTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolDash (UnionType)

sealed trait LegendConfigSymbolDash 
   case class LegendConfigSymbolDashAsArrayOfNumber(value: Seq[JsNumber]) extends LegendConfigSymbolDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigUrl (UnionType)

sealed trait BarConfigUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingHrefBin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait SharedEncodingHrefBin 
   case class SharedEncodingHrefBinAsBool(value: Boolean) extends SharedEncodingHrefBin
   // BinParams is defined elsewhere
   // Binned is defined elsewhere
   case object SharedEncodingHrefBinAsNull extends SharedEncodingHrefBin

////////////////////////////////////////////////////////////////////////

// MarkConfigDir (UnionType)

sealed trait MarkConfigDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickDash (UnionType)

sealed trait AxisTickDash 
   case class AxisTickDashAsArrayOfNumber(value: Seq[JsNumber]) extends AxisTickDash
   // ExprRef is defined elsewhere
   // ConditionalAxisNumberArray is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigInnerRadius (ConstrainedType)
/**
 * The inner radius in pixels of arc marks. `innerRadius` is an alias for `radius2`.
 * 
 * __Default value:__ `0`
 **/
sealed trait MarkConfigInnerRadius 
   case class MarkConfigInnerRadiusAsNumber(value: JsNumber) extends MarkConfigInnerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringDatumDefText (StructType)
/**
 * A FieldDef with Condition<ValueDef> {   condition: {value: ...},   field: ...,   ... }
 **/
case class FieldOrDatumDefWithConditionStringDatumDefText(
  /**
   * When used with the default `"number"` and `"time"` format type, the text formatting pattern for labels of guides (axes, legends, headers) and text marks.
   * 
   * - If the format type is `"number"` (e.g., for quantitative fields), this is D3's [number format pattern](https://github.com/d3/d3-format#locale_format).
   * - If the format type is `"time"` (e.g., for temporal fields), this is D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format).
   * 
   * See the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more examples.
   * 
   * When used with a [custom `formatType`](https://vega.github.io/vega-lite/docs/config.html#custom-format-type), this value will be passed as `format` alongside `datum.value` to the registered function.
   * 
   * __Default value:__  Derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for number format and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for time format.
   **/
  var `format` : Option[FieldOrDatumDefWithConditionStringDatumDefTextFormat] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[FieldOrDatumDefWithConditionStringDatumDefTextDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[FieldOrDatumDefWithConditionStringDatumDefTextBandPosition] = None,
  /**
   * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
   * 
   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
   **/
  var `condition` : Option[FieldOrDatumDefWithConditionStringDatumDefTextCondition] = None,
  /**
   * The format type for labels. One of `"number"`, `"time"`, or a [registered custom format type](https://vega.github.io/vega-lite/docs/config.html#custom-format-type).
   * 
   * __Default value:__
   * - `"time"` for temporal fields and ordinal and nominal fields with `timeUnit`.
   * - `"number"` for quantitative fields as well as ordinal and nominal fields without `timeUnit`.
   **/
  var `formatType` : Option[String] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[Type] = None
) extends TextDef 
{  }
object FieldOrDatumDefWithConditionStringDatumDefText {
  val definedFields = Set("type", "datum", "bandPosition", "format", "condition", "title", "formatType") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigStartAngle (UnionType)

sealed trait MarkConfigStartAngle 
   case class MarkConfigStartAngleAsNumber(value: JsNumber) extends MarkConfigStartAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigMaxExtent (UnionType)

sealed trait AxisConfigMaxExtent 
   case class AxisConfigMaxExtentAsNumber(value: JsNumber) extends AxisConfigMaxExtent
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigOrder (UnionType)

sealed trait MarkConfigOrder 
   case object MarkConfigOrderAsNull extends MarkConfigOrder
   case class MarkConfigOrderAsBool(value: Boolean) extends MarkConfigOrder

////////////////////////////////////////////////////////////////////////

// EventStreamAsObject2Source (ConstantType)

case class EventStreamAsObject2Source() 

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingThetaType 
   // StandardType is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConcatSpecGenericSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait ConcatSpecGenericSpecCenter 
   case class ConcatSpecGenericSpecCenterAsBool(value: Boolean) extends ConcatSpecGenericSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigLineHeight (UnionType)

sealed trait TickConfigLineHeight 
   case class TickConfigLineHeightAsNumber(value: JsNumber) extends TickConfigLineHeight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisConfigPosition (UnionType)
/**
 * The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.
 * 
 * __Default value__: `0`
 **/
sealed trait AxisConfigPosition 
   case class AxisConfigPositionAsNumber(value: JsNumber) extends AxisConfigPosition
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigRadius (ConstrainedType)
/**
 * For arc mark, the primary (outer) radius in pixels.
 * 
 * For text marks, polar coordinate radial offset, in pixels, of the text from the origin determined by the `x` and `y` properties.
 * 
 * __Default value:__ `min(plot_width, plot_height)/2`
 **/
sealed trait BarConfigRadius 
   case class BarConfigRadiusAsNumber(value: JsNumber) extends BarConfigRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigFill (UnionType)
/**
 * Default fill color. This property has higher precedence than `config.color`. Set to `null` to remove fill.
 * 
 * __Default value:__ (None)
 **/
sealed trait MarkConfigFill 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object MarkConfigFillAsNull extends MarkConfigFill
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsFontSize (UnionType)

sealed trait TitleParamsFontSize 
   // TitleParamsFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelVConcatSpecPadding (UnionType)
/**
 * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides. If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
 * 
 * __Default value__: `5`
 **/
sealed trait TopLevelVConcatSpecPadding 
   // Padding is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RangeConfigOrdinal (UnionType)
/**
 * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for rank-ordered data.
 **/
sealed trait RangeConfigOrdinal 
   // RangeScheme is defined elsewhere
   case class RangeConfigOrdinalAsArrayOfColor(value: Seq[Color]) extends RangeConfigOrdinal

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolType (UnionType)

sealed trait LegendConfigSymbolType 
   case class LegendConfigSymbolTypeAsString(value: String) extends LegendConfigSymbolType
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigDescription (UnionType)

sealed trait LegendConfigDescription 
   case class LegendConfigDescriptionAsString(value: String) extends LegendConfigDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefNumber (ConstrainedType)

case class ValueDefWithConditionMarkPropFieldOrDatumDefNumber(
  /**
   * A field definition or one or more value definition(s) with a parameter predicate.
   **/
  var `condition` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition] = None,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[ValueDefWithConditionMarkPropFieldOrDatumDefNumberValue] = None
) extends NumericArrayMarkPropDef with NumericMarkPropDef 
{ assert(value.size >= 1)
  assert(value.size <= 1) }
object ValueDefWithConditionMarkPropFieldOrDatumDefNumber {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigAriaRole (UnionType)

sealed trait MarkConfigAriaRole 
   case class MarkConfigAriaRoleAsString(value: String) extends MarkConfigAriaRole
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject1Repeat (UnionType)
/**
 * Definition for fields to be repeated. One of: 1) An array of fields to be repeated. If `"repeat"` is an array, the field can be referred to as `{"repeat": "repeat"}`. The repeated views are laid out in a wrapped row. You can set the number of columns to control the wrapping. 2) An object that maps `"row"` and/or `"column"` to the listed fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.
 **/
sealed trait TopLevelRepeatSpecAsObject1Repeat 
   case class TopLevelRepeatSpecAsObject1RepeatAsArrayOfString(value: Seq[String]) extends TopLevelRepeatSpecAsObject1Repeat
   // RepeatMapping is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldLTEPredicateLte (UnionType)
/**
 * The value that the field should be less than or equals to.
 **/
sealed trait FieldLTEPredicateLte 
   case class FieldLTEPredicateLteAsString(value: String) extends FieldLTEPredicateLte
   case class FieldLTEPredicateLteAsNumber(value: JsNumber) extends FieldLTEPredicateLte
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ErrorBandDefColor (UnionType)
/**
 * Default color.
 * 
 * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
 * 
 * __Note:__
 * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
 * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
 **/
sealed trait ErrorBandDefColor 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// PivotTransform (StructType)

case class PivotTransform(
  /**
   * The data field to pivot on. The unique values of this field become new field names in the output stream.
   **/
  var `pivot` : String,
  /**
   * The optional data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None,
  /**
   * An optional parameter indicating the maximum number of pivoted fields to generate. The default (`0`) applies no limit. The pivoted `pivot` names are sorted in ascending order prior to enforcing the limit. __Default value:__ `0`
   **/
  var `limit` : Option[JsNumber] = None,
  /**
   * The data field to populate pivoted fields. The aggregate values of this field become the values of the new pivoted fields.
   **/
  var `value` : String,
  /**
   * The aggregation operation to apply to grouped `value` field values. __Default value:__ `sum`
   **/
  var `op` : Option[AggregateOp] = None
) extends Transform 
{  }
object PivotTransform {
  val definedFields = Set("pivot", "limit", "groupby", "op", "value") 
}

////////////////////////////////////////////////////////////////////////

// BarConfigBlend (UnionType)

sealed trait BarConfigBlend 
   // Blend is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigAriaRoleDescription (UnionType)

sealed trait TickConfigAriaRoleDescription 
   case class TickConfigAriaRoleDescriptionAsString(value: String) extends TickConfigAriaRoleDescription
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefY (UnionType)
/**
 * Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without specified `y2` or `height`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait MarkDefY 
   case class MarkDefYAsNumber(value: JsNumber) extends MarkDefY
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefX (UnionType)
/**
 * X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without specified `x2` or `width`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait MarkDefX 
   case class MarkDefXAsNumber(value: JsNumber) extends MarkDefX
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefRadius2Offset (UnionType)
/**
 * Offset for radius2.
 **/
sealed trait MarkDefRadius2Offset 
   case class MarkDefRadius2OffsetAsNumber(value: JsNumber) extends MarkDefRadius2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumberNullExprRefAsObject1 (StructType)

case class ConditionalPredicateValueDefNumberNullExprRefAsObject1(
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[Seq[JsNumber]] = None
) extends ConditionalPredicateValueDefNumberNullExprRef 
{  }
object ConditionalPredicateValueDefNumberNullExprRefAsObject1 {
  val definedFields = Set("test", "value") 
}

////////////////////////////////////////////////////////////////////////

// StringValueDefWithConditionCondition (UnionType)
/**
 * A field definition or one or more value definition(s) with a parameter predicate.
 **/
sealed trait StringValueDefWithConditionCondition 
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class StringValueDefWithConditionConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends StringValueDefWithConditionCondition

////////////////////////////////////////////////////////////////////////

// AxisConfigGridOpacity (UnionType)

sealed trait AxisConfigGridOpacity 
   // AxisConfigGridOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingThetaTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateValueDefNumberNullExprRefAsObject2 (StructType)

case class ConditionalPredicateValueDefNumberNullExprRefAsObject2(
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String,
  /**
   * Predicate for triggering the condition
   **/
  var `test` : PredicateComposition
) extends ConditionalPredicateValueDefNumberNullExprRef 
{  }
object ConditionalPredicateValueDefNumberNullExprRefAsObject2 {
  val definedFields = Set("expr", "test") 
}

////////////////////////////////////////////////////////////////////////

// LegendConfigTitleAnchor (UnionType)

sealed trait LegendConfigTitleAnchor 
   // TitleAnchor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLegendX (UnionType)

sealed trait LegendConfigLegendX 
   case class LegendConfigLegendXAsNumber(value: JsNumber) extends LegendConfigLegendX
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigRadius2 (ConstrainedType)
/**
 * The secondary (inner) radius in pixels of arc marks.
 * 
 * __Default value:__ `0`
 **/
sealed trait TickConfigRadius2 
   case class TickConfigRadius2AsNumber(value: JsNumber) extends TickConfigRadius2
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigLegendY (UnionType)

sealed trait LegendConfigLegendY 
   case class LegendConfigLegendYAsNumber(value: JsNumber) extends LegendConfigLegendY
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Vector2Boolean (ConstrainedType)

case class Vector2Boolean(value: Seq[Boolean]) extends SelectionInitInterval
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// LayerRepeatSpecCenter (UnionType)
/**
 * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.
 * 
 * An object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.
 * 
 * __Default value:__ `false`
 **/
sealed trait LayerRepeatSpecCenter 
   case class LayerRepeatSpecCenterAsBool(value: Boolean) extends LayerRepeatSpecCenter
   // RowColBoolean is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin (UnionType)
/**
 * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
 * 
 * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
 * 
 * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
 * 
 * __Default value:__ `false`
 * 
 * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin 
   case class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1BinAsBool(value: Boolean) extends ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin
   // BinParams is defined elsewhere
   case object ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1BinAsNull extends ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1Bin

////////////////////////////////////////////////////////////////////////

// MarkDefY2 (UnionType)
/**
 * Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"height"` for the height of the plot.
 **/
sealed trait MarkDefY2 
   case class MarkDefY2AsNumber(value: JsNumber) extends MarkDefY2
   // Height is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeOffset (UnionType)

sealed trait MarkConfigStrokeOffset 
   case class MarkConfigStrokeOffsetAsNumber(value: JsNumber) extends MarkConfigStrokeOffset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition (UnionType)
/**
 * A field definition or one or more value definition(s) with a parameter predicate.
 **/
sealed trait ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition 
   // ConditionalMarkPropFieldOrDatumDef is defined elsewhere
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class ValueDefWithConditionMarkPropFieldOrDatumDefNumberConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends ValueDefWithConditionMarkPropFieldOrDatumDefNumberCondition

////////////////////////////////////////////////////////////////////////

// TickConfigAria (UnionType)

sealed trait TickConfigAria 
   case class TickConfigAriaAsBool(value: Boolean) extends TickConfigAria
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionStringFieldDefTextCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionStringFieldDefTextCondition 
   // ConditionalValueDefTextExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionStringFieldDefTextConditionAsArrayOfConditionalValueDefTextExprRef(value: Seq[ConditionalValueDefTextExprRef]) extends FieldOrDatumDefWithConditionStringFieldDefTextCondition

////////////////////////////////////////////////////////////////////////

// AreaConfigOrder (UnionType)

sealed trait AreaConfigOrder 
   case object AreaConfigOrderAsNull extends AreaConfigOrder
   case class AreaConfigOrderAsBool(value: Boolean) extends AreaConfigOrder

////////////////////////////////////////////////////////////////////////

// BindRangeInput (ConstantType)

case class BindRangeInput() 

////////////////////////////////////////////////////////////////////////

// AxisDomainColor (UnionType)
/**
 * Color of axis domain line.
 * 
 * __Default value:__ `"gray"`.
 **/
sealed trait AxisDomainColor 
   case object AxisDomainColorAsNull extends AxisDomainColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleParamsSubtitleFontWeight (UnionType)

sealed trait TitleParamsSubtitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// QuantileTransform (StructType)

case class QuantileTransform(
  /**
   * A probability step size (default 0.01) for sampling quantile values. All values from one-half the step size up to 1 (exclusive) will be sampled. This parameter is only used if the *probs* parameter is not provided.
   **/
  var `step` : Option[JsNumber] = None,
  /**
   * An array of probabilities in the range (0, 1) for which to compute quantile values. If not specified, the *step* parameter will be used.
   **/
  var `probs` : Option[Seq[JsNumber]] = None,
  /**
   * The output field names for the probability and quantile values.
   * 
   * __Default value:__ `["prob", "value"]`
   **/
  var `as` : Option[QuantileTransformAs] = None,
  /**
   * The data field for which to perform quantile estimation.
   **/
  var `quantile` : String,
  /**
   * The data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None
) extends Transform 
{  }
object QuantileTransform {
  val definedFields = Set("groupby", "as", "probs", "quantile", "step") 
}

////////////////////////////////////////////////////////////////////////

// AxisLabelAlign (UnionType)

sealed trait AxisLabelAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisLabelAlign is defined elsewhere

////////////////////////////////////////////////////////////////////////

// EncodingXError2 (UnionType)
/**
 * Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait EncodingXError2 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigZindexAsNumber (ConstrainedType)
/**
 * The integer z-index indicating the layering of the title group relative to other axis, mark, and legend groups.
 * 
 * __Default value:__ `0`.
 **/
case class TitleConfigZindexAsNumber(value: JsNumber) extends TitleConfigZindex
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// HeaderConfigTitleLimit (UnionType)
/**
 * The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.
 * 
 * __Default value:__ `0`, indicating no limit
 **/
sealed trait HeaderConfigTitleLimit 
   case class HeaderConfigTitleLimitAsNumber(value: JsNumber) extends HeaderConfigTitleLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingTextDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingStrokeOpacityBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingStrokeOpacityBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefLimit (UnionType)

sealed trait OverlayMarkDefLimit 
   case class OverlayMarkDefLimitAsNumber(value: JsNumber) extends OverlayMarkDefLimit
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefX2 (UnionType)
/**
 * X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
 * 
 * The `value` of this channel can be a number or a string `"width"` for the width of the plot.
 **/
sealed trait MarkDefX2 
   case class MarkDefX2AsNumber(value: JsNumber) extends MarkDefX2
   // Width is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefY2Offset (UnionType)
/**
 * Offset for y2-position.
 **/
sealed trait OverlayMarkDefY2Offset 
   case class OverlayMarkDefY2OffsetAsNumber(value: JsNumber) extends OverlayMarkDefY2Offset
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigFontWeight (UnionType)

sealed trait TickConfigFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigEndAngle (UnionType)

sealed trait AreaConfigEndAngle 
   case class AreaConfigEndAngleAsNumber(value: JsNumber) extends AreaConfigEndAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotDefOutliers (UnionType)

sealed trait BoxPlotDefOutliers 
   case class BoxPlotDefOutliersAsBool(value: Boolean) extends BoxPlotDefOutliers
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingRadius2BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingRadius2BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// SharedEncodingAngleTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait SharedEncodingAngleTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RegressionTransformAs (ConstrainedType)
/**
 * The output field names for the smoothed points generated by the regression transform.
 * 
 * __Default value:__ The field names of the input x and y values.
 **/
case class RegressionTransformAs(value: Seq[String]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// ScaleConfigMinBandSize (ConstrainedType)
/**
 * The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.
 * 
 * __Default value:__ `2`
 **/
case class ScaleConfigMinBandSize(value: JsNumber) 
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadiusTopRight (UnionType)

sealed trait BarConfigCornerRadiusTopRight 
   case class BarConfigCornerRadiusTopRightAsNumber(value: JsNumber) extends BarConfigCornerRadiusTopRight
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillOpacityValue (UnionType)
/**
 * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
 **/
sealed trait SharedEncodingFillOpacityValue 
   case class SharedEncodingFillOpacityValueAsNumber(value: JsNumber) extends SharedEncodingFillOpacityValue
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAsObject1BandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// EncodingUrl (UnionType)
/**
 * The URL of an image mark.
 **/
sealed trait EncodingUrl 
   // StringFieldDefWithCondition is defined elsewhere
   // StringValueDefWithCondition is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigSymbolBaseFillColor (UnionType)
/**
 * Default fill color for legend symbols. Only applied if there is no `"fill"` scale color encoding for the legend.
 * 
 * __Default value:__ `"transparent"`.
 **/
sealed trait LegendConfigSymbolBaseFillColor 
   case object LegendConfigSymbolBaseFillColorAsNull extends LegendConfigSymbolBaseFillColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// StackOffset (EnumType)

sealed trait StackOffset extends SharedEncodingRadiusStack with PositionFieldDefStack with PositionDatumDefBaseStack with SharedEncodingThetaStack with PositionDatumDefStack with PositionFieldDefBaseStack with SharedEncodingXStack with SharedEncodingYStack { val payload: JsValue }
   case object StackOffsetZero extends StackOffset { val payload = JsString("zero") }
   case object StackOffsetCenter extends StackOffset { val payload = JsString("center") }
   case object StackOffsetNormalize extends StackOffset { val payload = JsString("normalize") }

////////////////////////////////////////////////////////////////////////

// MarkDefPadAngle (UnionType)

sealed trait MarkDefPadAngle 
   case class MarkDefPadAngleAsNumber(value: JsNumber) extends MarkDefPadAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefUrl (UnionType)

sealed trait OverlayMarkDefUrl 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickSizeAsNumber (ConstrainedType)
/**
 * The size in pixels of axis ticks.
 * 
 * __Default value:__ `5`
 **/
case class AxisTickSizeAsNumber(value: JsNumber) extends AxisTickSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// BoxPlotConfigTicks (UnionType)

sealed trait BoxPlotConfigTicks 
   case class BoxPlotConfigTicksAsBool(value: Boolean) extends BoxPlotConfigTicks
   // MarkConfig is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LatLongFieldDef (StructType)

case class LatLongFieldDef(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[LatLongFieldDefBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[LatLongFieldDefTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[LatLongFieldDefType] = None
) extends LatLongDef 
{  }
object LatLongFieldDef {
  val definedFields = Set("bin", "type", "timeUnit", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// LineConfigFont (UnionType)

sealed trait LineConfigFont 
   case class LineConfigFontAsString(value: String) extends LineConfigFont
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefStrokeOpacity (UnionType)

sealed trait OverlayMarkDefStrokeOpacity 
   // OverlayMarkDefStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigCornerRadiusTopLeft (UnionType)

sealed trait BarConfigCornerRadiusTopLeft 
   case class BarConfigCornerRadiusTopLeftAsNumber(value: JsNumber) extends BarConfigCornerRadiusTopLeft
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SortByChannel (EnumType)

sealed trait SortByChannel extends AllSortString { val payload: JsValue }
   case object SortByChannelX extends SortByChannel { val payload = JsString("x") }
   case object SortByChannelY extends SortByChannel { val payload = JsString("y") }
   case object SortByChannelColor extends SortByChannel { val payload = JsString("color") }
   case object SortByChannelFill extends SortByChannel { val payload = JsString("fill") }
   case object SortByChannelStroke extends SortByChannel { val payload = JsString("stroke") }
   case object SortByChannelStrokeWidth extends SortByChannel { val payload = JsString("strokeWidth") }
   case object SortByChannelSize extends SortByChannel { val payload = JsString("size") }
   case object SortByChannelShape extends SortByChannel { val payload = JsString("shape") }
   case object SortByChannelFillOpacity extends SortByChannel { val payload = JsString("fillOpacity") }
   case object SortByChannelStrokeOpacity extends SortByChannel { val payload = JsString("strokeOpacity") }
   case object SortByChannelOpacity extends SortByChannel { val payload = JsString("opacity") }
   case object SortByChannelText extends SortByChannel { val payload = JsString("text") }

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefGradientStringNullBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionDatumDefGradientStringNullBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// ProjectionClipAngle (UnionType)

sealed trait ProjectionClipAngle 
   case class ProjectionClipAngleAsNumber(value: JsNumber) extends ProjectionClipAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BoxPlotDef (StructType)

case class BoxPlotDef(
  /**
   * Size of the box and median tick of a box plot
   **/
  var `size` : Option[JsNumber] = None,
  /**
   * The extent of the whiskers. Available options include:
   * - `"min-max"`: min and max are the lower and upper whiskers respectively.
   * - A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).
   * 
   * __Default value:__ `1.5`.
   **/
  var `extent` : Option[BoxPlotDefExtent] = None,
  var `rule` : Option[BoxPlotDefRule] = None,
  /**
   * Default color.
   * 
   * __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
   * 
   * __Note:__
   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).
   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.
   **/
  var `color` : Option[BoxPlotDefColor] = None,
  var `outliers` : Option[BoxPlotDefOutliers] = None,
  var `median` : Option[BoxPlotDefMedian] = None,
  var `ticks` : Option[BoxPlotDefTicks] = None,
  /**
   * Orientation of the box plot. This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.
   * 
   * __Default value:__ `"vertical"`.
   **/
  var `orient` : Option[Orientation] = None,
  var `box` : Option[BoxPlotDefBox] = None,
  /**
   * The opacity (value between [0,1]) of the mark.
   **/
  var `opacity` : Option[BoxPlotDefOpacity] = None,
  /**
   * The mark type. This could a primitive mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`, `"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`) or a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).
   **/
  var `type` : BoxPlot,
  /**
   * Whether a composite mark be clipped to the enclosing group’s width and height.
   **/
  var `clip` : Option[Boolean] = None
) extends CompositeMarkDef 
{  }
object BoxPlotDef {
  val definedFields = Set("type", "box", "rule", "median", "outliers", "ticks", "clip", "orient", "opacity", "color", "size", "extent") 
}

////////////////////////////////////////////////////////////////////////

// EncodingXError (UnionType)
/**
 * Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.
 **/
sealed trait EncodingXError 
   // SecondaryFieldDef is defined elsewhere
   // ValueDefNumber is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigAngle (UnionType)

sealed trait AreaConfigAngle 
   // AreaConfigAngleAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefCornerRadius (UnionType)

sealed trait MarkDefCornerRadius 
   case class MarkDefCornerRadiusAsNumber(value: JsNumber) extends MarkDefCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigOpacity (ConstrainedType)
/**
 * The overall opacity (value between [0,1]).
 * 
 * __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
 **/
sealed trait LineConfigOpacity 
   case class LineConfigOpacityAsNumber(value: JsNumber) extends LineConfigOpacity
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigDiscreteBandSize (ConstrainedType)
/**
 * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.
 **/
sealed trait RectConfigDiscreteBandSize 
   case class RectConfigDiscreteBandSizeAsNumber(value: JsNumber) extends RectConfigDiscreteBandSize
   // RelativeBandSize is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefFillOpacity (UnionType)

sealed trait MarkDefFillOpacity 
   // MarkDefFillOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingLatitude (StructType)

case class SharedEncodingLatitude(
  /**
   * __Required.__ A string defining the name of the field from which to pull a data value or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.
   * 
   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.
   * 
   * __Notes:__ 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo['bar']"`). If field names contain dots or brackets but are not nested, you can use `\\` to escape dots and brackets (e.g., `"a\\.b"` and `"a\\[0\\]"`). See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html). 2) `field` is not required if `aggregate` is `count`.
   **/
  var `field` : Option[Field] = None,
  /**
   * A constant value in data domain.
   **/
  var `datum` : Option[SharedEncodingLatitudeDatum] = None,
  /**
   * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
   **/
  var `bandPosition` : Option[SharedEncodingLatitudeBandPosition] = None,
  /**
   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).
   * 
   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.
   * 
   * - If `"binned"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.
   * 
   * __Default value:__ `false`
   * 
   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.
   **/
  var `bin` : Option[JsNull.type] = None,
  /**
   * Aggregation function for the field (e.g., `"mean"`, `"sum"`, `"median"`, `"min"`, `"max"`, `"count"`).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.
   **/
  var `aggregate` : Option[Aggregate] = None,
  /**
   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
   * 
   * __Default value:__ `undefined` (None)
   * 
   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
   **/
  var `timeUnit` : Option[SharedEncodingLatitudeTimeUnit] = None,
  /**
   * A title for the field. If `null`, the title will be removed.
   * 
   * __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`). If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`). Otherwise, the title is simply the field name.
   * 
   * __Notes__:
   * 
   * 1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function's options](https://vega.github.io/vega-lite/usage/compile.html#field-title).
   * 
   * 2) If both field definition's `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.
   **/
  var `title` : Option[Text] = None,
  /**
   * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
   * 
   * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
   * 
   * __Default value:__
   * 
   * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
   * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
   * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
   * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
   * 
   * 2) For a constant value in data domain (`datum`):
   * - `"quantitative"` if the datum is a number
   * - `"nominal"` if the datum is a string
   * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
   * 
   * __Note:__
   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
   * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
   * 
   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
   **/
  var `type` : Option[SharedEncodingLatitudeType] = None
)  
{  }
object SharedEncodingLatitude {
  val definedFields = Set("bin", "type", "timeUnit", "datum", "bandPosition", "aggregate", "title", "field") 
}

////////////////////////////////////////////////////////////////////////

// TopLevelRepeatSpecAsObject2Autosize (UnionType)
/**
 * How the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`. Object values can additionally specify parameters for content sizing and automatic resizing.
 * 
 * __Default value__: `pad`
 **/
sealed trait TopLevelRepeatSpecAsObject2Autosize 
   // AutosizeType is defined elsewhere
   // AutoSizeParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AggregateTransform (StructType)

case class AggregateTransform(
  /**
   * Array of objects that define fields to aggregate.
   **/
  var `aggregate` : Seq[AggregatedFieldDef],
  /**
   * The data fields to group by. If not specified, a single group containing all data objects will be used.
   **/
  var `groupby` : Option[Seq[String]] = None
) extends Transform 
{  }
object AggregateTransform {
  val definedFields = Set("aggregate", "groupby") 
}

////////////////////////////////////////////////////////////////////////

// Stream (UnionType)

sealed trait Stream extends PointSelectionConfigOn with LegendStreamBindingLegend with PointSelectionConfigClear with PointSelectionConfigWithoutTypeClear with IntervalSelectionConfigOn with PointSelectionConfigWithoutTypeOn with IntervalSelectionConfigClear with IntervalSelectionConfigWithoutTypeClear with IntervalSelectionConfigWithoutTypeOn
   // EventStream is defined elsewhere
   // DerivedStream is defined elsewhere
   // MergedStream is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontStyleAsObject1 (StructType)

case class ConditionalAxisLabelFontStyleAsObject1(
  var `condition` : ConditionalAxisLabelFontStyleAsObject1Condition,
  /**
   * A constant value in visual domain (e.g., `"red"` / `"#0099ff"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).
   **/
  var `value` : Option[String] = None
) extends ConditionalAxisLabelFontStyle 
{  }
object ConditionalAxisLabelFontStyleAsObject1 {
  val definedFields = Set("condition", "value") 
}

////////////////////////////////////////////////////////////////////////

// MarkConfigStroke (UnionType)
/**
 * Default stroke color. This property has higher precedence than `config.color`. Set to `null` to remove stroke.
 * 
 * __Default value:__ (None)
 **/
sealed trait MarkConfigStroke 
   // Color is defined elsewhere
   // Gradient is defined elsewhere
   case object MarkConfigStrokeAsNull extends MarkConfigStroke
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ColorDef (UnionType)
/**
 * Color of the marks – either fill or stroke color based on  the `filled` property of mark definition. By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`, `"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.
 * 
 * __Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark-config)'s `color` property.
 * 
 * _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels. The `fill` or `stroke` encodings have higher precedence than `color`, thus may override the `color` encoding if conflicting encodings are specified. 2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).
 **/
sealed trait ColorDef 
   // FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNull is defined elsewhere
   // FieldOrDatumDefWithConditionDatumDefGradientStringNull is defined elsewhere
   // ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNull is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelFontStyleAsObject2 (StructType)

case class ConditionalAxisLabelFontStyleAsObject2(
  var `condition` : ConditionalAxisLabelFontStyleAsObject2Condition,
  /**
   * Vega expression (which can refer to Vega-Lite parameters).
   **/
  var `expr` : String
) extends ConditionalAxisLabelFontStyle 
{  }
object ConditionalAxisLabelFontStyleAsObject2 {
  val definedFields = Set("condition", "expr") 
}

////////////////////////////////////////////////////////////////////////

// ScaleDatumDefBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class ScaleDatumDefBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AreaConfigFontSize (UnionType)

sealed trait AreaConfigFontSize 
   // AreaConfigFontSizeAsNumber is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BindInput (StructType)

case class BindInput(
  /**
   * By default, the signal name is used to label input elements. This `name` property can be used instead to specify a custom label for the bound signal.
   **/
  var `name` : Option[String] = None,
  /**
   * Text that appears in the form control when it has no value set.
   **/
  var `placeholder` : Option[String] = None,
  /**
   * An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view.
   **/
  var `element` : Option[String] = None,
  /**
   * A hint for form autofill. See the [HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.
   **/
  var `autocomplete` : Option[String] = None,
  /**
   * The type of input element to use. The valid values are `"checkbox"`, `"radio"`, `"range"`, `"select"`, and any other legal [HTML form input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).
   **/
  var `input` : Option[String] = None,
  /**
   * If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.
   **/
  var `debounce` : Option[JsNumber] = None
) extends Binding 
{  }
object BindInput {
  val definedFields = Set("debounce", "autocomplete", "name", "input", "element", "placeholder") 
}

////////////////////////////////////////////////////////////////////////

// AxisConfigLabelSeparation (UnionType)

sealed trait AxisConfigLabelSeparation 
   case class AxisConfigLabelSeparationAsNumber(value: JsNumber) extends AxisConfigLabelSeparation
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigHref (UnionType)

sealed trait BarConfigHref 
   // UriReference is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AxisTickColor (UnionType)
/**
 * The color of the axis's tick.
 * 
 * __Default value:__ `"gray"`
 **/
sealed trait AxisTickColor 
   case object AxisTickColorAsNull extends AxisTickColor
   // Color is defined elsewhere
   // ExprRef is defined elsewhere
   // ConditionalAxisColor is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefNumberCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefNumberCondition 
   // ConditionalValueDefNumberExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionDatumDefNumberConditionAsArrayOfConditionalValueDefNumberExprRef(value: Seq[ConditionalValueDefNumberExprRef]) extends FieldOrDatumDefWithConditionDatumDefNumberCondition

////////////////////////////////////////////////////////////////////////

// StringFieldDefWithConditionCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait StringFieldDefWithConditionCondition 
   // ConditionalValueDefStringExprRef is defined elsewhere
   case class StringFieldDefWithConditionConditionAsArrayOfConditionalValueDefStringExprRef(value: Seq[ConditionalValueDefStringExprRef]) extends StringFieldDefWithConditionCondition

////////////////////////////////////////////////////////////////////////

// ConditionalAxisStringAsObject2Condition (UnionType)

sealed trait ConditionalAxisStringAsObject2Condition 
   // ConditionalPredicateValueDefStringNullExprRef is defined elsewhere
   case class ConditionalAxisStringAsObject2ConditionAsArrayOfConditionalPredicateValueDefStringNullExprRef(value: Seq[ConditionalPredicateValueDefStringNullExprRef]) extends ConditionalAxisStringAsObject2Condition

////////////////////////////////////////////////////////////////////////

// SharedEncodingThetaBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class SharedEncodingThetaBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTickWidthAsNumber (ConstrainedType)
/**
 * The width, in pixels, of ticks.
 * 
 * __Default value:__ `1`
 **/
case class AxisConfigTickWidthAsNumber(value: JsNumber) extends AxisConfigTickWidth
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RectConfigCursor (UnionType)

sealed trait RectConfigCursor 
   // Cursor is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ConditionalAxisLabelBaselineAsObject1Condition (UnionType)

sealed trait ConditionalAxisLabelBaselineAsObject1Condition 
   // ConditionalPredicateValueDefTextBaselineNullExprRef is defined elsewhere
   case class ConditionalAxisLabelBaselineAsObject1ConditionAsArrayOfConditionalPredicateValueDefTextBaselineNullExprRef(value: Seq[ConditionalPredicateValueDefTextBaselineNullExprRef]) extends ConditionalAxisLabelBaselineAsObject1Condition

////////////////////////////////////////////////////////////////////////

// BinParamsSteps (ConstrainedType)
/**
 * An array of allowable step sizes to choose from.
 **/
case class BinParamsSteps(value: Seq[JsNumber]) 
{ assert(value.size <= 1) }

////////////////////////////////////////////////////////////////////////

// IntervalSelectionConfigTranslate (UnionType)

sealed trait IntervalSelectionConfigTranslate 
   case class IntervalSelectionConfigTranslateAsString(value: String) extends IntervalSelectionConfigTranslate
   case class IntervalSelectionConfigTranslateAsBool(value: Boolean) extends IntervalSelectionConfigTranslate

////////////////////////////////////////////////////////////////////////

// TopLevelFacetSpecTitle (UnionType)
/**
 * Title for the plot.
 **/
sealed trait TopLevelFacetSpecTitle 
   // Text is defined elsewhere
   // TitleParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TitleConfigSubtitleFontSizeAsNumber (ConstrainedType)
/**
 * Font size in pixels for subtitle text.
 **/
case class TitleConfigSubtitleFontSizeAsNumber(value: JsNumber) extends TitleConfigSubtitleFontSize
{ assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// RangeConfigRamp (UnionType)
/**
 * Default [color scheme](https://vega.github.io/vega/docs/schemes/) for sequential quantitative ramps.
 **/
sealed trait RangeConfigRamp 
   // RangeScheme is defined elsewhere
   case class RangeConfigRampAsArrayOfColor(value: Seq[Color]) extends RangeConfigRamp

////////////////////////////////////////////////////////////////////////

// FacetFieldDefSort (UnionType)
/**
 * Sort order for the encoded field.
 * 
 * For continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.
 * 
 * For discrete fields, `sort` can be one of the following:
 * - `"ascending"` or `"descending"` -- for sorting by the values' natural order in JavaScript.
 * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.
 * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).
 * - `null` indicating no sort.
 * 
 * __Default value:__ `"ascending"`
 * 
 * __Note:__ `null` is not supported for `row` and `column`.
 **/
sealed trait FacetFieldDefSort 
   // SortArray is defined elsewhere
   // SortOrder is defined elsewhere
   // EncodingSortField is defined elsewhere
   case object FacetFieldDefSortAsNull extends FacetFieldDefSort

////////////////////////////////////////////////////////////////////////

// ColorScheme (UnionType)

sealed trait ColorScheme extends RangeSchemeAsObject3Scheme
   // Cyclical is defined elsewhere
   // SequentialMultiHue is defined elsewhere
   // SequentialSingleHue is defined elsewhere
   // Diverging is defined elsewhere
   // Categorical is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigStrokeCap (UnionType)

sealed trait MarkConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// BarConfigStrokeCap (UnionType)

sealed trait BarConfigStrokeCap 
   // StrokeCap is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Scales (ConstantType)

case class Scales() extends TopLevelSelectionParameterBind with SelectionParameterBind

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefStringNullCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait FieldOrDatumDefWithConditionDatumDefStringNullCondition 
   // ConditionalValueDefStringNullExprRef is defined elsewhere
   case class FieldOrDatumDefWithConditionDatumDefStringNullConditionAsArrayOfConditionalValueDefStringNullExprRef(value: Seq[ConditionalValueDefStringNullExprRef]) extends FieldOrDatumDefWithConditionDatumDefStringNullCondition

////////////////////////////////////////////////////////////////////////

// OverlayMarkDefText (UnionType)

sealed trait OverlayMarkDefText 
   // Text is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LegendConfigCornerRadius (UnionType)

sealed trait LegendConfigCornerRadius 
   case class LegendConfigCornerRadiusAsNumber(value: JsNumber) extends LegendConfigCornerRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderConfigLabelColor (UnionType)
/**
 * The color of the header label, can be in hex color code or regular color name.
 **/
sealed trait HeaderConfigLabelColor 
   // Color is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FacetFieldDefTimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait FacetFieldDefTimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FoldTransformAs (ConstrainedType)
/**
 * The output field names for the key and value properties produced by the fold transform. __Default value:__ `["key", "value"]`
 **/
case class FoldTransformAs(value: Seq[String]) 
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// ConditionalPredicateMarkPropFieldOrDatumDefAsObject1TimeUnit (UnionType)
/**
 * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field. or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).
 * 
 * __Default value:__ `undefined` (None)
 * 
 * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.
 **/
sealed trait ConditionalPredicateMarkPropFieldOrDatumDefAsObject1TimeUnit 
   // TimeUnit is defined elsewhere
   // TimeUnitParams is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingShapeType (UnionType)
/**
 * The type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`) for the encoded field or constant value (`datum`). It can also be a `"geojson"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).
 * 
 * Vega-Lite automatically infers data types in many cases as discussed below. However, type is required for a field if: (1) the field is not nominal and the field encoding has no specified `aggregate` (except `argmin` and `argmax`), `bin`, scale type, custom `sort` order, nor `timeUnit` or (2) if you wish to use an ordinal scale for a field with `bin` or `timeUnit`.
 * 
 * __Default value:__
 * 
 * 1) For a data `field`, `"nominal"` is the default data type unless the field encoding has `aggregate`, `channel`, `bin`, scale type, `sort`, or `timeUnit` that satisfies the following criteria:
 * - `"quantitative"` is the default type if (1) the encoded field contains `bin` or `aggregate` except `"argmin"` and `"argmax"`, (2) the encoding channel is `latitude` or `longitude` channel or (3) if the specified scale type is [a quantitative scale](https://vega.github.io/vega-lite/docs/scale.html#type).
 * - `"temporal"` is the default type if (1) the encoded field contains `timeUnit` or (2) the specified scale type is a time or utc scale
 * - `ordinal""` is the default type if (1) the encoded field contains a [custom `sort` order](https://vega.github.io/vega-lite/docs/sort.html#specifying-custom-sort-order), (2) the specified scale type is an ordinal/point/band scale, or (3) the encoding channel is `order`.
 * 
 * 2) For a constant value in data domain (`datum`):
 * - `"quantitative"` if the datum is a number
 * - `"nominal"` if the datum is a string
 * - `"temporal"` if the datum is [a date time object](https://vega.github.io/vega-lite/docs/datetime.html)
 * 
 * __Note:__
 * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.
 * - Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).
 * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (default, for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).
 * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat"}`. The `"type"` of the aggregate output is `"quantitative"`.
 * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they must have exactly the same type as their primary channels (e.g., `x`, `y`).
 * 
 * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.
 **/
sealed trait SharedEncodingShapeType 
   // TypeForShape is defined elsewhere
   // Type is defined elsewhere

////////////////////////////////////////////////////////////////////////

// Vector2String (ConstrainedType)
/**
 * The currency prefix and suffix (e.g., ["$", ""]).
 **/
case class Vector2String(value: Seq[String]) extends SelectionInitInterval
{ assert(value.size >= 2)
  assert(value.size <= 2) }

////////////////////////////////////////////////////////////////////////

// TickConfigAspect (UnionType)

sealed trait TickConfigAspect 
   case class TickConfigAspectAsBool(value: Boolean) extends TickConfigAspect
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkDefDir (UnionType)

sealed trait MarkDefDir 
   // TextDirection is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// MarkConfigAlign (UnionType)
/**
 * The horizontal alignment of the text or ranged marks (area, bar, image, rect, rule). One of `"left"`, `"right"`, `"center"`.
 * 
 * __Note:__ Expression reference is *not* supported for range marks.
 **/
sealed trait MarkConfigAlign 
   // Align is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// FieldOrDatumDefWithConditionDatumDefStringNullBandPosition (ConstrainedType)
/**
 * Relative position on a band of a stacked, binned, time unit, or band scale. For example, the marks will be positioned at the beginning of the band if set to `0`, and at the middle of the band if set to `0.5`.
 **/
case class FieldOrDatumDefWithConditionDatumDefStringNullBandPosition(value: JsNumber) 
{ assert(value.value <= 1)
  assert(value.value >= 0) }

////////////////////////////////////////////////////////////////////////

// AxisConfigTitleFontWeight (UnionType)

sealed trait AxisConfigTitleFontWeight 
   // FontWeight is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// TickConfigStrokeDash (UnionType)

sealed trait TickConfigStrokeDash 
   case class TickConfigStrokeDashAsArrayOfNumber(value: Seq[JsNumber]) extends TickConfigStrokeDash
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// ProjectionConfigClipAngle (UnionType)

sealed trait ProjectionConfigClipAngle 
   case class ProjectionConfigClipAngleAsNumber(value: JsNumber) extends ProjectionConfigClipAngle
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingFillDatum (UnionType)
/**
 * A constant value in data domain.
 **/
sealed trait SharedEncodingFillDatum 
   // PrimitiveValue is defined elsewhere
   // DateTime is defined elsewhere
   // ExprRef is defined elsewhere
   // RepeatRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// AreaConfigOuterRadius (ConstrainedType)
/**
 * The outer radius in pixels of arc marks. `outerRadius` is an alias for `radius`.
 * 
 * __Default value:__ `0`
 **/
sealed trait AreaConfigOuterRadius 
   case class AreaConfigOuterRadiusAsNumber(value: JsNumber) extends AreaConfigOuterRadius
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// SharedEncodingTextCondition (UnionType)
/**
 * One or more value definition(s) with [a parameter or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).
 * 
 * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value) since Vega-Lite only allows at most one encoded field per encoding channel.
 **/
sealed trait SharedEncodingTextCondition 
   // ConditionalValueDefTextExprRef is defined elsewhere
   case class SharedEncodingTextConditionAsArrayOfConditionalValueDefTextExprRef(value: Seq[ConditionalValueDefTextExprRef]) extends SharedEncodingTextCondition
   // ConditionalStringFieldDef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// HeaderTitleBaseline (UnionType)
/**
 * The vertical text baseline for the header title. One of `"alphabetic"` (default), `"top"`, `"middle"`, `"bottom"`, `"line-top"`, or `"line-bottom"`. The `"line-top"` and `"line-bottom"` values operate similarly to `"top"` and `"bottom"`, but are calculated relative to the `titleLineHeight` rather than `titleFontSize` alone.
 * 
 * __Default value:__ `"middle"`
 **/
sealed trait HeaderTitleBaseline 
   // TextBaseline is defined elsewhere
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// RectConfigTension (UnionType)

sealed trait RectConfigTension 
   case class RectConfigTensionAsNumber(value: JsNumber) extends RectConfigTension
   // ExprRef is defined elsewhere

////////////////////////////////////////////////////////////////////////

// LineConfigStrokeOpacity (UnionType)

sealed trait LineConfigStrokeOpacity 
   // LineConfigStrokeOpacityAsNumber is defined elsewhere
   // ExprRef is defined elsewhere
